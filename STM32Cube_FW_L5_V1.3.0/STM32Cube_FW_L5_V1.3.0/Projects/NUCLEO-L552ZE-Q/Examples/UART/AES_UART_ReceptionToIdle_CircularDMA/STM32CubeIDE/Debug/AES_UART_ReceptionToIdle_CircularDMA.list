
AES_UART_ReceptionToIdle_CircularDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006548  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08006740  08006740  00016740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d0  080067d0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080067d0  080067d0  000167d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067d8  080067d8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080067d8  080067d8  000167d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080067e0  080067e0  000167e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080067e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023d8  20000088  08006870  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002460  08006870  00022460  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000c707  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0001044c  00000000  00000000  0002c7c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000026b3  00000000  00000000  0003cc11  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000d98  00000000  00000000  0003f2c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001033dd  00000000  00000000  00040060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000cd0  00000000  00000000  00143440  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002b1dc  00000000  00000000  00144110  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016f2ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ec  00000000  00000000  0016f368  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	e000      	b.n	800020a <__do_global_dtors_aux+0x12>
 8000208:	bf00      	nop
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000088 	.word	0x20000088
 8000214:	00000000 	.word	0x00000000
 8000218:	08006724 	.word	0x08006724

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	e000      	b.n	800022a <frame_dummy+0xe>
 8000228:	bf00      	nop
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000008c 	.word	0x2000008c
 8000234:	08006724 	.word	0x08006724

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97c 	b.w	8000548 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	9d08      	ldr	r5, [sp, #32]
 8000270:	4604      	mov	r4, r0
 8000272:	468a      	mov	sl, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0e20 	rsb	lr, r6, #32
 8000288:	fa01 f306 	lsl.w	r3, r1, r6
 800028c:	40b7      	lsls	r7, r6
 800028e:	40b4      	lsls	r4, r6
 8000290:	fa20 fe0e 	lsr.w	lr, r0, lr
 8000294:	ea4e 0a03 	orr.w	sl, lr, r3
 8000298:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fa1f f987 	uxth.w	r9, r7
 80002a2:	fbba fef8 	udiv	lr, sl, r8
 80002a6:	fb08 aa1e 	mls	sl, r8, lr, sl
 80002aa:	fb0e f209 	mul.w	r2, lr, r9
 80002ae:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d90b      	bls.n	80002ce <__udivmoddi4+0x66>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80002bc:	bf2c      	ite	cs
 80002be:	2001      	movcs	r0, #1
 80002c0:	2000      	movcc	r0, #0
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d902      	bls.n	80002cc <__udivmoddi4+0x64>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	f000 812a 	beq.w	8000520 <__udivmoddi4+0x2b8>
 80002cc:	468e      	mov	lr, r1
 80002ce:	1a9a      	subs	r2, r3, r2
 80002d0:	b2a3      	uxth	r3, r4
 80002d2:	fbb2 f0f8 	udiv	r0, r2, r8
 80002d6:	fb08 2210 	mls	r2, r8, r0, r2
 80002da:	fb00 f909 	mul.w	r9, r0, r9
 80002de:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
 80002e2:	45a1      	cmp	r9, r4
 80002e4:	d907      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e6:	193c      	adds	r4, r7, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	d202      	bcs.n	80002f4 <__udivmoddi4+0x8c>
 80002ee:	45a1      	cmp	r9, r4
 80002f0:	f200 8110 	bhi.w	8000514 <__udivmoddi4+0x2ac>
 80002f4:	4618      	mov	r0, r3
 80002f6:	eba4 0409 	sub.w	r4, r4, r9
 80002fa:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f4      	lsrs	r4, r6
 8000304:	2300      	movs	r3, #0
 8000306:	e9c5 4300 	strd	r4, r3, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80f2 	beq.w	80004fc <__udivmoddi4+0x294>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c5 0c00 	strd	r0, ip, [r5]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0x162>
 800032c:	4563      	cmp	r3, ip
 800032e:	f0c0 80e8 	bcc.w	8000502 <__udivmoddi4+0x29a>
 8000332:	4282      	cmp	r2, r0
 8000334:	f240 80e5 	bls.w	8000502 <__udivmoddi4+0x29a>
 8000338:	4608      	mov	r0, r1
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4a00 	strd	r4, sl, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	b902      	cbnz	r2, 8000348 <__udivmoddi4+0xe0>
 8000346:	deff      	udf	#255	; 0xff
 8000348:	fab2 f682 	clz	r6, r2
 800034c:	2e00      	cmp	r6, #0
 800034e:	f040 8099 	bne.w	8000484 <__udivmoddi4+0x21c>
 8000352:	1a8b      	subs	r3, r1, r2
 8000354:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000358:	fa1f f882 	uxth.w	r8, r2
 800035c:	2101      	movs	r1, #1
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	fbb3 f2fe 	udiv	r2, r3, lr
 8000366:	fb0e 3012 	mls	r0, lr, r2, r3
 800036a:	fb08 f902 	mul.w	r9, r8, r2
 800036e:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8000372:	45e1      	cmp	r9, ip
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x120>
 8000376:	eb17 0c0c 	adds.w	ip, r7, ip
 800037a:	f102 33ff 	add.w	r3, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x11e>
 8000380:	45e1      	cmp	r9, ip
 8000382:	f200 80ca 	bhi.w	800051a <__udivmoddi4+0x2b2>
 8000386:	461a      	mov	r2, r3
 8000388:	ebac 0c09 	sub.w	ip, ip, r9
 800038c:	b2a3      	uxth	r3, r4
 800038e:	fbbc f0fe 	udiv	r0, ip, lr
 8000392:	fb0e cc10 	mls	ip, lr, r0, ip
 8000396:	fb08 f800 	mul.w	r8, r8, r0
 800039a:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
 800039e:	45a0      	cmp	r8, r4
 80003a0:	d90e      	bls.n	80003c0 <__udivmoddi4+0x158>
 80003a2:	193c      	adds	r4, r7, r4
 80003a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a8:	bf2c      	ite	cs
 80003aa:	f04f 0c01 	movcs.w	ip, #1
 80003ae:	f04f 0c00 	movcc.w	ip, #0
 80003b2:	45a0      	cmp	r8, r4
 80003b4:	d903      	bls.n	80003be <__udivmoddi4+0x156>
 80003b6:	f1bc 0f00 	cmp.w	ip, #0
 80003ba:	f000 80a8 	beq.w	800050e <__udivmoddi4+0x2a6>
 80003be:	4618      	mov	r0, r3
 80003c0:	eba4 0408 	sub.w	r4, r4, r8
 80003c4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003c8:	e79a      	b.n	8000300 <__udivmoddi4+0x98>
 80003ca:	f1c1 0420 	rsb	r4, r1, #32
 80003ce:	408b      	lsls	r3, r1
 80003d0:	fa02 fe01 	lsl.w	lr, r2, r1
 80003d4:	fa0c f601 	lsl.w	r6, ip, r1
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	fa20 f704 	lsr.w	r7, r0, r4
 80003de:	fa2c fc04 	lsr.w	ip, ip, r4
 80003e2:	fa00 f801 	lsl.w	r8, r0, r1
 80003e6:	4313      	orrs	r3, r2
 80003e8:	433e      	orrs	r6, r7
 80003ea:	0c1f      	lsrs	r7, r3, #16
 80003ec:	0c32      	lsrs	r2, r6, #16
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbbc f0f7 	udiv	r0, ip, r7
 80003f6:	fb07 cc10 	mls	ip, r7, r0, ip
 80003fa:	fb00 fa09 	mul.w	sl, r0, r9
 80003fe:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8000402:	45e2      	cmp	sl, ip
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000406:	eb13 0c0c 	adds.w	ip, r3, ip
 800040a:	f100 32ff 	add.w	r2, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x1ae>
 8000410:	45e2      	cmp	sl, ip
 8000412:	f200 8089 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000416:	4610      	mov	r0, r2
 8000418:	ebac 0c0a 	sub.w	ip, ip, sl
 800041c:	b2b6      	uxth	r6, r6
 800041e:	fbbc faf7 	udiv	sl, ip, r7
 8000422:	fb07 cc1a 	mls	ip, r7, sl, ip
 8000426:	fb0a f909 	mul.w	r9, sl, r9
 800042a:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
 800042e:	4591      	cmp	r9, r2
 8000430:	d906      	bls.n	8000440 <__udivmoddi4+0x1d8>
 8000432:	189a      	adds	r2, r3, r2
 8000434:	f10a 36ff 	add.w	r6, sl, #4294967295
 8000438:	d201      	bcs.n	800043e <__udivmoddi4+0x1d6>
 800043a:	4591      	cmp	r9, r2
 800043c:	d87a      	bhi.n	8000534 <__udivmoddi4+0x2cc>
 800043e:	46b2      	mov	sl, r6
 8000440:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
 8000444:	eba2 0209 	sub.w	r2, r2, r9
 8000448:	fba0 670e 	umull	r6, r7, r0, lr
 800044c:	42ba      	cmp	r2, r7
 800044e:	46b4      	mov	ip, r6
 8000450:	46b9      	mov	r9, r7
 8000452:	d302      	bcc.n	800045a <__udivmoddi4+0x1f2>
 8000454:	d107      	bne.n	8000466 <__udivmoddi4+0x1fe>
 8000456:	45b0      	cmp	r8, r6
 8000458:	d205      	bcs.n	8000466 <__udivmoddi4+0x1fe>
 800045a:	ebb6 0c0e 	subs.w	ip, r6, lr
 800045e:	eb67 0303 	sbc.w	r3, r7, r3
 8000462:	3801      	subs	r0, #1
 8000464:	4699      	mov	r9, r3
 8000466:	2d00      	cmp	r5, #0
 8000468:	d06b      	beq.n	8000542 <__udivmoddi4+0x2da>
 800046a:	ebb8 030c 	subs.w	r3, r8, ip
 800046e:	eb62 0209 	sbc.w	r2, r2, r9
 8000472:	fa02 f404 	lsl.w	r4, r2, r4
 8000476:	40cb      	lsrs	r3, r1
 8000478:	40ca      	lsrs	r2, r1
 800047a:	2100      	movs	r1, #0
 800047c:	431c      	orrs	r4, r3
 800047e:	e9c5 4200 	strd	r4, r2, [r5]
 8000482:	e742      	b.n	800030a <__udivmoddi4+0xa2>
 8000484:	40b7      	lsls	r7, r6
 8000486:	f1c6 0220 	rsb	r2, r6, #32
 800048a:	fa01 f306 	lsl.w	r3, r1, r6
 800048e:	40b4      	lsls	r4, r6
 8000490:	fa21 fc02 	lsr.w	ip, r1, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa20 f202 	lsr.w	r2, r0, r2
 800049c:	fa1f f887 	uxth.w	r8, r7
 80004a0:	fbbc f1fe 	udiv	r1, ip, lr
 80004a4:	431a      	orrs	r2, r3
 80004a6:	fb0e cc11 	mls	ip, lr, r1, ip
 80004aa:	fb01 f008 	mul.w	r0, r1, r8
 80004ae:	0c13      	lsrs	r3, r2, #16
 80004b0:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 80004b4:	4560      	cmp	r0, ip
 80004b6:	d907      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b8:	eb17 0c0c 	adds.w	ip, r7, ip
 80004bc:	f101 33ff 	add.w	r3, r1, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x25e>
 80004c2:	4560      	cmp	r0, ip
 80004c4:	d833      	bhi.n	800052e <__udivmoddi4+0x2c6>
 80004c6:	4619      	mov	r1, r3
 80004c8:	ebac 0c00 	sub.w	ip, ip, r0
 80004cc:	b292      	uxth	r2, r2
 80004ce:	fbbc f0fe 	udiv	r0, ip, lr
 80004d2:	fb0e cc10 	mls	ip, lr, r0, ip
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 80004de:	4563      	cmp	r3, ip
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e2:	eb17 0c0c 	adds.w	ip, r7, ip
 80004e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80004ea:	d201      	bcs.n	80004f0 <__udivmoddi4+0x288>
 80004ec:	4563      	cmp	r3, ip
 80004ee:	d825      	bhi.n	800053c <__udivmoddi4+0x2d4>
 80004f0:	4610      	mov	r0, r2
 80004f2:	ebac 0303 	sub.w	r3, ip, r3
 80004f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004fa:	e730      	b.n	800035e <__udivmoddi4+0xf6>
 80004fc:	4629      	mov	r1, r5
 80004fe:	4628      	mov	r0, r5
 8000500:	e703      	b.n	800030a <__udivmoddi4+0xa2>
 8000502:	1a84      	subs	r4, r0, r2
 8000504:	eb6c 0303 	sbc.w	r3, ip, r3
 8000508:	2001      	movs	r0, #1
 800050a:	469a      	mov	sl, r3
 800050c:	e715      	b.n	800033a <__udivmoddi4+0xd2>
 800050e:	3802      	subs	r0, #2
 8000510:	443c      	add	r4, r7
 8000512:	e755      	b.n	80003c0 <__udivmoddi4+0x158>
 8000514:	3802      	subs	r0, #2
 8000516:	443c      	add	r4, r7
 8000518:	e6ed      	b.n	80002f6 <__udivmoddi4+0x8e>
 800051a:	3a02      	subs	r2, #2
 800051c:	44bc      	add	ip, r7
 800051e:	e733      	b.n	8000388 <__udivmoddi4+0x120>
 8000520:	f1ae 0e02 	sub.w	lr, lr, #2
 8000524:	443b      	add	r3, r7
 8000526:	e6d2      	b.n	80002ce <__udivmoddi4+0x66>
 8000528:	3802      	subs	r0, #2
 800052a:	449c      	add	ip, r3
 800052c:	e774      	b.n	8000418 <__udivmoddi4+0x1b0>
 800052e:	3902      	subs	r1, #2
 8000530:	44bc      	add	ip, r7
 8000532:	e7c9      	b.n	80004c8 <__udivmoddi4+0x260>
 8000534:	f1aa 0a02 	sub.w	sl, sl, #2
 8000538:	441a      	add	r2, r3
 800053a:	e781      	b.n	8000440 <__udivmoddi4+0x1d8>
 800053c:	3802      	subs	r0, #2
 800053e:	44bc      	add	ip, r7
 8000540:	e7d7      	b.n	80004f2 <__udivmoddi4+0x28a>
 8000542:	4629      	mov	r1, r5
 8000544:	e6e1      	b.n	800030a <__udivmoddi4+0xa2>
 8000546:	bf00      	nop

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800054c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000584 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000550:	f000 fdbe 	bl	80010d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000554:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000556:	e003      	b.n	8000560 <LoopCopyDataInit>

08000558 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800055a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800055c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800055e:	3104      	adds	r1, #4

08000560 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000560:	480a      	ldr	r0, [pc, #40]	; (800058c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000564:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000566:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000568:	d3f6      	bcc.n	8000558 <CopyDataInit>
	ldr	r2, =_sbss
 800056a:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <LoopForever+0x12>)
	b	LoopFillZerobss
 800056c:	e002      	b.n	8000574 <LoopFillZerobss>

0800056e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800056e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000570:	f842 3b04 	str.w	r3, [r2], #4

08000574 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <LoopForever+0x16>)
	cmp	r2, r3
 8000576:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000578:	d3f9      	bcc.n	800056e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800057a:	f006 f89b 	bl	80066b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800057e:	f000 f89b 	bl	80006b8 <main>

08000582 <LoopForever>:

LoopForever:
    b LoopForever
 8000582:	e7fe      	b.n	8000582 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000584:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000588:	080067e8 	.word	0x080067e8
	ldr	r0, =_sdata
 800058c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000590:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8000594:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8000598:	20002460 	.word	0x20002460

0800059c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC1_2_IRQHandler>
	...

080005a0 <_ZN9AesHandle7encryptEPKhPh>:
#include "aes_process.hpp"
//max key size of 256bit
unsigned char key[32] = {'m','y','k','e','y','e','n','c','m','y','k','e','y','e','n','c',1,2,3,4,5,6,7,8};

uint8_t AesHandle::encrypt(const unsigned char* input, unsigned char* output)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b0cf      	sub	sp, #316	; 0x13c
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	6018      	str	r0, [r3, #0]
 80005aa:	463b      	mov	r3, r7
 80005ac:	6019      	str	r1, [r3, #0]
    //IV 128bits
    unsigned char IV[16] = {1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8};
 80005ae:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <_ZN9AesHandle7encryptEPKhPh+0x84>)
 80005b0:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80005b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    mbedtls_aes_context enaes_ctx;
    //Initialization
    mbedtls_aes_init( &enaes_ctx );
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 feec 	bl	800539c <mbedtls_aes_init>
    //binding of key
    if(!mbedtls_aes_setkey_enc(&enaes_ctx, key, 256))
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005cc:	4916      	ldr	r1, [pc, #88]	; (8000628 <_ZN9AesHandle7encryptEPKhPh+0x88>)
 80005ce:	4618      	mov	r0, r3
 80005d0:	f004 ff04 	bl	80053dc <mbedtls_aes_setkey_enc>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	bf0c      	ite	eq
 80005da:	2301      	moveq	r3, #1
 80005dc:	2300      	movne	r3, #0
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d018      	beq.n	8000616 <_ZN9AesHandle7encryptEPKhPh+0x76>
    {
        //encryption
        if(mbedtls_aes_crypt_cbc(&enaes_ctx, MBEDTLS_AES_ENCRYPT, 16, IV, input, output))
 80005e4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80005e8:	f107 0008 	add.w	r0, r7, #8
 80005ec:	463b      	mov	r3, r7
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	4613      	mov	r3, r2
 80005fa:	2210      	movs	r2, #16
 80005fc:	2101      	movs	r1, #1
 80005fe:	f005 ffc4 	bl	800658a <mbedtls_aes_crypt_cbc>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	bf14      	ite	ne
 8000608:	2301      	movne	r3, #1
 800060a:	2300      	moveq	r3, #0
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <_ZN9AesHandle7encryptEPKhPh+0x76>
        {
            return 1;
 8000612:	2301      	movs	r3, #1
 8000614:	e000      	b.n	8000618 <_ZN9AesHandle7encryptEPKhPh+0x78>
        }
    }
    return 0;
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800061e:	46bd      	mov	sp, r7
 8000620:	bd90      	pop	{r4, r7, pc}
 8000622:	bf00      	nop
 8000624:	08006740 	.word	0x08006740
 8000628:	20000000 	.word	0x20000000

0800062c <_ZN9AesHandle7decryptEPKhPh>:

uint8_t AesHandle::decrypt(const unsigned char* input, unsigned char* output)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b0cf      	sub	sp, #316	; 0x13c
 8000630:	af02      	add	r7, sp, #8
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	6018      	str	r0, [r3, #0]
 8000636:	463b      	mov	r3, r7
 8000638:	6019      	str	r1, [r3, #0]
    //IV 128bits
    unsigned char IV[16] = {1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8};
 800063a:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <_ZN9AesHandle7decryptEPKhPh+0x84>)
 800063c:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8000640:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000642:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    mbedtls_aes_context decaes_ctx;
    //Initialization
    mbedtls_aes_init( &decaes_ctx );
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	4618      	mov	r0, r3
 800064c:	f004 fea6 	bl	800539c <mbedtls_aes_init>
    //key binding
    if(!mbedtls_aes_setkey_dec(&decaes_ctx, key, 256))
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000658:	4916      	ldr	r1, [pc, #88]	; (80006b4 <_ZN9AesHandle7decryptEPKhPh+0x88>)
 800065a:	4618      	mov	r0, r3
 800065c:	f005 f894 	bl	8005788 <mbedtls_aes_setkey_dec>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	bf0c      	ite	eq
 8000666:	2301      	moveq	r3, #1
 8000668:	2300      	movne	r3, #0
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	d018      	beq.n	80006a2 <_ZN9AesHandle7decryptEPKhPh+0x76>
    {
        //decryption
        if(mbedtls_aes_crypt_cbc(&decaes_ctx, MBEDTLS_AES_DECRYPT, 16, IV, input, output))
 8000670:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000674:	f107 0008 	add.w	r0, r7, #8
 8000678:	463b      	mov	r3, r7
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	4613      	mov	r3, r2
 8000686:	2210      	movs	r2, #16
 8000688:	2100      	movs	r1, #0
 800068a:	f005 ff7e 	bl	800658a <mbedtls_aes_crypt_cbc>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	bf14      	ite	ne
 8000694:	2301      	movne	r3, #1
 8000696:	2300      	moveq	r3, #0
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <_ZN9AesHandle7decryptEPKhPh+0x76>
        {
            return 1;
 800069e:	2301      	movs	r3, #1
 80006a0:	e000      	b.n	80006a4 <_ZN9AesHandle7decryptEPKhPh+0x78>
        }
    }
    return 0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd90      	pop	{r4, r7, pc}
 80006ae:	bf00      	nop
 80006b0:	08006740 	.word	0x08006740
 80006b4:	20000000 	.word	0x20000000

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006be:	f000 fdc5 	bl	800124c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c2:	f000 f84f 	bl	8000764 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c6:	f000 f953 	bl	8000970 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80006ca:	f000 f927 	bl	800091c <_ZL11MX_DMA_Initv>
  MX_ICACHE_Init();
 80006ce:	f000 f8a8 	bl	8000822 <_ZL14MX_ICACHE_Initv>
  MX_LPUART1_UART_Init();
 80006d2:	f000 f8c3 	bl	800085c <_ZL20MX_LPUART1_UART_Initv>
  /* -1- Initialize LEDs mounted on NUCLEO-L552ZE-Q C-01 board */
  BSP_LED_Init(LED1);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 fc68 	bl	8000fac <BSP_LED_Init>
  /* -2- Configure External line 13 (connected to PC.13 pin) in interrupt mode */
  EXTI13_IRQHandler_Config();
 80006dc:	f000 f960 	bl	80009a0 <_ZL24EXTI13_IRQHandler_Configv>
  /* USER CODE BEGIN 2 */
  UserSignal = false;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <main+0x94>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
  /* Initiate Continuous reception */
  StartReception();
 80006e6:	f000 f9bb 	bl	8000a60 <_Z14StartReceptionv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      if(UserSignal)
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <main+0x94>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0fb      	beq.n	80006ea <main+0x32>
      {
          UserSignal = false;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <main+0x94>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
          uint8_t size = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	71fb      	strb	r3, [r7, #7]
          while(!UartReceiveRingBuffer.isEmpty())
 80006fc:	4814      	ldr	r0, [pc, #80]	; (8000750 <main+0x98>)
 80006fe:	f000 faa5 	bl	8000c4c <_ZNK10RingBufferIhLt16EE7isEmptyEv>
 8000702:	4603      	mov	r3, r0
 8000704:	f083 0301 	eor.w	r3, r3, #1
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d00f      	beq.n	800072e <main+0x76>
          {
              InputMessage[size] = UartReceiveRingBuffer.get();
 800070e:	79fc      	ldrb	r4, [r7, #7]
 8000710:	480f      	ldr	r0, [pc, #60]	; (8000750 <main+0x98>)
 8000712:	f000 fab5 	bl	8000c80 <_ZN10RingBufferIhLt16EE3getEv>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <main+0x9c>)
 800071c:	551a      	strb	r2, [r3, r4]
              size++;
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	3301      	adds	r3, #1
 8000722:	71fb      	strb	r3, [r7, #7]
              if(size >= BLOCK_SIZE)
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	2b0f      	cmp	r3, #15
 8000728:	d800      	bhi.n	800072c <main+0x74>
          while(!UartReceiveRingBuffer.isEmpty())
 800072a:	e7e7      	b.n	80006fc <main+0x44>
              {
                  break;
 800072c:	bf00      	nop
              }
          }

          AesHandle::encrypt(InputMessage, EncryptedMessage);
 800072e:	490a      	ldr	r1, [pc, #40]	; (8000758 <main+0xa0>)
 8000730:	4808      	ldr	r0, [pc, #32]	; (8000754 <main+0x9c>)
 8000732:	f7ff ff35 	bl	80005a0 <_ZN9AesHandle7encryptEPKhPh>
          //SendUserData(&hlpuart1, OutputData, BLOCK_SIZE);
          AesHandle::decrypt(EncryptedMessage, DecryptedMessage);
 8000736:	4909      	ldr	r1, [pc, #36]	; (800075c <main+0xa4>)
 8000738:	4807      	ldr	r0, [pc, #28]	; (8000758 <main+0xa0>)
 800073a:	f7ff ff77 	bl	800062c <_ZN9AesHandle7decryptEPKhPh>
          SendUserData(&hlpuart1, DecryptedMessage, BLOCK_SIZE);
 800073e:	2210      	movs	r2, #16
 8000740:	4906      	ldr	r1, [pc, #24]	; (800075c <main+0xa4>)
 8000742:	4807      	ldr	r0, [pc, #28]	; (8000760 <main+0xa8>)
 8000744:	f000 f9aa 	bl	8000a9c <_Z12SendUserDataP20__UART_HandleTypeDefPhh>
	  }
    /* USER CODE BEGIN 3 */
  }
 8000748:	e7cf      	b.n	80006ea <main+0x32>
 800074a:	bf00      	nop
 800074c:	200001c4 	.word	0x200001c4
 8000750:	200001a8 	.word	0x200001a8
 8000754:	200001c8 	.word	0x200001c8
 8000758:	200001e8 	.word	0x200001e8
 800075c:	20000208 	.word	0x20000208
 8000760:	200000a4 	.word	0x200000a4

08000764 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b098      	sub	sp, #96	; 0x60
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0318 	add.w	r3, r7, #24
 800076e:	2248      	movs	r2, #72	; 0x48
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f005 ffcd 	bl	8006712 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000786:	2000      	movs	r0, #0
 8000788:	f001 fcb6 	bl	80020f8 <HAL_PWREx_ControlVoltageScaling>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	bf14      	ite	ne
 8000792:	2301      	movne	r3, #1
 8000794:	2300      	moveq	r3, #0
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 800079c:	f000 fa32 	bl	8000c04 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007aa:	2340      	movs	r3, #64	; 0x40
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b2:	2302      	movs	r3, #2
 80007b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b6:	2304      	movs	r3, #4
 80007b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80007ba:	2337      	movs	r3, #55	; 0x37
 80007bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007be:	2307      	movs	r3, #7
 80007c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fd32 	bl	8002238 <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	bf14      	ite	ne
 80007da:	2301      	movne	r3, #1
 80007dc:	2300      	moveq	r3, #0
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <_Z18SystemClock_Configv+0x84>
  {
    Error_Handler();
 80007e4:	f000 fa0e 	bl	8000c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e8:	230f      	movs	r3, #15
 80007ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ec:	2303      	movs	r3, #3
 80007ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2105      	movs	r1, #5
 8000800:	4618      	mov	r0, r3
 8000802:	f002 f97b 	bl	8002afc <HAL_RCC_ClockConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8000816:	f000 f9f5 	bl	8000c04 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3760      	adds	r7, #96	; 0x60
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_Init 1 */

  /* USER CODE END ICACHE_Init 1 */
  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000826:	2000      	movs	r0, #0
 8000828:	f001 fc28 	bl	800207c <HAL_ICACHE_ConfigAssociativityMode>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	bf14      	ite	ne
 8000832:	2301      	movne	r3, #1
 8000834:	2300      	moveq	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 800083c:	f000 f9e2 	bl	8000c04 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000840:	f001 fc3c 	bl	80020bc <HAL_ICACHE_Enable>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	bf14      	ite	ne
 800084a:	2301      	movne	r3, #1
 800084c:	2300      	moveq	r3, #0
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 8000854:	f000 f9d6 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000862:	4a2d      	ldr	r2, [pc, #180]	; (8000918 <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 8000864:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b29      	ldr	r3, [pc, #164]	; (8000914 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b27      	ldr	r3, [pc, #156]	; (8000914 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088c:	4b21      	ldr	r3, [pc, #132]	; (8000914 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800089a:	2200      	movs	r2, #0
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008a4:	481b      	ldr	r0, [pc, #108]	; (8000914 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008a6:	f003 f8cf 	bl	8003a48 <HAL_UART_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	bf14      	ite	ne
 80008b0:	2301      	movne	r3, #1
 80008b2:	2300      	moveq	r3, #0
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <_ZL20MX_LPUART1_UART_Initv+0x62>
  {
    Error_Handler();
 80008ba:	f000 f9a3 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	4814      	ldr	r0, [pc, #80]	; (8000914 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008c2:	f004 fa35 	bl	8004d30 <HAL_UARTEx_SetTxFifoThreshold>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	bf14      	ite	ne
 80008cc:	2301      	movne	r3, #1
 80008ce:	2300      	moveq	r3, #0
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <_ZL20MX_LPUART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80008d6:	f000 f995 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008de:	f004 fa65 	bl	8004dac <HAL_UARTEx_SetRxFifoThreshold>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	bf14      	ite	ne
 80008e8:	2301      	movne	r3, #1
 80008ea:	2300      	moveq	r3, #0
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <_ZL20MX_LPUART1_UART_Initv+0x9a>
  {
    Error_Handler();
 80008f2:	f000 f987 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008f6:	4807      	ldr	r0, [pc, #28]	; (8000914 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008f8:	f004 f9e1 	bl	8004cbe <HAL_UARTEx_DisableFifoMode>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	bf14      	ite	ne
 8000902:	2301      	movne	r3, #1
 8000904:	2300      	moveq	r3, #0
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <_ZL20MX_LPUART1_UART_Initv+0xb4>
  {
    Error_Handler();
 800090c:	f000 f97a 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200000a4 	.word	0x200000a4
 8000918:	40008000 	.word	0x40008000

0800091c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <_ZL11MX_DMA_Initv+0x50>)
 8000924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000926:	4a11      	ldr	r2, [pc, #68]	; (800096c <_ZL11MX_DMA_Initv+0x50>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6493      	str	r3, [r2, #72]	; 0x48
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <_ZL11MX_DMA_Initv+0x50>)
 8000930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <_ZL11MX_DMA_Initv+0x50>)
 800093c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <_ZL11MX_DMA_Initv+0x50>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6493      	str	r3, [r2, #72]	; 0x48
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <_ZL11MX_DMA_Initv+0x50>)
 8000948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	201d      	movs	r0, #29
 8000958:	f000 fdc9 	bl	80014ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800095c:	201d      	movs	r0, #29
 800095e:	f000 fde0 	bl	8001522 <HAL_NVIC_EnableIRQ>

}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <_ZL12MX_GPIO_Initv+0x2c>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <_ZL12MX_GPIO_Initv+0x2c>)
 800097c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <_ZL12MX_GPIO_Initv+0x2c>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800098e:	f001 fc0f 	bl	80021b0 <HAL_PWREx_EnableVddIO2>

}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000

080009a0 <_ZL24EXTI13_IRQHandler_Configv>:
  * @brief  Configures EXTI line 13 (connected to PC.13 pin) in interrupt mode
  * @param  None
  * @retval None
  */
static void EXTI13_IRQHandler_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;


  /* Enable GPIOC clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <_ZL24EXTI13_IRQHandler_Configv+0x50>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <_ZL24EXTI13_IRQHandler_Configv+0x50>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <_ZL24EXTI13_IRQHandler_Configv+0x50>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /* Configure PC.13 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <_ZL24EXTI13_IRQHandler_Configv+0x54>)
 80009c0:	60bb      	str	r3, [r7, #8]


  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pin = BUTTON_USER_PIN;
 80009c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ca:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	4619      	mov	r1, r3
 80009d0:	4809      	ldr	r0, [pc, #36]	; (80009f8 <_ZL24EXTI13_IRQHandler_Configv+0x58>)
 80009d2:	f001 f96f 	bl	8001cb4 <HAL_GPIO_Init>


  /* Enable and set line 13 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI13_IRQn, 2, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2102      	movs	r1, #2
 80009da:	2018      	movs	r0, #24
 80009dc:	f000 fd87 	bl	80014ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80009e0:	2018      	movs	r0, #24
 80009e2:	f000 fd9e 	bl	8001522 <HAL_NVIC_EnableIRQ>
}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000
 80009f4:	10210000 	.word	0x10210000
 80009f8:	42020800 	.word	0x42020800

080009fc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BUTTON_USER_PIN)
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a0c:	d105      	bne.n	8000a1a <HAL_GPIO_EXTI_Falling_Callback+0x1e>
  {
    /* Toggle LED1 */
    BSP_LED_Toggle(LED1);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f000 fb44 	bl	800109c <BSP_LED_Toggle>
    UserSignal = true;
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <HAL_GPIO_EXTI_Falling_Callback+0x28>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200001c4 	.word	0x200001c4

08000a28 <_Z9PrintInfoP20__UART_HandleTypeDefPht>:
  * @param  String String to be sent to user display
  * @param  Size   Size of string
  * @retval None
  */
void PrintInfo(UART_HandleTypeDef *huart, uint8_t *String, uint16_t Size)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	4613      	mov	r3, r2
 8000a34:	80fb      	strh	r3, [r7, #6]
  if (HAL_OK != HAL_UART_Transmit(huart, String, Size, 100))
 8000a36:	88fa      	ldrh	r2, [r7, #6]
 8000a38:	2364      	movs	r3, #100	; 0x64
 8000a3a:	68b9      	ldr	r1, [r7, #8]
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f003 f853 	bl	8003ae8 <HAL_UART_Transmit>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	bf14      	ite	ne
 8000a48:	2301      	movne	r3, #1
 8000a4a:	2300      	moveq	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <_Z9PrintInfoP20__UART_HandleTypeDefPht+0x2e>
  {
    Error_Handler();
 8000a52:	f000 f8d7 	bl	8000c04 <Error_Handler>
  }
}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <_Z14StartReceptionv>:
/**
  * @brief  This function prints user info on PC com port and initiates RX transfer
  * @retval None
  */
void StartReception(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* Print user info on PC com port */
  PrintInfo(&hlpuart1, aTextInfoStart, COUNTOF(aTextInfoStart));
 8000a64:	2240      	movs	r2, #64	; 0x40
 8000a66:	490a      	ldr	r1, [pc, #40]	; (8000a90 <_Z14StartReceptionv+0x30>)
 8000a68:	480a      	ldr	r0, [pc, #40]	; (8000a94 <_Z14StartReceptionv+0x34>)
 8000a6a:	f7ff ffdd 	bl	8000a28 <_Z9PrintInfoP20__UART_HandleTypeDefPht>
     following events :
     - DMA RX Half Transfer event (HT)
     - DMA RX Transfer Complete event (TC)
     - IDLE event on UART Rx line (indicating a pause is UART reception flow)
  */
  if (HAL_OK != HAL_UARTEx_ReceiveToIdle_DMA(&hlpuart1, aRXBufferUser, RX_BUFFER_SIZE))
 8000a6e:	220a      	movs	r2, #10
 8000a70:	4909      	ldr	r1, [pc, #36]	; (8000a98 <_Z14StartReceptionv+0x38>)
 8000a72:	4808      	ldr	r0, [pc, #32]	; (8000a94 <_Z14StartReceptionv+0x34>)
 8000a74:	f004 f9d8 	bl	8004e28 <HAL_UARTEx_ReceiveToIdle_DMA>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	bf14      	ite	ne
 8000a7e:	2301      	movne	r3, #1
 8000a80:	2300      	moveq	r3, #0
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <_Z14StartReceptionv+0x2c>
  {
    Error_Handler();
 8000a88:	f000 f8bc 	bl	8000c04 <Error_Handler>
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000020 	.word	0x20000020
 8000a94:	200000a4 	.word	0x200000a4
 8000a98:	2000019c 	.word	0x2000019c

08000a9c <_Z12SendUserDataP20__UART_HandleTypeDefPhh>:
        huart->Instance->TDR = UartReceiveRingBuffer.get();
      }
}

void SendUserData(UART_HandleTypeDef *huart, uint8_t* data, uint8_t len)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b087      	sub	sp, #28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i = 0; i < 16; i++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	75fb      	strb	r3, [r7, #23]
 8000aae:	7dfb      	ldrb	r3, [r7, #23]
 8000ab0:	2b0f      	cmp	r3, #15
 8000ab2:	d817      	bhi.n	8000ae4 <_Z12SendUserDataP20__UART_HandleTypeDefPhh+0x48>
    {
        while (!(__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE))) {}
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000abe:	2b80      	cmp	r3, #128	; 0x80
 8000ac0:	bf14      	ite	ne
 8000ac2:	2301      	movne	r3, #1
 8000ac4:	2300      	moveq	r3, #0
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d000      	beq.n	8000ace <_Z12SendUserDataP20__UART_HandleTypeDefPhh+0x32>
 8000acc:	e7f2      	b.n	8000ab4 <_Z12SendUserDataP20__UART_HandleTypeDefPhh+0x18>
        huart->Instance->TDR = data[i];
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	68ba      	ldr	r2, [r7, #8]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781a      	ldrb	r2, [r3, #0]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
    for(uint8_t i = 0; i < 16; i++)
 8000adc:	7dfb      	ldrb	r3, [r7, #23]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	75fb      	strb	r3, [r7, #23]
 8000ae2:	e7e4      	b.n	8000aae <_Z12SendUserDataP20__UART_HandleTypeDefPhh+0x12>
    }
}
 8000ae4:	bf00      	nop
 8000ae6:	371c      	adds	r7, #28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	807b      	strh	r3, [r7, #2]
      static uint8_t old_pos = 0;
      uint8_t i;

      /* Check if number of received data in recpetion buffer has changed */
      if (Size != old_pos)
 8000afc:	4b3d      	ldr	r3, [pc, #244]	; (8000bf4 <HAL_UARTEx_RxEventCallback+0x104>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	887a      	ldrh	r2, [r7, #2]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d06c      	beq.n	8000be2 <HAL_UARTEx_RxEventCallback+0xf2>
      {
        /* Check if position of index in reception buffer has simply be increased
           of if end of buffer has been reached */
        if (Size > old_pos)
 8000b08:	4b3a      	ldr	r3, [pc, #232]	; (8000bf4 <HAL_UARTEx_RxEventCallback+0x104>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	887a      	ldrh	r2, [r7, #2]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d924      	bls.n	8000b5e <HAL_UARTEx_RxEventCallback+0x6e>
        {
          /* Current position is higher than previous one */
          uwNbReceivedChars = Size - old_pos;
 8000b14:	887b      	ldrh	r3, [r7, #2]
 8000b16:	4a37      	ldr	r2, [pc, #220]	; (8000bf4 <HAL_UARTEx_RxEventCallback+0x104>)
 8000b18:	7812      	ldrb	r2, [r2, #0]
 8000b1a:	1a9b      	subs	r3, r3, r2
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <HAL_UARTEx_RxEventCallback+0x108>)
 8000b20:	601a      	str	r2, [r3, #0]
          /* Copy received data in "User" buffer for evacuation */
          for (i = 0; i < uwNbReceivedChars; i++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	73fb      	strb	r3, [r7, #15]
 8000b26:	7bfa      	ldrb	r2, [r7, #15]
 8000b28:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <HAL_UARTEx_RxEventCallback+0x108>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	bf34      	ite	cc
 8000b30:	2301      	movcc	r3, #1
 8000b32:	2300      	movcs	r3, #0
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d053      	beq.n	8000be2 <HAL_UARTEx_RxEventCallback+0xf2>
          {
              UartReceiveRingBuffer.put(aRXBufferUser[old_pos + i]);
 8000b3a:	4b2e      	ldr	r3, [pc, #184]	; (8000bf4 <HAL_UARTEx_RxEventCallback+0x104>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a2d      	ldr	r2, [pc, #180]	; (8000bfc <HAL_UARTEx_RxEventCallback+0x10c>)
 8000b46:	5cd3      	ldrb	r3, [r2, r3]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	482d      	ldr	r0, [pc, #180]	; (8000c00 <HAL_UARTEx_RxEventCallback+0x110>)
 8000b4c:	f000 f8bf 	bl	8000cce <_ZN10RingBufferIhLt16EE3putEh>
              if(UartReceiveRingBuffer.isFull())
 8000b50:	482b      	ldr	r0, [pc, #172]	; (8000c00 <HAL_UARTEx_RxEventCallback+0x110>)
 8000b52:	f000 f8f5 	bl	8000d40 <_ZNK10RingBufferIhLt16EE6isFullEv>
          for (i = 0; i < uwNbReceivedChars; i++)
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e7e3      	b.n	8000b26 <HAL_UARTEx_RxEventCallback+0x36>
        }
        else
        {
          /* Current position is lower than previous one : end of buffer has been reached */
          /* First copy data from current position till end of buffer */
          uwNbReceivedChars = RX_BUFFER_SIZE - old_pos;
 8000b5e:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <HAL_UARTEx_RxEventCallback+0x104>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	f1c3 030a 	rsb	r3, r3, #10
 8000b66:	461a      	mov	r2, r3
 8000b68:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <HAL_UARTEx_RxEventCallback+0x108>)
 8000b6a:	601a      	str	r2, [r3, #0]
          /* Copy received data in "User" buffer for evacuation */
          for (i = 0; i < uwNbReceivedChars; i++)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	7bfa      	ldrb	r2, [r7, #15]
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <HAL_UARTEx_RxEventCallback+0x108>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	bf34      	ite	cc
 8000b7a:	2301      	movcc	r3, #1
 8000b7c:	2300      	movcs	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d011      	beq.n	8000ba8 <HAL_UARTEx_RxEventCallback+0xb8>
          {
              UartReceiveRingBuffer.put(aRXBufferUser[old_pos + i]);
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <HAL_UARTEx_RxEventCallback+0x104>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <HAL_UARTEx_RxEventCallback+0x10c>)
 8000b90:	5cd3      	ldrb	r3, [r2, r3]
 8000b92:	4619      	mov	r1, r3
 8000b94:	481a      	ldr	r0, [pc, #104]	; (8000c00 <HAL_UARTEx_RxEventCallback+0x110>)
 8000b96:	f000 f89a 	bl	8000cce <_ZN10RingBufferIhLt16EE3putEh>
              if(UartReceiveRingBuffer.isFull())
 8000b9a:	4819      	ldr	r0, [pc, #100]	; (8000c00 <HAL_UARTEx_RxEventCallback+0x110>)
 8000b9c:	f000 f8d0 	bl	8000d40 <_ZNK10RingBufferIhLt16EE6isFullEv>
          for (i = 0; i < uwNbReceivedChars; i++)
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	73fb      	strb	r3, [r7, #15]
 8000ba6:	e7e3      	b.n	8000b70 <HAL_UARTEx_RxEventCallback+0x80>
              {
                  //PrintInfo(&hlpuart1, aTextInfoBufferFull, COUNTOF(aTextInfoBufferFull));
              }
          }
          /* Check and continue with beginning of buffer */
          if (Size > 0)
 8000ba8:	887b      	ldrh	r3, [r7, #2]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d019      	beq.n	8000be2 <HAL_UARTEx_RxEventCallback+0xf2>
          {
            for (i = 0; i < Size; i++)
 8000bae:	2300      	movs	r3, #0
 8000bb0:	73fb      	strb	r3, [r7, #15]
 8000bb2:	7bfa      	ldrb	r2, [r7, #15]
 8000bb4:	887b      	ldrh	r3, [r7, #2]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	da0d      	bge.n	8000bd6 <HAL_UARTEx_RxEventCallback+0xe6>
            {
              UartReceiveRingBuffer.put(aRXBufferUser[i]);
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <HAL_UARTEx_RxEventCallback+0x10c>)
 8000bbe:	5cd3      	ldrb	r3, [r2, r3]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480f      	ldr	r0, [pc, #60]	; (8000c00 <HAL_UARTEx_RxEventCallback+0x110>)
 8000bc4:	f000 f883 	bl	8000cce <_ZN10RingBufferIhLt16EE3putEh>
              if(UartReceiveRingBuffer.isFull())
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <HAL_UARTEx_RxEventCallback+0x110>)
 8000bca:	f000 f8b9 	bl	8000d40 <_ZNK10RingBufferIhLt16EE6isFullEv>
            for (i = 0; i < Size; i++)
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	e7ed      	b.n	8000bb2 <HAL_UARTEx_RxEventCallback+0xc2>
              {
                  //PrintInfo(&hlpuart1, aTextInfoBufferFull, COUNTOF(aTextInfoBufferFull));
              }
            }
            uwNbReceivedChars += Size;
 8000bd6:	887a      	ldrh	r2, [r7, #2]
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <HAL_UARTEx_RxEventCallback+0x108>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <HAL_UARTEx_RxEventCallback+0x108>)
 8000be0:	6013      	str	r3, [r2, #0]
          }
        }
      }
      /* Update old_pos as new reference of position in User Rx buffer that
         indicates position to which data have been processed */
      old_pos = Size;
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <HAL_UARTEx_RxEventCallback+0x104>)
 8000be8:	701a      	strb	r2, [r3, #0]
}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000228 	.word	0x20000228
 8000bf8:	200001c0 	.word	0x200001c0
 8000bfc:	2000019c 	.word	0x2000019c
 8000c00:	200001a8 	.word	0x200001a8

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f000 fa2d 	bl	8001068 <BSP_LED_On>
  while (1);
 8000c0e:	e7fe      	b.n	8000c0e <Error_Handler+0xa>

08000c10 <_ZN10RingBufferIhLt16EEC1Ev>:
    var_type head{0};
    var_type tail{0};
    bool is_full{true};

public:
    explicit RingBuffer(void)
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    {
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2210      	movs	r2, #16
 8000c1c:	821a      	strh	r2, [r3, #16]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	825a      	strh	r2, [r3, #18]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	829a      	strh	r2, [r3, #20]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	759a      	strb	r2, [r3, #22]
        static_assert(size > 1 && "size must be grater than 1");
        head    = tail;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	8a9a      	ldrh	r2, [r3, #20]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	825a      	strh	r2, [r3, #18]
        is_full = false;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	759a      	strb	r2, [r3, #22]
    }
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <_ZNK10RingBufferIhLt16EE7isEmptyEv>:
    {
        head    = tail;
        is_full = false;
    }

    bool isEmpty(void) const
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
    {
        return (!is_full && (head == tail));
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7d9b      	ldrb	r3, [r3, #22]
 8000c58:	f083 0301 	eor.w	r3, r3, #1
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d007      	beq.n	8000c72 <_ZNK10RingBufferIhLt16EE7isEmptyEv+0x26>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	8a5a      	ldrh	r2, [r3, #18]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	8a9b      	ldrh	r3, [r3, #20]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d101      	bne.n	8000c72 <_ZNK10RingBufferIhLt16EE7isEmptyEv+0x26>
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e000      	b.n	8000c74 <_ZNK10RingBufferIhLt16EE7isEmptyEv+0x28>
 8000c72:	2300      	movs	r3, #0
    }
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <_ZN10RingBufferIhLt16EE3getEv>:
    value_type get(void)
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
        if(isEmpty())
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ffdf 	bl	8000c4c <_ZNK10RingBufferIhLt16EE7isEmptyEv>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <_ZN10RingBufferIhLt16EE3getEv+0x18>
            return 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	e016      	b.n	8000cc6 <_ZN10RingBufferIhLt16EE3getEv+0x46>
        value_type val = buffer[tail];
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	8a9b      	ldrh	r3, [r3, #20]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	5c9b      	ldrb	r3, [r3, r2]
 8000ca2:	73fb      	strb	r3, [r7, #15]
        is_full = false;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	759a      	strb	r2, [r3, #22]
        tail = (tail + 1u) % buffer_size;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	8a9b      	ldrh	r3, [r3, #20]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	8a12      	ldrh	r2, [r2, #16]
 8000cb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000cb8:	fb02 f201 	mul.w	r2, r2, r1
 8000cbc:	1a9b      	subs	r3, r3, r2
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	829a      	strh	r2, [r3, #20]
        return val;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
    }
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZN10RingBufferIhLt16EE3putEh>:
    void put(value_type item)
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	70fb      	strb	r3, [r7, #3]
        buffer[head] = item;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	8a5b      	ldrh	r3, [r3, #18]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	78fa      	ldrb	r2, [r7, #3]
 8000ce4:	545a      	strb	r2, [r3, r1]
        if(is_full)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	7d9b      	ldrb	r3, [r3, #22]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00c      	beq.n	8000d08 <_ZN10RingBufferIhLt16EE3putEh+0x3a>
            tail = (tail + 1u) % buffer_size;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	8a9b      	ldrh	r3, [r3, #20]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	8a12      	ldrh	r2, [r2, #16]
 8000cf8:	fbb3 f1f2 	udiv	r1, r3, r2
 8000cfc:	fb02 f201 	mul.w	r2, r2, r1
 8000d00:	1a9b      	subs	r3, r3, r2
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	829a      	strh	r2, [r3, #20]
        head = (head + 1u) % buffer_size;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	8a5b      	ldrh	r3, [r3, #18]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	8a12      	ldrh	r2, [r2, #16]
 8000d12:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d16:	fb02 f201 	mul.w	r2, r2, r1
 8000d1a:	1a9b      	subs	r3, r3, r2
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	825a      	strh	r2, [r3, #18]
        if(head == tail)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	8a5a      	ldrh	r2, [r3, #18]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	8a9b      	ldrh	r3, [r3, #20]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d102      	bne.n	8000d34 <_ZN10RingBufferIhLt16EE3putEh+0x66>
            is_full = true;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2201      	movs	r2, #1
 8000d32:	759a      	strb	r2, [r3, #22]
    }
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <_ZNK10RingBufferIhLt16EE6isFullEv>:

    bool isFull(void) const
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
    {
        return is_full;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7d9b      	ldrb	r3, [r3, #22]
    }
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <_Z41__static_initialization_and_destruction_0ii>:
  /* USER CODE END Error_Handler_Debug */
}
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d107      	bne.n	8000d78 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d102      	bne.n	8000d78 <_Z41__static_initialization_and_destruction_0ii+0x20>
RingBuffer<uint8_t, BLOCK_SIZE> UartReceiveRingBuffer;
 8000d72:	4803      	ldr	r0, [pc, #12]	; (8000d80 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000d74:	f7ff ff4c 	bl	8000c10 <_ZN10RingBufferIhLt16EEC1Ev>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200001a8 	.word	0x200001a8

08000d84 <_GLOBAL__sub_I_hlpuart1>:
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f7ff ffe3 	bl	8000d58 <_Z41__static_initialization_and_destruction_0ii>
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <HAL_MspInit+0x44>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <HAL_MspInit+0x44>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6613      	str	r3, [r2, #96]	; 0x60
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <HAL_MspInit+0x44>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_MspInit+0x44>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <HAL_MspInit+0x44>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_MspInit+0x44>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dca:	f001 fa01 	bl	80021d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000

08000ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b0ae      	sub	sp, #184	; 0xb8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	2294      	movs	r2, #148	; 0x94
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f005 fc88 	bl	8006712 <memset>
  if(huart->Instance==LPUART1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a3f      	ldr	r2, [pc, #252]	; (8000f04 <HAL_UART_MspInit+0x128>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d177      	bne.n	8000efc <HAL_UART_MspInit+0x120>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e0c:	2320      	movs	r3, #32
 8000e0e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 f941 	bl	80030a0 <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e24:	f7ff feee 	bl	8000c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e28:	4b37      	ldr	r3, [pc, #220]	; (8000f08 <HAL_UART_MspInit+0x12c>)
 8000e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e2c:	4a36      	ldr	r2, [pc, #216]	; (8000f08 <HAL_UART_MspInit+0x12c>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e34:	4b34      	ldr	r3, [pc, #208]	; (8000f08 <HAL_UART_MspInit+0x12c>)
 8000e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e40:	4b31      	ldr	r3, [pc, #196]	; (8000f08 <HAL_UART_MspInit+0x12c>)
 8000e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e44:	4a30      	ldr	r2, [pc, #192]	; (8000f08 <HAL_UART_MspInit+0x12c>)
 8000e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4c:	4b2e      	ldr	r3, [pc, #184]	; (8000f08 <HAL_UART_MspInit+0x12c>)
 8000e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000e58:	f001 f9aa 	bl	80021b0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000e5c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e76:	2308      	movs	r3, #8
 8000e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e80:	4619      	mov	r1, r3
 8000e82:	4822      	ldr	r0, [pc, #136]	; (8000f0c <HAL_UART_MspInit+0x130>)
 8000e84:	f000 ff16 	bl	8001cb4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000e88:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <HAL_UART_MspInit+0x134>)
 8000e8a:	4a22      	ldr	r2, [pc, #136]	; (8000f14 <HAL_UART_MspInit+0x138>)
 8000e8c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <HAL_UART_MspInit+0x134>)
 8000e90:	2223      	movs	r2, #35	; 0x23
 8000e92:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <HAL_UART_MspInit+0x134>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <HAL_UART_MspInit+0x134>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <HAL_UART_MspInit+0x134>)
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <HAL_UART_MspInit+0x134>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_UART_MspInit+0x134>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <HAL_UART_MspInit+0x134>)
 8000eb4:	2220      	movs	r2, #32
 8000eb6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_UART_MspInit+0x134>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000ebe:	4814      	ldr	r0, [pc, #80]	; (8000f10 <HAL_UART_MspInit+0x134>)
 8000ec0:	f000 fb4a 	bl	8001558 <HAL_DMA_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8000eca:	f7ff fe9b 	bl	8000c04 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000ece:	2110      	movs	r1, #16
 8000ed0:	480f      	ldr	r0, [pc, #60]	; (8000f10 <HAL_UART_MspInit+0x134>)
 8000ed2:	f000 fe1f 	bl	8001b14 <HAL_DMA_ConfigChannelAttributes>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8000edc:	f7ff fe92 	bl	8000c04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <HAL_UART_MspInit+0x134>)
 8000ee4:	67da      	str	r2, [r3, #124]	; 0x7c
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <HAL_UART_MspInit+0x134>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2042      	movs	r0, #66	; 0x42
 8000ef2:	f000 fafc 	bl	80014ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000ef6:	2042      	movs	r0, #66	; 0x42
 8000ef8:	f000 fb13 	bl	8001522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000efc:	bf00      	nop
 8000efe:	37b8      	adds	r7, #184	; 0xb8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40008000 	.word	0x40008000
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	42021800 	.word	0x42021800
 8000f10:	20000134 	.word	0x20000134
 8000f14:	40020008 	.word	0x40020008

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6c:	f000 f9c4 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <DMA1_Channel1_IRQHandler+0x10>)
 8000f7a:	f000 fccb 	bl	8001914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000134 	.word	0x20000134

08000f88 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 31.
  */
void LPUART1_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <LPUART1_IRQHandler+0x10>)
 8000f8e:	f002 fe41 	bl	8003c14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200000a4 	.word	0x200000a4

08000f9c <EXTI13_IRQHandler>:
  * @brief  This function handles external line 13 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI13_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 8000fa0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fa4:	f001 f838 	bl	8002018 <HAL_GPIO_EXTI_IRQHandler>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED1)
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d10c      	bne.n	8000fd6 <BSP_LED_Init+0x2a>
  {
    LED1_GPIO_CLK_ENABLE();
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <BSP_LED_Init+0xb0>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	4a26      	ldr	r2, [pc, #152]	; (800105c <BSP_LED_Init+0xb0>)
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc8:	4b24      	ldr	r3, [pc, #144]	; (800105c <BSP_LED_Init+0xb0>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	e01b      	b.n	800100e <BSP_LED_Init+0x62>
  }
  else if (Led == LED2)
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d10c      	bne.n	8000ff6 <BSP_LED_Init+0x4a>
  {
    LED2_GPIO_CLK_ENABLE();
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <BSP_LED_Init+0xb0>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe0:	4a1e      	ldr	r2, [pc, #120]	; (800105c <BSP_LED_Init+0xb0>)
 8000fe2:	f043 0302 	orr.w	r3, r3, #2
 8000fe6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <BSP_LED_Init+0xb0>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	e00b      	b.n	800100e <BSP_LED_Init+0x62>
  }
  else /* Led = LED3 */
  {
    LED3_GPIO_CLK_ENABLE();
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <BSP_LED_Init+0xb0>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a18      	ldr	r2, [pc, #96]	; (800105c <BSP_LED_Init+0xb0>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <BSP_LED_Init+0xb0>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	4a13      	ldr	r2, [pc, #76]	; (8001060 <BSP_LED_Init+0xb4>)
 8001012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 800101c:	2301      	movs	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	4a0f      	ldr	r2, [pc, #60]	; (8001064 <BSP_LED_Init+0xb8>)
 8001028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102c:	f107 0214 	add.w	r2, r7, #20
 8001030:	4611      	mov	r1, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fe3e 	bl	8001cb4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <BSP_LED_Init+0xb8>)
 800103c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	4a07      	ldr	r2, [pc, #28]	; (8001060 <BSP_LED_Init+0xb4>)
 8001044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001048:	2200      	movs	r2, #0
 800104a:	4619      	mov	r1, r3
 800104c:	f000 ffb2 	bl	8001fb4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000
 8001060:	20000060 	.word	0x20000060
 8001064:	20000068 	.word	0x20000068

08001068 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <BSP_LED_On+0x2c>)
 8001076:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <BSP_LED_On+0x30>)
 800107e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001082:	2201      	movs	r2, #1
 8001084:	4619      	mov	r1, r3
 8001086:	f000 ff95 	bl	8001fb4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000068 	.word	0x20000068
 8001098:	20000060 	.word	0x20000060

0800109c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <BSP_LED_Toggle+0x2c>)
 80010aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <BSP_LED_Toggle+0x30>)
 80010b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010b6:	4619      	mov	r1, r3
 80010b8:	f000 ff94 	bl	8001fe4 <HAL_GPIO_TogglePin>
  return BSP_ERROR_NONE;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000068 	.word	0x20000068
 80010cc:	20000060 	.word	0x20000060

080010d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <SystemInit+0x20>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <SystemInit+0x20>)
 80010dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b087      	sub	sp, #28
 80010f8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80010fa:	4b4f      	ldr	r3, [pc, #316]	; (8001238 <SystemCoreClockUpdate+0x144>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	2b00      	cmp	r3, #0
 8001104:	d107      	bne.n	8001116 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001106:	4b4c      	ldr	r3, [pc, #304]	; (8001238 <SystemCoreClockUpdate+0x144>)
 8001108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	e005      	b.n	8001122 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001116:	4b48      	ldr	r3, [pc, #288]	; (8001238 <SystemCoreClockUpdate+0x144>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	f003 030f 	and.w	r3, r3, #15
 8001120:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001122:	4a46      	ldr	r2, [pc, #280]	; (800123c <SystemCoreClockUpdate+0x148>)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800112c:	4b42      	ldr	r3, [pc, #264]	; (8001238 <SystemCoreClockUpdate+0x144>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	2b0c      	cmp	r3, #12
 8001136:	d865      	bhi.n	8001204 <SystemCoreClockUpdate+0x110>
 8001138:	a201      	add	r2, pc, #4	; (adr r2, 8001140 <SystemCoreClockUpdate+0x4c>)
 800113a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113e:	bf00      	nop
 8001140:	08001175 	.word	0x08001175
 8001144:	08001205 	.word	0x08001205
 8001148:	08001205 	.word	0x08001205
 800114c:	08001205 	.word	0x08001205
 8001150:	0800117d 	.word	0x0800117d
 8001154:	08001205 	.word	0x08001205
 8001158:	08001205 	.word	0x08001205
 800115c:	08001205 	.word	0x08001205
 8001160:	08001185 	.word	0x08001185
 8001164:	08001205 	.word	0x08001205
 8001168:	08001205 	.word	0x08001205
 800116c:	08001205 	.word	0x08001205
 8001170:	0800118d 	.word	0x0800118d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001174:	4a32      	ldr	r2, [pc, #200]	; (8001240 <SystemCoreClockUpdate+0x14c>)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	6013      	str	r3, [r2, #0]
      break;
 800117a:	e047      	b.n	800120c <SystemCoreClockUpdate+0x118>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800117c:	4b30      	ldr	r3, [pc, #192]	; (8001240 <SystemCoreClockUpdate+0x14c>)
 800117e:	4a31      	ldr	r2, [pc, #196]	; (8001244 <SystemCoreClockUpdate+0x150>)
 8001180:	601a      	str	r2, [r3, #0]
      break;
 8001182:	e043      	b.n	800120c <SystemCoreClockUpdate+0x118>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001184:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <SystemCoreClockUpdate+0x14c>)
 8001186:	4a2f      	ldr	r2, [pc, #188]	; (8001244 <SystemCoreClockUpdate+0x150>)
 8001188:	601a      	str	r2, [r3, #0]
      break;
 800118a:	e03f      	b.n	800120c <SystemCoreClockUpdate+0x118>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800118c:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <SystemCoreClockUpdate+0x144>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <SystemCoreClockUpdate+0x144>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	3301      	adds	r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d002      	beq.n	80011b0 <SystemCoreClockUpdate+0xbc>
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d006      	beq.n	80011bc <SystemCoreClockUpdate+0xc8>
 80011ae:	e00b      	b.n	80011c8 <SystemCoreClockUpdate+0xd4>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80011b0:	4a24      	ldr	r2, [pc, #144]	; (8001244 <SystemCoreClockUpdate+0x150>)
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b8:	613b      	str	r3, [r7, #16]
          break;
 80011ba:	e00b      	b.n	80011d4 <SystemCoreClockUpdate+0xe0>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80011bc:	4a21      	ldr	r2, [pc, #132]	; (8001244 <SystemCoreClockUpdate+0x150>)
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c4:	613b      	str	r3, [r7, #16]
          break;
 80011c6:	e005      	b.n	80011d4 <SystemCoreClockUpdate+0xe0>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d0:	613b      	str	r3, [r7, #16]
          break;
 80011d2:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <SystemCoreClockUpdate+0x144>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	fb02 f303 	mul.w	r3, r2, r3
 80011e4:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <SystemCoreClockUpdate+0x144>)
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	0e5b      	lsrs	r3, r3, #25
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	3301      	adds	r3, #1
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fe:	4a10      	ldr	r2, [pc, #64]	; (8001240 <SystemCoreClockUpdate+0x14c>)
 8001200:	6013      	str	r3, [r2, #0]
      break;
 8001202:	e003      	b.n	800120c <SystemCoreClockUpdate+0x118>

    default:
      SystemCoreClock = msirange;
 8001204:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <SystemCoreClockUpdate+0x14c>)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	6013      	str	r3, [r2, #0]
      break;
 800120a:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <SystemCoreClockUpdate+0x144>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <SystemCoreClockUpdate+0x154>)
 8001218:	5cd3      	ldrb	r3, [r2, r3]
 800121a:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <SystemCoreClockUpdate+0x14c>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	fa22 f303 	lsr.w	r3, r2, r3
 8001226:	4a06      	ldr	r2, [pc, #24]	; (8001240 <SystemCoreClockUpdate+0x14c>)
 8001228:	6013      	str	r3, [r2, #0]
}
 800122a:	bf00      	nop
 800122c:	371c      	adds	r7, #28
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	08006778 	.word	0x08006778
 8001240:	20000074 	.word	0x20000074
 8001244:	00f42400 	.word	0x00f42400
 8001248:	08006760 	.word	0x08006760

0800124c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001256:	2004      	movs	r0, #4
 8001258:	f000 f93e 	bl	80014d8 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800125c:	f7ff ff4a 	bl	80010f4 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001260:	2000      	movs	r0, #0
 8001262:	f000 f80d 	bl	8001280 <HAL_InitTick>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d002      	beq.n	8001272 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	71fb      	strb	r3, [r7, #7]
 8001270:	e001      	b.n	8001276 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001272:	f7ff fd8f 	bl	8000d94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001276:	79fb      	ldrb	r3, [r7, #7]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <HAL_InitTick+0x6c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d023      	beq.n	80012dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <HAL_InitTick+0x70>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_InitTick+0x6c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f947 	bl	800153e <HAL_SYSTICK_Config>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10f      	bne.n	80012d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b07      	cmp	r3, #7
 80012ba:	d809      	bhi.n	80012d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f000 f913 	bl	80014ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <HAL_InitTick+0x74>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e007      	b.n	80012e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e004      	b.n	80012e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e001      	b.n	80012e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000007c 	.word	0x2000007c
 80012f0:	20000074 	.word	0x20000074
 80012f4:	20000078 	.word	0x20000078

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	2000007c 	.word	0x2000007c
 800131c:	20002458 	.word	0x20002458

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20002458 	.word	0x20002458

08001338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001354:	4013      	ands	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136a:	4a04      	ldr	r2, [pc, #16]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	60d3      	str	r3, [r2, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <__NVIC_GetPriorityGrouping+0x18>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	f003 0307 	and.w	r3, r3, #7
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	db0b      	blt.n	80013c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	f003 021f 	and.w	r2, r3, #31
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <__NVIC_EnableIRQ+0x38>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	2001      	movs	r0, #1
 80013be:	fa00 f202 	lsl.w	r2, r0, r2
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0152      	lsls	r2, r2, #5
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0152      	lsls	r2, r2, #5
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b03      	cmp	r3, #3
 8001448:	bf28      	it	cs
 800144a:	2303      	movcs	r3, #3
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3303      	adds	r3, #3
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b04      	subs	r3, #4
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a4:	d301      	bcc.n	80014aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00f      	b.n	80014ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <SysTick_Config+0x40>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b2:	2107      	movs	r1, #7
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f7ff ff8e 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <SysTick_Config+0x40>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <SysTick_Config+0x40>)
 80014c4:	2207      	movs	r2, #7
 80014c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	e000e010 	.word	0xe000e010

080014d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff29 	bl	8001338 <__NVIC_SetPriorityGrouping>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014fc:	f7ff ff40 	bl	8001380 <__NVIC_GetPriorityGrouping>
 8001500:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff ff90 	bl	800142c <NVIC_EncodePriority>
 800150c:	4602      	mov	r2, r0
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff5f 	bl	80013d8 <__NVIC_SetPriority>
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff33 	bl	800139c <__NVIC_EnableIRQ>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ffa4 	bl	8001494 <SysTick_Config>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e08d      	b.n	8001686 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	4b47      	ldr	r3, [pc, #284]	; (8001690 <HAL_DMA_Init+0x138>)
 8001572:	429a      	cmp	r2, r3
 8001574:	d80f      	bhi.n	8001596 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	4b45      	ldr	r3, [pc, #276]	; (8001694 <HAL_DMA_Init+0x13c>)
 800157e:	4413      	add	r3, r2
 8001580:	4a45      	ldr	r2, [pc, #276]	; (8001698 <HAL_DMA_Init+0x140>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	009a      	lsls	r2, r3, #2
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a42      	ldr	r2, [pc, #264]	; (800169c <HAL_DMA_Init+0x144>)
 8001592:	649a      	str	r2, [r3, #72]	; 0x48
 8001594:	e00e      	b.n	80015b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	4b40      	ldr	r3, [pc, #256]	; (80016a0 <HAL_DMA_Init+0x148>)
 800159e:	4413      	add	r3, r2
 80015a0:	4a3d      	ldr	r2, [pc, #244]	; (8001698 <HAL_DMA_Init+0x140>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	091b      	lsrs	r3, r3, #4
 80015a8:	009a      	lsls	r2, r3, #2
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a3c      	ldr	r2, [pc, #240]	; (80016a4 <HAL_DMA_Init+0x14c>)
 80015b2:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2202      	movs	r2, #2
 80015b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 80015ca:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80015ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 faf2 	bl	8001bf0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001614:	d102      	bne.n	800161c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001630:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d010      	beq.n	800165c <HAL_DMA_Init+0x104>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b04      	cmp	r3, #4
 8001640:	d80c      	bhi.n	800165c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fb12 	bl	8001c6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	e008      	b.n	800166e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40020407 	.word	0x40020407
 8001694:	bffdfff8 	.word	0xbffdfff8
 8001698:	cccccccd 	.word	0xcccccccd
 800169c:	40020000 	.word	0x40020000
 80016a0:	bffdfbf8 	.word	0xbffdfbf8
 80016a4:	40020400 	.word	0x40020400

080016a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_DMA_Start_IT+0x20>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e066      	b.n	8001796 <HAL_DMA_Start_IT+0xee>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d155      	bne.n	8001788 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2202      	movs	r2, #2
 80016e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0201 	bic.w	r2, r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	68b9      	ldr	r1, [r7, #8]
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f000 fa37 	bl	8001b74 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	2b00      	cmp	r3, #0
 800170c:	d008      	beq.n	8001720 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 020e 	orr.w	r2, r2, #14
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e00f      	b.n	8001740 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0204 	bic.w	r2, r2, #4
 800172e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 020a 	orr.w	r2, r2, #10
 800173e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800175c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001774:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f042 0201 	orr.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	e005      	b.n	8001794 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001790:	2302      	movs	r3, #2
 8001792:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001794:	7dfb      	ldrb	r3, [r7, #23]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800179e:	b480      	push	{r7}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d008      	beq.n	80017c8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2204      	movs	r2, #4
 80017ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e040      	b.n	800184a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 020e 	bic.w	r2, r2, #14
 80017d6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0201 	bic.w	r2, r2, #1
 80017f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fc:	f003 021c 	and.w	r2, r3, #28
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001804:	2101      	movs	r1, #1
 8001806:	fa01 f202 	lsl.w	r2, r1, r2
 800180a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001814:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00c      	beq.n	8001838 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001828:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800182c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001836:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800184a:	4618      	mov	r0, r3
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d005      	beq.n	800187a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2204      	movs	r2, #4
 8001872:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e047      	b.n	800190a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 020e 	bic.w	r2, r2, #14
 8001888:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0201 	bic.w	r2, r2, #1
 8001898:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	f003 021c 	and.w	r2, r3, #28
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b6:	2101      	movs	r1, #1
 80018b8:	fa01 f202 	lsl.w	r2, r1, r2
 80018bc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80018c6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00c      	beq.n	80018ea <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80018e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	4798      	blx	r3
    }
  }
  return status;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001930:	f003 031c 	and.w	r3, r3, #28
 8001934:	2204      	movs	r2, #4
 8001936:	409a      	lsls	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4013      	ands	r3, r2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d053      	beq.n	80019e8 <HAL_DMA_IRQHandler+0xd4>
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b00      	cmp	r3, #0
 8001948:	d04e      	beq.n	80019e8 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d024      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195c:	f003 021c 	and.w	r2, r3, #28
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001964:	2104      	movs	r1, #4
 8001966:	fa01 f202 	lsl.w	r2, r1, r2
 800196a:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80c0 	beq.w	8001b04 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800198c:	e0ba      	b.n	8001b04 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 80b6 	beq.w	8001b04 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80019a0:	e0b0      	b.n	8001b04 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0320 	and.w	r3, r3, #32
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d107      	bne.n	80019c0 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0204 	bic.w	r2, r2, #4
 80019be:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c4:	f003 021c 	and.w	r2, r3, #28
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019cc:	2104      	movs	r1, #4
 80019ce:	fa01 f202 	lsl.w	r2, r1, r2
 80019d2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 8093 	beq.w	8001b04 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80019e6:	e08d      	b.n	8001b04 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ec:	f003 031c 	and.w	r3, r3, #28
 80019f0:	2202      	movs	r2, #2
 80019f2:	409a      	lsls	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d04e      	beq.n	8001a9a <HAL_DMA_IRQHandler+0x186>
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d049      	beq.n	8001a9a <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d018      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d108      	bne.n	8001a34 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d06e      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001a32:	e069      	b.n	8001b08 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d065      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001a44:	e060      	b.n	8001b08 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0320 	and.w	r3, r3, #32
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10b      	bne.n	8001a6c <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 020a 	bic.w	r2, r2, #10
 8001a62:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a70:	f003 021c 	and.w	r2, r3, #28
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a78:	2102      	movs	r1, #2
 8001a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d03b      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001a98:	e036      	b.n	8001b08 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	f003 031c 	and.w	r3, r3, #28
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d02e      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x1f8>
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d029      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 020e 	bic.w	r2, r2, #14
 8001ac6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001acc:	f003 021c 	and.w	r2, r3, #28
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ada:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d008      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b02:	e002      	b.n	8001b0a <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001b04:	bf00      	nop
 8001b06:	e000      	b.n	8001b0a <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001b08:	bf00      	nop
  return;
 8001b0a:	bf00      	nop
 8001b0c:	bf00      	nop
}
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d103      	bne.n	8001b30 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	72fb      	strb	r3, [r7, #11]
    return status;
 8001b2c:	7afb      	ldrb	r3, [r7, #11]
 8001b2e:	e01b      	b.n	8001b68 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00d      	beq.n	8001b5e <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	e003      	b.n	8001b5e <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b5c:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	601a      	str	r2, [r3, #0]

  return status;
 8001b66:	7afb      	ldrb	r3, [r7, #11]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001b8a:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d004      	beq.n	8001b9e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001b9c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	f003 021c 	and.w	r2, r3, #28
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001baa:	2101      	movs	r1, #1
 8001bac:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b10      	cmp	r3, #16
 8001bc0:	d108      	bne.n	8001bd4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8001bd2:	e007      	b.n	8001be4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	60da      	str	r2, [r3, #12]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d80a      	bhi.n	8001c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c10:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6513      	str	r3, [r2, #80]	; 0x50
 8001c18:	e007      	b.n	8001c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	009a      	lsls	r2, r3, #2
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001c24:	4413      	add	r3, r2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	3b08      	subs	r3, #8
 8001c32:	4a0c      	ldr	r2, [pc, #48]	; (8001c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001c34:	fba2 2303 	umull	r2, r3, r2, r3
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c40:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	2201      	movs	r2, #1
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	40020407 	.word	0x40020407
 8001c60:	40020820 	.word	0x40020820
 8001c64:	cccccccd 	.word	0xcccccccd
 8001c68:	40020880 	.word	0x40020880

08001c6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c80:	4413      	add	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	461a      	mov	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2201      	movs	r2, #1
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	1000823f 	.word	0x1000823f
 8001cb0:	40020940 	.word	0x40020940

08001cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cc2:	e158      	b.n	8001f76 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2101      	movs	r1, #1
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 814a 	beq.w	8001f70 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d00b      	beq.n	8001cfc <HAL_GPIO_Init+0x48>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d007      	beq.n	8001cfc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cf0:	2b11      	cmp	r3, #17
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b12      	cmp	r3, #18
 8001cfa:	d130      	bne.n	8001d5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2203      	movs	r2, #3
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d32:	2201      	movs	r2, #1
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	f003 0201 	and.w	r2, r3, #1
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2203      	movs	r2, #3
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0xea>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b12      	cmp	r3, #18
 8001d9c:	d123      	bne.n	8001de6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	08da      	lsrs	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3208      	adds	r2, #8
 8001da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001daa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	220f      	movs	r2, #15
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	08da      	lsrs	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3208      	adds	r2, #8
 8001de0:	6939      	ldr	r1, [r7, #16]
 8001de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	2203      	movs	r2, #3
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0203 	and.w	r2, r3, #3
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80a4 	beq.w	8001f70 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001e28:	4a5a      	ldr	r2, [pc, #360]	; (8001f94 <HAL_GPIO_Init+0x2e0>)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	089b      	lsrs	r3, r3, #2
 8001e2e:	3318      	adds	r3, #24
 8001e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	220f      	movs	r2, #15
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a52      	ldr	r2, [pc, #328]	; (8001f98 <HAL_GPIO_Init+0x2e4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d025      	beq.n	8001ea0 <HAL_GPIO_Init+0x1ec>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a51      	ldr	r2, [pc, #324]	; (8001f9c <HAL_GPIO_Init+0x2e8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d01f      	beq.n	8001e9c <HAL_GPIO_Init+0x1e8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a50      	ldr	r2, [pc, #320]	; (8001fa0 <HAL_GPIO_Init+0x2ec>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d019      	beq.n	8001e98 <HAL_GPIO_Init+0x1e4>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a4f      	ldr	r2, [pc, #316]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d013      	beq.n	8001e94 <HAL_GPIO_Init+0x1e0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a4e      	ldr	r2, [pc, #312]	; (8001fa8 <HAL_GPIO_Init+0x2f4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d00d      	beq.n	8001e90 <HAL_GPIO_Init+0x1dc>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a4d      	ldr	r2, [pc, #308]	; (8001fac <HAL_GPIO_Init+0x2f8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d007      	beq.n	8001e8c <HAL_GPIO_Init+0x1d8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a4c      	ldr	r2, [pc, #304]	; (8001fb0 <HAL_GPIO_Init+0x2fc>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d101      	bne.n	8001e88 <HAL_GPIO_Init+0x1d4>
 8001e84:	2306      	movs	r3, #6
 8001e86:	e00c      	b.n	8001ea2 <HAL_GPIO_Init+0x1ee>
 8001e88:	2307      	movs	r3, #7
 8001e8a:	e00a      	b.n	8001ea2 <HAL_GPIO_Init+0x1ee>
 8001e8c:	2305      	movs	r3, #5
 8001e8e:	e008      	b.n	8001ea2 <HAL_GPIO_Init+0x1ee>
 8001e90:	2304      	movs	r3, #4
 8001e92:	e006      	b.n	8001ea2 <HAL_GPIO_Init+0x1ee>
 8001e94:	2303      	movs	r3, #3
 8001e96:	e004      	b.n	8001ea2 <HAL_GPIO_Init+0x1ee>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e002      	b.n	8001ea2 <HAL_GPIO_Init+0x1ee>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <HAL_GPIO_Init+0x1ee>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	f002 0203 	and.w	r2, r2, #3
 8001ea8:	00d2      	lsls	r2, r2, #3
 8001eaa:	4093      	lsls	r3, r2
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001eb2:	4938      	ldr	r1, [pc, #224]	; (8001f94 <HAL_GPIO_Init+0x2e0>)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3318      	adds	r3, #24
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ec0:	4b34      	ldr	r3, [pc, #208]	; (8001f94 <HAL_GPIO_Init+0x2e0>)
 8001ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ee6:	4a2b      	ldr	r2, [pc, #172]	; (8001f94 <HAL_GPIO_Init+0x2e0>)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001eee:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <HAL_GPIO_Init+0x2e0>)
 8001ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f14:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <HAL_GPIO_Init+0x2e0>)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_GPIO_Init+0x2e0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <HAL_GPIO_Init+0x2e0>)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f46:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <HAL_GPIO_Init+0x2e0>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <HAL_GPIO_Init+0x2e0>)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	3301      	adds	r3, #1
 8001f74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f47f ae9f 	bne.w	8001cc4 <HAL_GPIO_Init+0x10>
  }
}
 8001f86:	bf00      	nop
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	4002f400 	.word	0x4002f400
 8001f98:	42020000 	.word	0x42020000
 8001f9c:	42020400 	.word	0x42020400
 8001fa0:	42020800 	.word	0x42020800
 8001fa4:	42020c00 	.word	0x42020c00
 8001fa8:	42021000 	.word	0x42021000
 8001fac:	42021400 	.word	0x42021400
 8001fb0:	42021800 	.word	0x42021800

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fd0:	e002      	b.n	8001fd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fd2:	887a      	ldrh	r2, [r7, #2]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	041a      	lsls	r2, r3, #16
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	43d9      	mvns	r1, r3
 8002002:	887b      	ldrh	r3, [r7, #2]
 8002004:	400b      	ands	r3, r1
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	619a      	str	r2, [r3, #24]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002022:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d006      	beq.n	800203c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800202e:	4a0c      	ldr	r2, [pc, #48]	; (8002060 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	4618      	mov	r0, r3
 8002038:	f000 f814 	bl	8002064 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if(__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002048:	4a05      	ldr	r2, [pc, #20]	; (8002060 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fcd3 	bl	80009fc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	4002f400 	.word	0x4002f400

08002064 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	e007      	b.n	80020aa <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 0204 	bic.w	r2, r3, #4
 80020a2:	4905      	ldr	r1, [pc, #20]	; (80020b8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	40030400 	.word	0x40030400

080020bc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_ICACHE_Enable+0x1c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <HAL_ICACHE_Enable+0x1c>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	40030400 	.word	0x40030400

080020dc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40007000 	.word	0x40007000

080020f8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002100:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002108:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800210a:	f000 f871 	bl	80021f0 <HAL_PWREx_SMPS_GetEffectiveMode>
 800210e:	4603      	mov	r3, r0
 8002110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002114:	d101      	bne.n	800211a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e03e      	b.n	8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800211a:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002126:	d101      	bne.n	800212c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e035      	b.n	8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	d101      	bne.n	8002138 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	e02f      	b.n	8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002140:	4917      	ldr	r1, [pc, #92]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002148:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	095b      	lsrs	r3, r3, #5
 800214e:	4a16      	ldr	r2, [pc, #88]	; (80021a8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002150:	fba2 2303 	umull	r2, r3, r2, r3
 8002154:	09db      	lsrs	r3, r3, #7
 8002156:	2232      	movs	r2, #50	; 0x32
 8002158:	fb02 f303 	mul.w	r3, r2, r3
 800215c:	4a13      	ldr	r2, [pc, #76]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	08db      	lsrs	r3, r3, #3
 8002164:	3301      	adds	r3, #1
 8002166:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002168:	e002      	b.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	3b01      	subs	r3, #1
 800216e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217c:	d102      	bne.n	8002184 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f2      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002190:	d101      	bne.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e000      	b.n	8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40007000 	.word	0x40007000
 80021a4:	20000074 	.word	0x20000074
 80021a8:	0a7c5ac5 	.word	0x0a7c5ac5
 80021ac:	cccccccd 	.word	0xcccccccd

080021b0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4a04      	ldr	r2, [pc, #16]	; (80021cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80021ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021be:	6053      	str	r3, [r2, #4]
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40007000 	.word	0x40007000

080021d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021de:	6093      	str	r3, [r2, #8]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40007000 	.word	0x40007000

080021f0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	e00a      	b.n	8002224 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d103      	bne.n	8002220 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002218:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	e001      	b.n	8002224 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002220:	2300      	movs	r3, #0
 8002222:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002224:	687b      	ldr	r3, [r7, #4]
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40007000 	.word	0x40007000

08002238 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d102      	bne.n	800224c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	f000 bc52 	b.w	8002af0 <HAL_RCC_OscConfig+0x8b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800224c:	4ba3      	ldr	r3, [pc, #652]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002256:	4ba1      	ldr	r3, [pc, #644]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80da 	beq.w	8002422 <HAL_RCC_OscConfig+0x1ea>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d006      	beq.n	8002282 <HAL_RCC_OscConfig+0x4a>
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2b0c      	cmp	r3, #12
 8002278:	f040 8081 	bne.w	800237e <HAL_RCC_OscConfig+0x146>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d17d      	bne.n	800237e <HAL_RCC_OscConfig+0x146>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002282:	4b96      	ldr	r3, [pc, #600]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d006      	beq.n	800229c <HAL_RCC_OscConfig+0x64>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d102      	bne.n	800229c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	f000 bc2a 	b.w	8002af0 <HAL_RCC_OscConfig+0x8b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022a0:	4b8e      	ldr	r3, [pc, #568]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d004      	beq.n	80022b6 <HAL_RCC_OscConfig+0x7e>
 80022ac:	4b8b      	ldr	r3, [pc, #556]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022b4:	e005      	b.n	80022c2 <HAL_RCC_OscConfig+0x8a>
 80022b6:	4b89      	ldr	r3, [pc, #548]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80022b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d224      	bcs.n	8002310 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fe0c 	bl	8002ee8 <RCC_SetFlashLatencyFromMSIRange>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	f000 bc0a 	b.w	8002af0 <HAL_RCC_OscConfig+0x8b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022dc:	4b7f      	ldr	r3, [pc, #508]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a7e      	ldr	r2, [pc, #504]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80022e2:	f043 0308 	orr.w	r3, r3, #8
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b7c      	ldr	r3, [pc, #496]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	4979      	ldr	r1, [pc, #484]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022fa:	4b78      	ldr	r3, [pc, #480]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	4974      	ldr	r1, [pc, #464]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
 800230e:	e025      	b.n	800235c <HAL_RCC_OscConfig+0x124>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002310:	4b72      	ldr	r3, [pc, #456]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a71      	ldr	r2, [pc, #452]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 8002316:	f043 0308 	orr.w	r3, r3, #8
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b6f      	ldr	r3, [pc, #444]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	496c      	ldr	r1, [pc, #432]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800232e:	4b6b      	ldr	r3, [pc, #428]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	4967      	ldr	r1, [pc, #412]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 800233e:	4313      	orrs	r3, r2
 8002340:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d109      	bne.n	800235c <HAL_RCC_OscConfig+0x124>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fdcb 	bl	8002ee8 <RCC_SetFlashLatencyFromMSIRange>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_RCC_OscConfig+0x124>
            {
              return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e3c9      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800235c:	f000 fd88 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002360:	4602      	mov	r2, r0
 8002362:	4b5f      	ldr	r3, [pc, #380]	; (80024e0 <HAL_RCC_OscConfig+0x2a8>)
 8002364:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002366:	4b5f      	ldr	r3, [pc, #380]	; (80024e4 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe ff88 	bl	8001280 <HAL_InitTick>
 8002370:	4603      	mov	r3, r0
 8002372:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d052      	beq.n	8002420 <HAL_RCC_OscConfig+0x1e8>
        {
          return status;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	e3b8      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d032      	beq.n	80023ec <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002386:	4b55      	ldr	r3, [pc, #340]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a54      	ldr	r2, [pc, #336]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002392:	f7fe ffc5 	bl	8001320 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x174>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800239a:	f7fe ffc1 	bl	8001320 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x174>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e3a1      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ac:	4b4b      	ldr	r3, [pc, #300]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x162>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023b8:	4b48      	ldr	r3, [pc, #288]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a47      	ldr	r2, [pc, #284]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80023be:	f043 0308 	orr.w	r3, r3, #8
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	4b45      	ldr	r3, [pc, #276]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	4942      	ldr	r1, [pc, #264]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023d6:	4b41      	ldr	r3, [pc, #260]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	493d      	ldr	r1, [pc, #244]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	604b      	str	r3, [r1, #4]
 80023ea:	e01a      	b.n	8002422 <HAL_RCC_OscConfig+0x1ea>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023ec:	4b3b      	ldr	r3, [pc, #236]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a3a      	ldr	r2, [pc, #232]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80023f2:	f023 0301 	bic.w	r3, r3, #1
 80023f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023f8:	f7fe ff92 	bl	8001320 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x1da>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002400:	f7fe ff8e 	bl	8001320 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e36e      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002412:	4b32      	ldr	r3, [pc, #200]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x1c8>
 800241e:	e000      	b.n	8002422 <HAL_RCC_OscConfig+0x1ea>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002420:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d071      	beq.n	8002512 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	2b08      	cmp	r3, #8
 8002432:	d005      	beq.n	8002440 <HAL_RCC_OscConfig+0x208>
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d10e      	bne.n	8002458 <HAL_RCC_OscConfig+0x220>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d10b      	bne.n	8002458 <HAL_RCC_OscConfig+0x220>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	4b26      	ldr	r3, [pc, #152]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d061      	beq.n	8002510 <HAL_RCC_OscConfig+0x2d8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d15d      	bne.n	8002510 <HAL_RCC_OscConfig+0x2d8>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e34b      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002460:	d106      	bne.n	8002470 <HAL_RCC_OscConfig+0x238>
 8002462:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e01d      	b.n	80024ac <HAL_RCC_OscConfig+0x274>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x25c>
 800247a:	4b18      	ldr	r3, [pc, #96]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a17      	ldr	r2, [pc, #92]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 8002480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b15      	ldr	r3, [pc, #84]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a14      	ldr	r2, [pc, #80]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e00b      	b.n	80024ac <HAL_RCC_OscConfig+0x274>
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a10      	ldr	r2, [pc, #64]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 800249a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80024a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d019      	beq.n	80024e8 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe ff34 	bl	8001320 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x296>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024bc:	f7fe ff30 	bl	8001320 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x296>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e310      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ce:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_RCC_OscConfig+0x2a4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x284>
 80024da:	e01a      	b.n	8002512 <HAL_RCC_OscConfig+0x2da>
 80024dc:	40021000 	.word	0x40021000
 80024e0:	20000074 	.word	0x20000074
 80024e4:	20000078 	.word	0x20000078
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe ff1a 	bl	8001320 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x2ca>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe ff16 	bl	8001320 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x2ca>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e2f6      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002502:	4ba6      	ldr	r3, [pc, #664]	; (800279c <HAL_RCC_OscConfig+0x564>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x2b8>
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x2da>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d060      	beq.n	80025e0 <HAL_RCC_OscConfig+0x3a8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d005      	beq.n	8002530 <HAL_RCC_OscConfig+0x2f8>
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	2b0c      	cmp	r3, #12
 8002528:	d119      	bne.n	800255e <HAL_RCC_OscConfig+0x326>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d116      	bne.n	800255e <HAL_RCC_OscConfig+0x326>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002530:	4b9a      	ldr	r3, [pc, #616]	; (800279c <HAL_RCC_OscConfig+0x564>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_OscConfig+0x310>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e2d3      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002548:	4b94      	ldr	r3, [pc, #592]	; (800279c <HAL_RCC_OscConfig+0x564>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	061b      	lsls	r3, r3, #24
 8002556:	4991      	ldr	r1, [pc, #580]	; (800279c <HAL_RCC_OscConfig+0x564>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800255c:	e040      	b.n	80025e0 <HAL_RCC_OscConfig+0x3a8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d023      	beq.n	80025ae <HAL_RCC_OscConfig+0x376>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002566:	4b8d      	ldr	r3, [pc, #564]	; (800279c <HAL_RCC_OscConfig+0x564>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a8c      	ldr	r2, [pc, #560]	; (800279c <HAL_RCC_OscConfig+0x564>)
 800256c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7fe fed5 	bl	8001320 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x354>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257a:	f7fe fed1 	bl	8001320 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e2b1      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800258c:	4b83      	ldr	r3, [pc, #524]	; (800279c <HAL_RCC_OscConfig+0x564>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x342>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002598:	4b80      	ldr	r3, [pc, #512]	; (800279c <HAL_RCC_OscConfig+0x564>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	061b      	lsls	r3, r3, #24
 80025a6:	497d      	ldr	r1, [pc, #500]	; (800279c <HAL_RCC_OscConfig+0x564>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
 80025ac:	e018      	b.n	80025e0 <HAL_RCC_OscConfig+0x3a8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ae:	4b7b      	ldr	r3, [pc, #492]	; (800279c <HAL_RCC_OscConfig+0x564>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a7a      	ldr	r2, [pc, #488]	; (800279c <HAL_RCC_OscConfig+0x564>)
 80025b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe feb1 	bl	8001320 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x39c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c2:	f7fe fead 	bl	8001320 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e28d      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025d4:	4b71      	ldr	r3, [pc, #452]	; (800279c <HAL_RCC_OscConfig+0x564>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d051      	beq.n	8002690 <HAL_RCC_OscConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d031      	beq.n	8002658 <HAL_RCC_OscConfig+0x420>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d108      	bne.n	800260e <HAL_RCC_OscConfig+0x3d6>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80025fc:	4b67      	ldr	r3, [pc, #412]	; (800279c <HAL_RCC_OscConfig+0x564>)
 80025fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002602:	4a66      	ldr	r2, [pc, #408]	; (800279c <HAL_RCC_OscConfig+0x564>)
 8002604:	f023 0310 	bic.w	r3, r3, #16
 8002608:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800260c:	e007      	b.n	800261e <HAL_RCC_OscConfig+0x3e6>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800260e:	4b63      	ldr	r3, [pc, #396]	; (800279c <HAL_RCC_OscConfig+0x564>)
 8002610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002614:	4a61      	ldr	r2, [pc, #388]	; (800279c <HAL_RCC_OscConfig+0x564>)
 8002616:	f043 0310 	orr.w	r3, r3, #16
 800261a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261e:	4b5f      	ldr	r3, [pc, #380]	; (800279c <HAL_RCC_OscConfig+0x564>)
 8002620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002624:	4a5d      	ldr	r2, [pc, #372]	; (800279c <HAL_RCC_OscConfig+0x564>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f7fe fe77 	bl	8001320 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002636:	f7fe fe73 	bl	8001320 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b07      	cmp	r3, #7
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e253      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002648:	4b54      	ldr	r3, [pc, #336]	; (800279c <HAL_RCC_OscConfig+0x564>)
 800264a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0ef      	beq.n	8002636 <HAL_RCC_OscConfig+0x3fe>
 8002656:	e01b      	b.n	8002690 <HAL_RCC_OscConfig+0x458>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002658:	4b50      	ldr	r3, [pc, #320]	; (800279c <HAL_RCC_OscConfig+0x564>)
 800265a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800265e:	4a4f      	ldr	r2, [pc, #316]	; (800279c <HAL_RCC_OscConfig+0x564>)
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fe fe5a 	bl	8001320 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x44a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002670:	f7fe fe56 	bl	8001320 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b07      	cmp	r3, #7
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e236      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002682:	4b46      	ldr	r3, [pc, #280]	; (800279c <HAL_RCC_OscConfig+0x564>)
 8002684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1ef      	bne.n	8002670 <HAL_RCC_OscConfig+0x438>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 8109 	beq.w	80028b0 <HAL_RCC_OscConfig+0x678>
  {
    FlagStatus       pwrclkchanged = RESET;
 800269e:	2300      	movs	r3, #0
 80026a0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026a2:	4b3e      	ldr	r3, [pc, #248]	; (800279c <HAL_RCC_OscConfig+0x564>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10d      	bne.n	80026ca <HAL_RCC_OscConfig+0x492>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ae:	4b3b      	ldr	r3, [pc, #236]	; (800279c <HAL_RCC_OscConfig+0x564>)
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	4a3a      	ldr	r2, [pc, #232]	; (800279c <HAL_RCC_OscConfig+0x564>)
 80026b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b8:	6593      	str	r3, [r2, #88]	; 0x58
 80026ba:	4b38      	ldr	r3, [pc, #224]	; (800279c <HAL_RCC_OscConfig+0x564>)
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c6:	2301      	movs	r3, #1
 80026c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ca:	4b35      	ldr	r3, [pc, #212]	; (80027a0 <HAL_RCC_OscConfig+0x568>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d118      	bne.n	8002708 <HAL_RCC_OscConfig+0x4d0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026d6:	4b32      	ldr	r3, [pc, #200]	; (80027a0 <HAL_RCC_OscConfig+0x568>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a31      	ldr	r2, [pc, #196]	; (80027a0 <HAL_RCC_OscConfig+0x568>)
 80026dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e2:	f7fe fe1d 	bl	8001320 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x4c4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ea:	f7fe fe19 	bl	8001320 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x4c4>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e1f9      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026fc:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <HAL_RCC_OscConfig+0x568>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01f      	beq.n	8002754 <HAL_RCC_OscConfig+0x51c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d010      	beq.n	8002742 <HAL_RCC_OscConfig+0x50a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002720:	4b1e      	ldr	r3, [pc, #120]	; (800279c <HAL_RCC_OscConfig+0x564>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	4a1d      	ldr	r2, [pc, #116]	; (800279c <HAL_RCC_OscConfig+0x564>)
 8002728:	f043 0304 	orr.w	r3, r3, #4
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002730:	4b1a      	ldr	r3, [pc, #104]	; (800279c <HAL_RCC_OscConfig+0x564>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	4a19      	ldr	r2, [pc, #100]	; (800279c <HAL_RCC_OscConfig+0x564>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002740:	e018      	b.n	8002774 <HAL_RCC_OscConfig+0x53c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002742:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_RCC_OscConfig+0x564>)
 8002744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002748:	4a14      	ldr	r2, [pc, #80]	; (800279c <HAL_RCC_OscConfig+0x564>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002752:	e00f      	b.n	8002774 <HAL_RCC_OscConfig+0x53c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <HAL_RCC_OscConfig+0x564>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	4a10      	ldr	r2, [pc, #64]	; (800279c <HAL_RCC_OscConfig+0x564>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <HAL_RCC_OscConfig+0x564>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276a:	4a0c      	ldr	r2, [pc, #48]	; (800279c <HAL_RCC_OscConfig+0x564>)
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d058      	beq.n	800282e <HAL_RCC_OscConfig+0x5f6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7fe fdd0 	bl	8001320 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002782:	e00f      	b.n	80027a4 <HAL_RCC_OscConfig+0x56c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002784:	f7fe fdcc 	bl	8001320 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d906      	bls.n	80027a4 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e1aa      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	40007000 	.word	0x40007000
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a4:	4bb0      	ldr	r3, [pc, #704]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0e8      	beq.n	8002784 <HAL_RCC_OscConfig+0x54c>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01b      	beq.n	80027f6 <HAL_RCC_OscConfig+0x5be>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80027be:	4baa      	ldr	r3, [pc, #680]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 80027c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c4:	4aa8      	ldr	r2, [pc, #672]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 80027c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_OscConfig+0x5ae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7fe fda6 	bl	8001320 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	; 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x5ae>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e184      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80027e6:	4ba0      	ldr	r3, [pc, #640]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0ed      	beq.n	80027d0 <HAL_RCC_OscConfig+0x598>
 80027f4:	e053      	b.n	800289e <HAL_RCC_OscConfig+0x666>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80027f6:	4b9c      	ldr	r3, [pc, #624]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fc:	4a9a      	ldr	r2, [pc, #616]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 80027fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x5e6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe fd8a 	bl	8001320 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e168      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800281e:	4b92      	ldr	r3, [pc, #584]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ed      	bne.n	8002808 <HAL_RCC_OscConfig+0x5d0>
 800282c:	e037      	b.n	800289e <HAL_RCC_OscConfig+0x666>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282e:	f7fe fd77 	bl	8001320 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002834:	e00a      	b.n	800284c <HAL_RCC_OscConfig+0x614>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fe fd73 	bl	8001320 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	; 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e151      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800284c:	4b86      	ldr	r3, [pc, #536]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1ed      	bne.n	8002836 <HAL_RCC_OscConfig+0x5fe>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800285a:	4b83      	ldr	r3, [pc, #524]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01a      	beq.n	800289e <HAL_RCC_OscConfig+0x666>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002868:	4b7f      	ldr	r3, [pc, #508]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	4a7e      	ldr	r2, [pc, #504]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 8002870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002878:	e00a      	b.n	8002890 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7fe fd51 	bl	8001320 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f241 3288 	movw	r2, #5000	; 0x1388
 8002888:	4293      	cmp	r3, r2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e12f      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002890:	4b75      	ldr	r3, [pc, #468]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1ed      	bne.n	800287a <HAL_RCC_OscConfig+0x642>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800289e:	7ffb      	ldrb	r3, [r7, #31]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d105      	bne.n	80028b0 <HAL_RCC_OscConfig+0x678>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a4:	4b70      	ldr	r3, [pc, #448]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	4a6f      	ldr	r2, [pc, #444]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 80028aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d03c      	beq.n	8002936 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01c      	beq.n	80028fe <HAL_RCC_OscConfig+0x6c6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028c4:	4b68      	ldr	r3, [pc, #416]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 80028c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028ca:	4a67      	ldr	r2, [pc, #412]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d4:	f7fe fd24 	bl	8001320 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x6b6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028dc:	f7fe fd20 	bl	8001320 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e100      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028ee:	4b5e      	ldr	r3, [pc, #376]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 80028f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0ef      	beq.n	80028dc <HAL_RCC_OscConfig+0x6a4>
 80028fc:	e01b      	b.n	8002936 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028fe:	4b5a      	ldr	r3, [pc, #360]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 8002900:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002904:	4a58      	ldr	r2, [pc, #352]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 8002906:	f023 0301 	bic.w	r3, r3, #1
 800290a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290e:	f7fe fd07 	bl	8001320 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x6f0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002916:	f7fe fd03 	bl	8001320 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e0e3      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002928:	4b4f      	ldr	r3, [pc, #316]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 800292a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1ef      	bne.n	8002916 <HAL_RCC_OscConfig+0x6de>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 80d7 	beq.w	8002aee <HAL_RCC_OscConfig+0x8b6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002940:	4b49      	ldr	r3, [pc, #292]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 030c 	and.w	r3, r3, #12
 8002948:	2b0c      	cmp	r3, #12
 800294a:	f000 8091 	beq.w	8002a70 <HAL_RCC_OscConfig+0x838>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002952:	2b02      	cmp	r3, #2
 8002954:	d15a      	bne.n	8002a0c <HAL_RCC_OscConfig+0x7d4>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002956:	4b44      	ldr	r3, [pc, #272]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a43      	ldr	r2, [pc, #268]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 800295c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002962:	f7fe fcdd 	bl	8001320 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x744>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296a:	f7fe fcd9 	bl	8001320 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x744>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e0b9      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800297c:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f0      	bne.n	800296a <HAL_RCC_OscConfig+0x732>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002988:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	4b37      	ldr	r3, [pc, #220]	; (8002a6c <HAL_RCC_OscConfig+0x834>)
 800298e:	4013      	ands	r3, r2
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002998:	3a01      	subs	r2, #1
 800299a:	0112      	lsls	r2, r2, #4
 800299c:	4311      	orrs	r1, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029a2:	0212      	lsls	r2, r2, #8
 80029a4:	4311      	orrs	r1, r2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029aa:	0852      	lsrs	r2, r2, #1
 80029ac:	3a01      	subs	r2, #1
 80029ae:	0552      	lsls	r2, r2, #21
 80029b0:	4311      	orrs	r1, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029b6:	0852      	lsrs	r2, r2, #1
 80029b8:	3a01      	subs	r2, #1
 80029ba:	0652      	lsls	r2, r2, #25
 80029bc:	4311      	orrs	r1, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029c2:	06d2      	lsls	r2, r2, #27
 80029c4:	430a      	orrs	r2, r1
 80029c6:	4928      	ldr	r1, [pc, #160]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029cc:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a25      	ldr	r2, [pc, #148]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 80029d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029d8:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4a22      	ldr	r2, [pc, #136]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 80029de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe fc9c 	bl	8001320 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x7c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ec:	f7fe fc98 	bl	8001320 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x7c6>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e078      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fe:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x7b4>
 8002a0a:	e070      	b.n	8002aee <HAL_RCC_OscConfig+0x8b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0c:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a15      	ldr	r2, [pc, #84]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 8002a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a16:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <HAL_RCC_OscConfig+0x7f8>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a24:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4a0f      	ldr	r2, [pc, #60]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 8002a2a:	f023 0303 	bic.w	r3, r3, #3
 8002a2e:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a30:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4a0c      	ldr	r2, [pc, #48]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 8002a36:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7fe fc6e 	bl	8001320 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x822>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a48:	f7fe fc6a 	bl	8001320 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x822>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e04a      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a5a:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <HAL_RCC_OscConfig+0x830>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x810>
 8002a66:	e042      	b.n	8002aee <HAL_RCC_OscConfig+0x8b6>
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	019f800c 	.word	0x019f800c
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_OscConfig+0x844>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e039      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <HAL_RCC_OscConfig+0x8c0>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f003 0203 	and.w	r2, r3, #3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d12c      	bne.n	8002aea <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d123      	bne.n	8002aea <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d11b      	bne.n	8002aea <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abc:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d113      	bne.n	8002aea <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	085b      	lsrs	r3, r3, #1
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d109      	bne.n	8002aea <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	085b      	lsrs	r3, r3, #1
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d001      	beq.n	8002aee <HAL_RCC_OscConfig+0x8b6>
        {
          return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <HAL_RCC_OscConfig+0x8b8>
        }
      }
    }
  }

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3720      	adds	r7, #32
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000

08002afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e104      	b.n	8002d1e <HAL_RCC_ClockConfig+0x222>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b14:	4b84      	ldr	r3, [pc, #528]	; (8002d28 <HAL_RCC_ClockConfig+0x22c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d910      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b81      	ldr	r3, [pc, #516]	; (8002d28 <HAL_RCC_ClockConfig+0x22c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 020f 	bic.w	r2, r3, #15
 8002b2a:	497f      	ldr	r1, [pc, #508]	; (8002d28 <HAL_RCC_ClockConfig+0x22c>)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b7d      	ldr	r3, [pc, #500]	; (8002d28 <HAL_RCC_ClockConfig+0x22c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0ec      	b.n	8002d1e <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 808b 	beq.w	8002c68 <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d134      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5a:	4b74      	ldr	r3, [pc, #464]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e0d9      	b.n	8002d1e <HAL_RCC_ClockConfig+0x222>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002b6a:	f000 fa21 	bl	8002fb0 <RCC_GetSysClockFreqFromPLLSource>
 8002b6e:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4a6f      	ldr	r2, [pc, #444]	; (8002d30 <HAL_RCC_ClockConfig+0x234>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d956      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002b78:	4b6c      	ldr	r3, [pc, #432]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b84:	4b69      	ldr	r3, [pc, #420]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b8c:	4a67      	ldr	r2, [pc, #412]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b92:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	e045      	b.n	8002c26 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d03f      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d13b      	bne.n	8002c26 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bae:	4b5f      	ldr	r3, [pc, #380]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bb6:	4a5d      	ldr	r2, [pc, #372]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	e030      	b.n	8002c26 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bcc:	4b57      	ldr	r3, [pc, #348]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d115      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0a0      	b.n	8002d1e <HAL_RCC_ClockConfig+0x222>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002be4:	4b51      	ldr	r3, [pc, #324]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d109      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e094      	b.n	8002d1e <HAL_RCC_ClockConfig+0x222>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf4:	4b4d      	ldr	r3, [pc, #308]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e08c      	b.n	8002d1e <HAL_RCC_ClockConfig+0x222>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002c04:	f000 f89a 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4a48      	ldr	r2, [pc, #288]	; (8002d30 <HAL_RCC_ClockConfig+0x234>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d909      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c12:	4b46      	ldr	r3, [pc, #280]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c1a:	4a44      	ldr	r2, [pc, #272]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c26:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f023 0203 	bic.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	493e      	ldr	r1, [pc, #248]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c38:	f7fe fb72 	bl	8001320 <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_ClockConfig+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c40:	f7fe fb6e 	bl	8001320 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x15a>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e063      	b.n	8002d1e <HAL_RCC_ClockConfig+0x222>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	4b35      	ldr	r3, [pc, #212]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 020c 	and.w	r2, r3, #12
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1eb      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d009      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c74:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	492a      	ldr	r1, [pc, #168]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_ClockConfig+0x19e>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2b80      	cmp	r3, #128	; 0x80
 8002c8c:	d105      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x19e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002c8e:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	4a26      	ldr	r2, [pc, #152]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002c94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c98:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9a:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <HAL_RCC_ClockConfig+0x22c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d210      	bcs.n	8002cca <HAL_RCC_ClockConfig+0x1ce>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca8:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <HAL_RCC_ClockConfig+0x22c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f023 020f 	bic.w	r2, r3, #15
 8002cb0:	491d      	ldr	r1, [pc, #116]	; (8002d28 <HAL_RCC_ClockConfig+0x22c>)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <HAL_RCC_ClockConfig+0x22c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_ClockConfig+0x1ce>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e029      	b.n	8002d1e <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d008      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd6:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	4912      	ldr	r1, [pc, #72]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d009      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x20c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cf4:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	490a      	ldr	r1, [pc, #40]	; (8002d2c <HAL_RCC_ClockConfig+0x230>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002d08:	f000 f8b2 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_RCC_ClockConfig+0x238>)
 8002d10:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <HAL_RCC_ClockConfig+0x23c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe fab2 	bl	8001280 <HAL_InitTick>
 8002d1c:	4603      	mov	r3, r0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40022000 	.word	0x40022000
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	04c4b400 	.word	0x04c4b400
 8002d34:	20000074 	.word	0x20000074
 8002d38:	20000078 	.word	0x20000078

08002d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b089      	sub	sp, #36	; 0x24
 8002d40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d4a:	4b46      	ldr	r3, [pc, #280]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x128>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d54:	4b43      	ldr	r3, [pc, #268]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x128>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x34>
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	2b0c      	cmp	r3, #12
 8002d68:	d121      	bne.n	8002dae <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d11e      	bne.n	8002dae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d70:	4b3c      	ldr	r3, [pc, #240]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x128>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d107      	bne.n	8002d8c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d7c:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x128>)
 8002d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	e005      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d8c:	4b35      	ldr	r3, [pc, #212]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x128>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002d98:	4a33      	ldr	r2, [pc, #204]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10d      	bne.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002dac:	e00a      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d102      	bne.n	8002dba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002db4:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x130>)
 8002db6:	61bb      	str	r3, [r7, #24]
 8002db8:	e004      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dc0:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x130>)
 8002dc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	2b0c      	cmp	r3, #12
 8002dc8:	d145      	bne.n	8002e56 <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002dca:	4b26      	ldr	r3, [pc, #152]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x128>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dd4:	4b23      	ldr	r3, [pc, #140]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x128>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	3301      	adds	r3, #1
 8002de0:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d002      	beq.n	8002dee <HAL_RCC_GetSysClockFreq+0xb2>
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d00d      	beq.n	8002e08 <HAL_RCC_GetSysClockFreq+0xcc>
 8002dec:	e019      	b.n	8002e22 <HAL_RCC_GetSysClockFreq+0xe6>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dee:	4a1f      	ldr	r2, [pc, #124]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x130>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	4a1b      	ldr	r2, [pc, #108]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x128>)
 8002df8:	68d2      	ldr	r2, [r2, #12]
 8002dfa:	0a12      	lsrs	r2, r2, #8
 8002dfc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e00:	fb02 f303 	mul.w	r3, r2, r3
 8002e04:	617b      	str	r3, [r7, #20]
        break;
 8002e06:	e019      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e08:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x130>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e10:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x128>)
 8002e12:	68d2      	ldr	r2, [r2, #12]
 8002e14:	0a12      	lsrs	r2, r2, #8
 8002e16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	617b      	str	r3, [r7, #20]
        break;
 8002e20:	e00c      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2a:	4a0e      	ldr	r2, [pc, #56]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x128>)
 8002e2c:	68d2      	ldr	r2, [r2, #12]
 8002e2e:	0a12      	lsrs	r2, r2, #8
 8002e30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e34:	fb02 f303 	mul.w	r3, r2, r3
 8002e38:	617b      	str	r3, [r7, #20]
        break;
 8002e3a:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x128>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	0e5b      	lsrs	r3, r3, #25
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	3301      	adds	r3, #1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e56:	69bb      	ldr	r3, [r7, #24]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3724      	adds	r7, #36	; 0x24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40021000 	.word	0x40021000
 8002e68:	08006778 	.word	0x08006778
 8002e6c:	00f42400 	.word	0x00f42400

08002e70 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8002e74:	f7ff ff62 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 8002e78:	4601      	mov	r1, r0
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_RCC_GetHCLKFreq+0x20>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	4a03      	ldr	r2, [pc, #12]	; (8002e94 <HAL_RCC_GetHCLKFreq+0x24>)
 8002e86:	5cd3      	ldrb	r3, [r2, r3]
 8002e88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	08006760 	.word	0x08006760

08002e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e9c:	f7ff ffe8 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002ea0:	4601      	mov	r1, r0
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	4a03      	ldr	r2, [pc, #12]	; (8002ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eae:	5cd3      	ldrb	r3, [r2, r3]
 8002eb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	08006770 	.word	0x08006770

08002ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ec4:	f7ff ffd4 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002ec8:	4601      	mov	r1, r0
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	0adb      	lsrs	r3, r3, #11
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	4a03      	ldr	r2, [pc, #12]	; (8002ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ed6:	5cd3      	ldrb	r3, [r2, r3]
 8002ed8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	08006770 	.word	0x08006770

08002ee8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ef4:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f00:	f7ff f8ec 	bl	80020dc <HAL_PWREx_GetVoltageRange>
 8002f04:	6138      	str	r0, [r7, #16]
 8002f06:	e014      	b.n	8002f32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f08:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0c:	4a26      	ldr	r2, [pc, #152]	; (8002fa8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f12:	6593      	str	r3, [r2, #88]	; 0x58
 8002f14:	4b24      	ldr	r3, [pc, #144]	; (8002fa8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f20:	f7ff f8dc 	bl	80020dc <HAL_PWREx_GetVoltageRange>
 8002f24:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f26:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	4a1f      	ldr	r2, [pc, #124]	; (8002fa8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f3e:	d10b      	bne.n	8002f58 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b80      	cmp	r3, #128	; 0x80
 8002f44:	d919      	bls.n	8002f7a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2ba0      	cmp	r3, #160	; 0xa0
 8002f4a:	d902      	bls.n	8002f52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002f50:	e013      	b.n	8002f7a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f52:	2301      	movs	r3, #1
 8002f54:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002f56:	e010      	b.n	8002f7a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b80      	cmp	r3, #128	; 0x80
 8002f5c:	d902      	bls.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f5e:	2303      	movs	r3, #3
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e00a      	b.n	8002f7a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b80      	cmp	r3, #128	; 0x80
 8002f68:	d102      	bne.n	8002f70 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	e004      	b.n	8002f7a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b70      	cmp	r3, #112	; 0x70
 8002f74:	d101      	bne.n	8002f7a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f76:	2301      	movs	r3, #1
 8002f78:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 020f 	bic.w	r2, r3, #15
 8002f82:	490a      	ldr	r1, [pc, #40]	; (8002fac <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d001      	beq.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	40022000 	.word	0x40022000

08002fb0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002fba:	4b36      	ldr	r3, [pc, #216]	; (8003094 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d118      	bne.n	8002ff8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fc6:	4b33      	ldr	r3, [pc, #204]	; (8003094 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d107      	bne.n	8002fe2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fd2:	4b30      	ldr	r3, [pc, #192]	; (8003094 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	e005      	b.n	8002fee <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fe2:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002fee:	4a2a      	ldr	r2, [pc, #168]	; (8003098 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ff8:	4b26      	ldr	r3, [pc, #152]	; (8003094 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003002:	4b24      	ldr	r3, [pc, #144]	; (8003094 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	3301      	adds	r3, #1
 800300e:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d002      	beq.n	800301c <RCC_GetSysClockFreqFromPLLSource+0x6c>
 8003016:	2b03      	cmp	r3, #3
 8003018:	d00d      	beq.n	8003036 <RCC_GetSysClockFreqFromPLLSource+0x86>
 800301a:	e019      	b.n	8003050 <RCC_GetSysClockFreqFromPLLSource+0xa0>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800301c:	4a1f      	ldr	r2, [pc, #124]	; (800309c <RCC_GetSysClockFreqFromPLLSource+0xec>)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	fbb2 f3f3 	udiv	r3, r2, r3
 8003024:	4a1b      	ldr	r2, [pc, #108]	; (8003094 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003026:	68d2      	ldr	r2, [r2, #12]
 8003028:	0a12      	lsrs	r2, r2, #8
 800302a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	613b      	str	r3, [r7, #16]
      break;
 8003034:	e019      	b.n	800306a <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003036:	4a19      	ldr	r2, [pc, #100]	; (800309c <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	fbb2 f3f3 	udiv	r3, r2, r3
 800303e:	4a15      	ldr	r2, [pc, #84]	; (8003094 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003040:	68d2      	ldr	r2, [r2, #12]
 8003042:	0a12      	lsrs	r2, r2, #8
 8003044:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003048:	fb02 f303 	mul.w	r3, r2, r3
 800304c:	613b      	str	r3, [r7, #16]
      break;
 800304e:	e00c      	b.n	800306a <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	fbb2 f3f3 	udiv	r3, r2, r3
 8003058:	4a0e      	ldr	r2, [pc, #56]	; (8003094 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800305a:	68d2      	ldr	r2, [r2, #12]
 800305c:	0a12      	lsrs	r2, r2, #8
 800305e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003062:	fb02 f303 	mul.w	r3, r2, r3
 8003066:	613b      	str	r3, [r7, #16]
      break;
 8003068:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800306a:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	0e5b      	lsrs	r3, r3, #25
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	3301      	adds	r3, #1
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003082:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003084:	683b      	ldr	r3, [r7, #0]
}
 8003086:	4618      	mov	r0, r3
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	08006778 	.word	0x08006778
 800309c:	00f42400 	.word	0x00f42400

080030a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030a8:	2300      	movs	r3, #0
 80030aa:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030ac:	2300      	movs	r3, #0
 80030ae:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d03d      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d00b      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d804      	bhi.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00e      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d015      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80030d0:	e01d      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80030d2:	2b60      	cmp	r3, #96	; 0x60
 80030d4:	d01e      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030d6:	2b80      	cmp	r3, #128	; 0x80
 80030d8:	d01c      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030da:	e018      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030dc:	4b84      	ldr	r3, [pc, #528]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4a83      	ldr	r2, [pc, #524]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e6:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80030e8:	e015      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x76>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2100      	movs	r1, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fb3f 	bl	8003774 <RCCEx_PLLSAI1_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80030fa:	e00c      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x76>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3320      	adds	r3, #32
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fc08 	bl	8003918 <RCCEx_PLLSAI2_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800310c:	e003      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x76>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	77fb      	strb	r3, [r7, #31]
        break;
 8003112:	e000      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x76>
        break;
 8003114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003116:	7ffb      	ldrb	r3, [r7, #31]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10b      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800311c:	4b74      	ldr	r3, [pc, #464]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800311e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003122:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800312a:	4971      	ldr	r1, [pc, #452]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003132:	e001      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003134:	7ffb      	ldrb	r3, [r7, #31]
 8003136:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d042      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800314c:	d00f      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xce>
 800314e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003152:	d805      	bhi.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d011      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800315c:	d017      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xee>
 800315e:	e01f      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003160:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003164:	d01f      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800316a:	d01c      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800316c:	e018      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800316e:	4b60      	ldr	r3, [pc, #384]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	4a5f      	ldr	r2, [pc, #380]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003178:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800317a:	e015      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x108>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3304      	adds	r3, #4
 8003180:	2100      	movs	r1, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f000 faf6 	bl	8003774 <RCCEx_PLLSAI1_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800318c:	e00c      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x108>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3320      	adds	r3, #32
 8003192:	2100      	movs	r1, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fbbf 	bl	8003918 <RCCEx_PLLSAI2_Config>
 800319a:	4603      	mov	r3, r0
 800319c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800319e:	e003      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	77fb      	strb	r3, [r7, #31]
        break;
 80031a4:	e000      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        break;
 80031a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a8:	7ffb      	ldrb	r3, [r7, #31]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10b      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031ae:	4b50      	ldr	r3, [pc, #320]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	494c      	ldr	r1, [pc, #304]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80031c4:	e001      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c6:	7ffb      	ldrb	r3, [r7, #31]
 80031c8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 809b 	beq.w	800330e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d8:	2300      	movs	r3, #0
 80031da:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031dc:	4b44      	ldr	r3, [pc, #272]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10d      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e8:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	4a40      	ldr	r2, [pc, #256]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f2:	6593      	str	r3, [r2, #88]	; 0x58
 80031f4:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003200:	2301      	movs	r3, #1
 8003202:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003204:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a3a      	ldr	r2, [pc, #232]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800320a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003210:	f7fe f886 	bl	8001320 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003216:	e009      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003218:	f7fe f882 	bl	8001320 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d902      	bls.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      {
        ret = HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	77fb      	strb	r3, [r7, #31]
        break;
 800322a:	e005      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x198>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800322c:	4b31      	ldr	r3, [pc, #196]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0ef      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x178>
      }
    }

    if (ret == HAL_OK)
 8003238:	7ffb      	ldrb	r3, [r7, #31]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d15c      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800323e:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003248:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01f      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	429a      	cmp	r2, r3
 800325a:	d019      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800325c:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003266:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003268:	4b21      	ldr	r3, [pc, #132]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326e:	4a20      	ldr	r2, [pc, #128]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003278:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327e:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003288:	4a19      	ldr	r2, [pc, #100]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d016      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fe f841 	bl	8001320 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a0:	e00b      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7fe f83d 	bl	8001320 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d902      	bls.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
          {
            ret = HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	77fb      	strb	r3, [r7, #31]
            break;
 80032b8:	e006      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ba:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80032bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0ec      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x202>
          }
        }
      }

      if (ret == HAL_OK)
 80032c8:	7ffb      	ldrb	r3, [r7, #31]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ce:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80032d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	4904      	ldr	r1, [pc, #16]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032e6:	e009      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x25c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032e8:	7ffb      	ldrb	r3, [r7, #31]
 80032ea:	77bb      	strb	r3, [r7, #30]
 80032ec:	e006      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x25c>
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f8:	7ffb      	ldrb	r3, [r7, #31]
 80032fa:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d105      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003302:	4bae      	ldr	r3, [pc, #696]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003306:	4aad      	ldr	r2, [pc, #692]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800331a:	4ba8      	ldr	r3, [pc, #672]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003320:	f023 0203 	bic.w	r2, r3, #3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003328:	49a4      	ldr	r1, [pc, #656]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800333c:	4b9f      	ldr	r3, [pc, #636]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003342:	f023 020c 	bic.w	r2, r3, #12
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	499c      	ldr	r1, [pc, #624]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800335e:	4b97      	ldr	r3, [pc, #604]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003364:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336c:	4993      	ldr	r1, [pc, #588]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003380:	4b8e      	ldr	r3, [pc, #568]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	498b      	ldr	r1, [pc, #556]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x318>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033a2:	4b86      	ldr	r3, [pc, #536]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b0:	4982      	ldr	r1, [pc, #520]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x33a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033c4:	4b7d      	ldr	r3, [pc, #500]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d2:	497a      	ldr	r1, [pc, #488]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033e6:	4b75      	ldr	r3, [pc, #468]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f4:	4971      	ldr	r1, [pc, #452]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003408:	4b6c      	ldr	r3, [pc, #432]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003416:	4969      	ldr	r1, [pc, #420]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800342a:	4b64      	ldr	r3, [pc, #400]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003430:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003438:	4960      	ldr	r1, [pc, #384]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d02f      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003454:	d005      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8003456:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800345a:	d009      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800345c:	2b00      	cmp	r3, #0
 800345e:	d013      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003460:	e00f      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003462:	4b56      	ldr	r3, [pc, #344]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	4a55      	ldr	r2, [pc, #340]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800346c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800346e:	e00c      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	2100      	movs	r1, #0
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f97c 	bl	8003774 <RCCEx_PLLSAI1_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003480:	e003      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      default:
        ret = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	77fb      	strb	r3, [r7, #31]
        break;
 8003486:	e000      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        break;
 8003488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800348a:	7ffb      	ldrb	r3, [r7, #31]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10b      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003490:	4b4a      	ldr	r3, [pc, #296]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800349e:	4947      	ldr	r1, [pc, #284]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034a6:	e001      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x40c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a8:	7ffb      	ldrb	r3, [r7, #31]
 80034aa:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034b8:	4b40      	ldr	r3, [pc, #256]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c6:	493d      	ldr	r1, [pc, #244]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034da:	4b38      	ldr	r3, [pc, #224]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e8:	4934      	ldr	r1, [pc, #208]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034fc:	4b2f      	ldr	r3, [pc, #188]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003502:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350a:	492c      	ldr	r1, [pc, #176]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800351e:	4b27      	ldr	r3, [pc, #156]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003520:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003524:	f023 0203 	bic.w	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352c:	4923      	ldr	r1, [pc, #140]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d028      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003540:	4b1e      	ldr	r3, [pc, #120]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003546:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354e:	491b      	ldr	r1, [pc, #108]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800355e:	d106      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003560:	4b16      	ldr	r3, [pc, #88]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	4a15      	ldr	r2, [pc, #84]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800356a:	60d3      	str	r3, [r2, #12]
 800356c:	e011      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003572:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003576:	d10c      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3304      	adds	r3, #4
 800357c:	2101      	movs	r1, #1
 800357e:	4618      	mov	r0, r3
 8003580:	f000 f8f8 	bl	8003774 <RCCEx_PLLSAI1_Config>
 8003584:	4603      	mov	r3, r0
 8003586:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003588:	7ffb      	ldrb	r3, [r7, #31]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        {
          /* set overall return value */
          status = ret;
 800358e:	7ffb      	ldrb	r3, [r7, #31]
 8003590:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d04d      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035a6:	d10b      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80035a8:	4b04      	ldr	r3, [pc, #16]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80035aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035ae:	4a03      	ldr	r2, [pc, #12]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80035b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80035b8:	e015      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x546>
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000
 80035c0:	4b6b      	ldr	r3, [pc, #428]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ce:	4968      	ldr	r1, [pc, #416]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035d6:	4b66      	ldr	r3, [pc, #408]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80035d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035dc:	4a64      	ldr	r2, [pc, #400]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80035de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035ee:	d10d      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3304      	adds	r3, #4
 80035f4:	2101      	movs	r1, #1
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 f8bc 	bl	8003774 <RCCEx_PLLSAI1_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003600:	7ffb      	ldrb	r3, [r7, #31]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d019      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x59a>
      {
        /* set overall return value */
        status = ret;
 8003606:	7ffb      	ldrb	r3, [r7, #31]
 8003608:	77bb      	strb	r3, [r7, #30]
 800360a:	e016      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x59a>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003614:	d106      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x584>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003616:	4b56      	ldr	r3, [pc, #344]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	4a55      	ldr	r2, [pc, #340]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 800361c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003620:	60d3      	str	r3, [r2, #12]
 8003622:	e00a      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x59a>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800362c:	d105      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x59a>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800362e:	4b50      	ldr	r3, [pc, #320]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	4a4f      	ldr	r2, [pc, #316]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003638:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d028      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003646:	4b4a      	ldr	r3, [pc, #296]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003654:	4946      	ldr	r1, [pc, #280]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003664:	d106      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003666:	4b42      	ldr	r3, [pc, #264]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	4a41      	ldr	r2, [pc, #260]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 800366c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003670:	60d3      	str	r3, [r2, #12]
 8003672:	e011      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800367c:	d10c      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3304      	adds	r3, #4
 8003682:	2101      	movs	r1, #1
 8003684:	4618      	mov	r0, r3
 8003686:	f000 f875 	bl	8003774 <RCCEx_PLLSAI1_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800368e:	7ffb      	ldrb	r3, [r7, #31]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        /* set overall return value */
        status = ret;
 8003694:	7ffb      	ldrb	r3, [r7, #31]
 8003696:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01e      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036a4:	4b32      	ldr	r3, [pc, #200]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036b4:	492e      	ldr	r1, [pc, #184]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036c6:	d10c      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	2102      	movs	r1, #2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f850 	bl	8003774 <RCCEx_PLLSAI1_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80036d8:	7ffb      	ldrb	r3, [r7, #31]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* set overall return value */
        status = ret;
 80036de:	7ffb      	ldrb	r3, [r7, #31]
 80036e0:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x666>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036ee:	4b20      	ldr	r3, [pc, #128]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80036f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036f4:	f023 0204 	bic.w	r2, r3, #4
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036fe:	491c      	ldr	r1, [pc, #112]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00b      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003712:	4b17      	ldr	r3, [pc, #92]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003714:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003718:	f023 0218 	bic.w	r2, r3, #24
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003722:	4913      	ldr	r1, [pc, #76]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d017      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003738:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800373c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003746:	490a      	ldr	r1, [pc, #40]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003754:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003758:	d105      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800375a:	4b05      	ldr	r3, [pc, #20]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	4a04      	ldr	r2, [pc, #16]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003764:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003766:	7fbb      	ldrb	r3, [r7, #30]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3720      	adds	r7, #32
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000

08003774 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d00c      	beq.n	80037a4 <RCCEx_PLLSAI1_Config+0x30>
 800378a:	2b03      	cmp	r3, #3
 800378c:	d013      	beq.n	80037b6 <RCCEx_PLLSAI1_Config+0x42>
 800378e:	2b01      	cmp	r3, #1
 8003790:	d11a      	bne.n	80037c8 <RCCEx_PLLSAI1_Config+0x54>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003792:	4b5d      	ldr	r3, [pc, #372]	; (8003908 <RCCEx_PLLSAI1_Config+0x194>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d117      	bne.n	80037ce <RCCEx_PLLSAI1_Config+0x5a>
      {
        status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a2:	e014      	b.n	80037ce <RCCEx_PLLSAI1_Config+0x5a>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037a4:	4b58      	ldr	r3, [pc, #352]	; (8003908 <RCCEx_PLLSAI1_Config+0x194>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d110      	bne.n	80037d2 <RCCEx_PLLSAI1_Config+0x5e>
      {
        status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b4:	e00d      	b.n	80037d2 <RCCEx_PLLSAI1_Config+0x5e>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80037b6:	4b54      	ldr	r3, [pc, #336]	; (8003908 <RCCEx_PLLSAI1_Config+0x194>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <RCCEx_PLLSAI1_Config+0x62>
      {
        status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c6:	e006      	b.n	80037d6 <RCCEx_PLLSAI1_Config+0x62>
    default:
      status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
      break;
 80037cc:	e004      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0x64>
      break;
 80037ce:	bf00      	nop
 80037d0:	e002      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0x64>
      break;
 80037d2:	bf00      	nop
 80037d4:	e000      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0x64>
      break;
 80037d6:	bf00      	nop
  }

  if (status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f040 808f 	bne.w	80038fe <RCCEx_PLLSAI1_Config+0x18a>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037e0:	4b49      	ldr	r3, [pc, #292]	; (8003908 <RCCEx_PLLSAI1_Config+0x194>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a48      	ldr	r2, [pc, #288]	; (8003908 <RCCEx_PLLSAI1_Config+0x194>)
 80037e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ec:	f7fd fd98 	bl	8001320 <HAL_GetTick>
 80037f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037f2:	e009      	b.n	8003808 <RCCEx_PLLSAI1_Config+0x94>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037f4:	f7fd fd94 	bl	8001320 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d902      	bls.n	8003808 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	73fb      	strb	r3, [r7, #15]
        break;
 8003806:	e005      	b.n	8003814 <RCCEx_PLLSAI1_Config+0xa0>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003808:	4b3f      	ldr	r3, [pc, #252]	; (8003908 <RCCEx_PLLSAI1_Config+0x194>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1ef      	bne.n	80037f4 <RCCEx_PLLSAI1_Config+0x80>
      }
    }

    if (status == HAL_OK)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d171      	bne.n	80038fe <RCCEx_PLLSAI1_Config+0x18a>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d116      	bne.n	800384e <RCCEx_PLLSAI1_Config+0xda>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003820:	4b39      	ldr	r3, [pc, #228]	; (8003908 <RCCEx_PLLSAI1_Config+0x194>)
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	4b39      	ldr	r3, [pc, #228]	; (800390c <RCCEx_PLLSAI1_Config+0x198>)
 8003826:	4013      	ands	r3, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6892      	ldr	r2, [r2, #8]
 800382c:	0211      	lsls	r1, r2, #8
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68d2      	ldr	r2, [r2, #12]
 8003832:	06d2      	lsls	r2, r2, #27
 8003834:	4311      	orrs	r1, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6852      	ldr	r2, [r2, #4]
 800383a:	3a01      	subs	r2, #1
 800383c:	0112      	lsls	r2, r2, #4
 800383e:	4311      	orrs	r1, r2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	4930      	ldr	r1, [pc, #192]	; (8003908 <RCCEx_PLLSAI1_Config+0x194>)
 8003848:	4313      	orrs	r3, r2
 800384a:	610b      	str	r3, [r1, #16]
 800384c:	e033      	b.n	80038b6 <RCCEx_PLLSAI1_Config+0x142>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d118      	bne.n	8003886 <RCCEx_PLLSAI1_Config+0x112>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003854:	4b2c      	ldr	r3, [pc, #176]	; (8003908 <RCCEx_PLLSAI1_Config+0x194>)
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	4b2d      	ldr	r3, [pc, #180]	; (8003910 <RCCEx_PLLSAI1_Config+0x19c>)
 800385a:	4013      	ands	r3, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6892      	ldr	r2, [r2, #8]
 8003860:	0211      	lsls	r1, r2, #8
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6912      	ldr	r2, [r2, #16]
 8003866:	0852      	lsrs	r2, r2, #1
 8003868:	3a01      	subs	r2, #1
 800386a:	0552      	lsls	r2, r2, #21
 800386c:	4311      	orrs	r1, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6852      	ldr	r2, [r2, #4]
 8003872:	3a01      	subs	r2, #1
 8003874:	0112      	lsls	r2, r2, #4
 8003876:	4311      	orrs	r1, r2
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	4922      	ldr	r1, [pc, #136]	; (8003908 <RCCEx_PLLSAI1_Config+0x194>)
 8003880:	4313      	orrs	r3, r2
 8003882:	610b      	str	r3, [r1, #16]
 8003884:	e017      	b.n	80038b6 <RCCEx_PLLSAI1_Config+0x142>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003886:	4b20      	ldr	r3, [pc, #128]	; (8003908 <RCCEx_PLLSAI1_Config+0x194>)
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	4b22      	ldr	r3, [pc, #136]	; (8003914 <RCCEx_PLLSAI1_Config+0x1a0>)
 800388c:	4013      	ands	r3, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6892      	ldr	r2, [r2, #8]
 8003892:	0211      	lsls	r1, r2, #8
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6952      	ldr	r2, [r2, #20]
 8003898:	0852      	lsrs	r2, r2, #1
 800389a:	3a01      	subs	r2, #1
 800389c:	0652      	lsls	r2, r2, #25
 800389e:	4311      	orrs	r1, r2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6852      	ldr	r2, [r2, #4]
 80038a4:	3a01      	subs	r2, #1
 80038a6:	0112      	lsls	r2, r2, #4
 80038a8:	4311      	orrs	r1, r2
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	4915      	ldr	r1, [pc, #84]	; (8003908 <RCCEx_PLLSAI1_Config+0x194>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038b6:	4b14      	ldr	r3, [pc, #80]	; (8003908 <RCCEx_PLLSAI1_Config+0x194>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a13      	ldr	r2, [pc, #76]	; (8003908 <RCCEx_PLLSAI1_Config+0x194>)
 80038bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c2:	f7fd fd2d 	bl	8001320 <HAL_GetTick>
 80038c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038c8:	e009      	b.n	80038de <RCCEx_PLLSAI1_Config+0x16a>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ca:	f7fd fd29 	bl	8001320 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d902      	bls.n	80038de <RCCEx_PLLSAI1_Config+0x16a>
        {
          status = HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	73fb      	strb	r3, [r7, #15]
          break;
 80038dc:	e005      	b.n	80038ea <RCCEx_PLLSAI1_Config+0x176>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038de:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <RCCEx_PLLSAI1_Config+0x194>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0ef      	beq.n	80038ca <RCCEx_PLLSAI1_Config+0x156>
        }
      }

      if (status == HAL_OK)
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d106      	bne.n	80038fe <RCCEx_PLLSAI1_Config+0x18a>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <RCCEx_PLLSAI1_Config+0x194>)
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	4903      	ldr	r1, [pc, #12]	; (8003908 <RCCEx_PLLSAI1_Config+0x194>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000
 800390c:	07ff800c 	.word	0x07ff800c
 8003910:	ff9f800c 	.word	0xff9f800c
 8003914:	f9ff800c 	.word	0xf9ff800c

08003918 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d00c      	beq.n	8003948 <RCCEx_PLLSAI2_Config+0x30>
 800392e:	2b03      	cmp	r3, #3
 8003930:	d013      	beq.n	800395a <RCCEx_PLLSAI2_Config+0x42>
 8003932:	2b01      	cmp	r3, #1
 8003934:	d11a      	bne.n	800396c <RCCEx_PLLSAI2_Config+0x54>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003936:	4b42      	ldr	r3, [pc, #264]	; (8003a40 <RCCEx_PLLSAI2_Config+0x128>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d117      	bne.n	8003972 <RCCEx_PLLSAI2_Config+0x5a>
      {
        status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003946:	e014      	b.n	8003972 <RCCEx_PLLSAI2_Config+0x5a>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003948:	4b3d      	ldr	r3, [pc, #244]	; (8003a40 <RCCEx_PLLSAI2_Config+0x128>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003950:	2b00      	cmp	r3, #0
 8003952:	d110      	bne.n	8003976 <RCCEx_PLLSAI2_Config+0x5e>
      {
        status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003958:	e00d      	b.n	8003976 <RCCEx_PLLSAI2_Config+0x5e>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800395a:	4b39      	ldr	r3, [pc, #228]	; (8003a40 <RCCEx_PLLSAI2_Config+0x128>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <RCCEx_PLLSAI2_Config+0x62>
      {
        status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800396a:	e006      	b.n	800397a <RCCEx_PLLSAI2_Config+0x62>
    default:
      status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      break;
 8003970:	e004      	b.n	800397c <RCCEx_PLLSAI2_Config+0x64>
      break;
 8003972:	bf00      	nop
 8003974:	e002      	b.n	800397c <RCCEx_PLLSAI2_Config+0x64>
      break;
 8003976:	bf00      	nop
 8003978:	e000      	b.n	800397c <RCCEx_PLLSAI2_Config+0x64>
      break;
 800397a:	bf00      	nop
  }

  if (status == HAL_OK)
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d159      	bne.n	8003a36 <RCCEx_PLLSAI2_Config+0x11e>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003982:	4b2f      	ldr	r3, [pc, #188]	; (8003a40 <RCCEx_PLLSAI2_Config+0x128>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a2e      	ldr	r2, [pc, #184]	; (8003a40 <RCCEx_PLLSAI2_Config+0x128>)
 8003988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398e:	f7fd fcc7 	bl	8001320 <HAL_GetTick>
 8003992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003994:	e009      	b.n	80039aa <RCCEx_PLLSAI2_Config+0x92>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003996:	f7fd fcc3 	bl	8001320 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d902      	bls.n	80039aa <RCCEx_PLLSAI2_Config+0x92>
      {
        status = HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	73fb      	strb	r3, [r7, #15]
        break;
 80039a8:	e005      	b.n	80039b6 <RCCEx_PLLSAI2_Config+0x9e>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039aa:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <RCCEx_PLLSAI2_Config+0x128>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1ef      	bne.n	8003996 <RCCEx_PLLSAI2_Config+0x7e>
      }
    }

    if (status == HAL_OK)
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d13c      	bne.n	8003a36 <RCCEx_PLLSAI2_Config+0x11e>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d115      	bne.n	80039ee <RCCEx_PLLSAI2_Config+0xd6>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039c2:	4b1f      	ldr	r3, [pc, #124]	; (8003a40 <RCCEx_PLLSAI2_Config+0x128>)
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <RCCEx_PLLSAI2_Config+0x12c>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6892      	ldr	r2, [r2, #8]
 80039ce:	0211      	lsls	r1, r2, #8
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	68d2      	ldr	r2, [r2, #12]
 80039d4:	06d2      	lsls	r2, r2, #27
 80039d6:	4311      	orrs	r1, r2
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6852      	ldr	r2, [r2, #4]
 80039dc:	3a01      	subs	r2, #1
 80039de:	0112      	lsls	r2, r2, #4
 80039e0:	4311      	orrs	r1, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	4915      	ldr	r1, [pc, #84]	; (8003a40 <RCCEx_PLLSAI2_Config+0x128>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039ee:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <RCCEx_PLLSAI2_Config+0x128>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <RCCEx_PLLSAI2_Config+0x128>)
 80039f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fa:	f7fd fc91 	bl	8001320 <HAL_GetTick>
 80039fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a00:	e009      	b.n	8003a16 <RCCEx_PLLSAI2_Config+0xfe>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a02:	f7fd fc8d 	bl	8001320 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d902      	bls.n	8003a16 <RCCEx_PLLSAI2_Config+0xfe>
        {
          status = HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	73fb      	strb	r3, [r7, #15]
          break;
 8003a14:	e005      	b.n	8003a22 <RCCEx_PLLSAI2_Config+0x10a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a16:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <RCCEx_PLLSAI2_Config+0x128>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0ef      	beq.n	8003a02 <RCCEx_PLLSAI2_Config+0xea>
        }
      }

      if (status == HAL_OK)
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d106      	bne.n	8003a36 <RCCEx_PLLSAI2_Config+0x11e>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <RCCEx_PLLSAI2_Config+0x128>)
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	4903      	ldr	r1, [pc, #12]	; (8003a40 <RCCEx_PLLSAI2_Config+0x128>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40021000 	.word	0x40021000
 8003a44:	07ff800c 	.word	0x07ff800c

08003a48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e042      	b.n	8003ae0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d106      	bne.n	8003a72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7fd f9b5 	bl	8000ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2224      	movs	r2, #36	; 0x24
 8003a76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0201 	bic.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fb1e 	bl	80040cc <UART_SetConfig>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e022      	b.n	8003ae0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fde8 	bl	8004678 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ab6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ac6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fe6f 	bl	80047bc <UART_CheckIdleState>
 8003ade:	4603      	mov	r3, r0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	; 0x28
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	f040 8083 	bne.w	8003c0a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_UART_Transmit+0x28>
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e07b      	b.n	8003c0c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_UART_Transmit+0x3a>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e074      	b.n	8003c0c <HAL_UART_Transmit+0x124>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2221      	movs	r2, #33	; 0x21
 8003b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b3a:	f7fd fbf1 	bl	8001320 <HAL_GetTick>
 8003b3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	88fa      	ldrh	r2, [r7, #6]
 8003b4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b58:	d108      	bne.n	8003b6c <HAL_UART_Transmit+0x84>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d104      	bne.n	8003b6c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	e003      	b.n	8003b74 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003b7c:	e02c      	b.n	8003bd8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2200      	movs	r2, #0
 8003b86:	2180      	movs	r1, #128	; 0x80
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 fe62 	bl	8004852 <UART_WaitOnFlagUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e039      	b.n	8003c0c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10b      	bne.n	8003bb6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	e007      	b.n	8003bc6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	781a      	ldrb	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1cc      	bne.n	8003b7e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2200      	movs	r2, #0
 8003bec:	2140      	movs	r1, #64	; 0x40
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 fe2f 	bl	8004852 <UART_WaitOnFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e006      	b.n	8003c0c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	e000      	b.n	8003c0c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003c0a:	2302      	movs	r3, #2
  }
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3720      	adds	r7, #32
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d118      	bne.n	8003c76 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d013      	beq.n	8003c76 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d104      	bne.n	8003c62 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 81fc 	beq.w	8004064 <HAL_UART_IRQHandler+0x450>
      {
        huart->RxISR(huart);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	4798      	blx	r3
      }
      return;
 8003c74:	e1f6      	b.n	8004064 <HAL_UART_IRQHandler+0x450>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80ef 	beq.w	8003e5c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4b73      	ldr	r3, [pc, #460]	; (8003e50 <HAL_UART_IRQHandler+0x23c>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4b72      	ldr	r3, [pc, #456]	; (8003e54 <HAL_UART_IRQHandler+0x240>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80e4 	beq.w	8003e5c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d010      	beq.n	8003cc0 <HAL_UART_IRQHandler+0xac>
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00b      	beq.n	8003cc0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2201      	movs	r2, #1
 8003cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb6:	f043 0201 	orr.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d010      	beq.n	8003cec <HAL_UART_IRQHandler+0xd8>
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00b      	beq.n	8003cec <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ce2:	f043 0204 	orr.w	r2, r3, #4
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d010      	beq.n	8003d18 <HAL_UART_IRQHandler+0x104>
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00b      	beq.n	8003d18 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2204      	movs	r2, #4
 8003d06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d0e:	f043 0202 	orr.w	r2, r3, #2
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d015      	beq.n	8003d4e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d104      	bne.n	8003d36 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4b48      	ldr	r3, [pc, #288]	; (8003e50 <HAL_UART_IRQHandler+0x23c>)
 8003d30:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2208      	movs	r2, #8
 8003d3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d44:	f043 0208 	orr.w	r2, r3, #8
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d011      	beq.n	8003d7c <HAL_UART_IRQHandler+0x168>
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00c      	beq.n	8003d7c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d72:	f043 0220 	orr.w	r2, r3, #32
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8170 	beq.w	8004068 <HAL_UART_IRQHandler+0x454>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d011      	beq.n	8003db6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d104      	bne.n	8003da6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d007      	beq.n	8003db6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dbc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc8:	2b40      	cmp	r3, #64	; 0x40
 8003dca:	d004      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d031      	beq.n	8003e3a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fe48 	bl	8004a6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de6:	2b40      	cmp	r3, #64	; 0x40
 8003de8:	d123      	bne.n	8003e32 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d013      	beq.n	8003e2a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e06:	4a14      	ldr	r2, [pc, #80]	; (8003e58 <HAL_UART_IRQHandler+0x244>)
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd fd21 	bl	8001856 <HAL_DMA_Abort_IT>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d017      	beq.n	8003e4a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003e24:	4610      	mov	r0, r2
 8003e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	e00f      	b.n	8003e4a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f944 	bl	80040b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	e00b      	b.n	8003e4a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f940 	bl	80040b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	e007      	b.n	8003e4a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f93c 	bl	80040b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003e48:	e10e      	b.n	8004068 <HAL_UART_IRQHandler+0x454>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4a:	bf00      	nop
    return;
 8003e4c:	e10c      	b.n	8004068 <HAL_UART_IRQHandler+0x454>
 8003e4e:	bf00      	nop
 8003e50:	10000001 	.word	0x10000001
 8003e54:	04000120 	.word	0x04000120
 8003e58:	08004c23 	.word	0x08004c23

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	f040 80ab 	bne.w	8003fbc <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80a5 	beq.w	8003fbc <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 809f 	beq.w	8003fbc <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2210      	movs	r2, #16
 8003e84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	d155      	bne.n	8003f40 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003e9e:	893b      	ldrh	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 80e3 	beq.w	800406c <HAL_UART_IRQHandler+0x458>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003eac:	893a      	ldrh	r2, [r7, #8]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	f080 80dc 	bcs.w	800406c <HAL_UART_IRQHandler+0x458>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	893a      	ldrh	r2, [r7, #8]
 8003eb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d12b      	bne.n	8003f24 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eda:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0201 	bic.w	r2, r2, #1
 8003eea:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003efa:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0210 	bic.w	r2, r2, #16
 8003f18:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fd fc3d 	bl	800179e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	4619      	mov	r1, r3
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7fc fdd9 	bl	8000af0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f3e:	e095      	b.n	800406c <HAL_UART_IRQHandler+0x458>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 8088 	beq.w	8004070 <HAL_UART_IRQHandler+0x45c>
          &&(nb_rx_data > 0U) )
 8003f60:	897b      	ldrh	r3, [r7, #10]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 8084 	beq.w	8004070 <HAL_UART_IRQHandler+0x45c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f76:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6812      	ldr	r2, [r2, #0]
 8003f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0210 	bic.w	r2, r2, #16
 8003fae:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fb0:	897b      	ldrh	r3, [r7, #10]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7fc fd9b 	bl	8000af0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003fba:	e059      	b.n	8004070 <HAL_UART_IRQHandler+0x45c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00d      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x3ce>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fe51 	bl	8004c82 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fe0:	e049      	b.n	8004076 <HAL_UART_IRQHandler+0x462>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d012      	beq.n	8004012 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d104      	bne.n	8004000 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004004:	2b00      	cmp	r3, #0
 8004006:	d035      	beq.n	8004074 <HAL_UART_IRQHandler+0x460>
    {
      huart->TxISR(huart);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	4798      	blx	r3
    }
    return;
 8004010:	e030      	b.n	8004074 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_UART_IRQHandler+0x41a>
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fe11 	bl	8004c4e <UART_EndTransmit_IT>
    return;
 800402c:	e023      	b.n	8004076 <HAL_UART_IRQHandler+0x462>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d008      	beq.n	800404a <HAL_UART_IRQHandler+0x436>
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fe31 	bl	8004caa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004048:	e015      	b.n	8004076 <HAL_UART_IRQHandler+0x462>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d010      	beq.n	8004076 <HAL_UART_IRQHandler+0x462>
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	da0d      	bge.n	8004076 <HAL_UART_IRQHandler+0x462>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fe1b 	bl	8004c96 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004060:	bf00      	nop
 8004062:	e008      	b.n	8004076 <HAL_UART_IRQHandler+0x462>
      return;
 8004064:	bf00      	nop
 8004066:	e006      	b.n	8004076 <HAL_UART_IRQHandler+0x462>
    return;
 8004068:	bf00      	nop
 800406a:	e004      	b.n	8004076 <HAL_UART_IRQHandler+0x462>
      return;
 800406c:	bf00      	nop
 800406e:	e002      	b.n	8004076 <HAL_UART_IRQHandler+0x462>
      return;
 8004070:	bf00      	nop
 8004072:	e000      	b.n	8004076 <HAL_UART_IRQHandler+0x462>
    return;
 8004074:	bf00      	nop
  }
}
 8004076:	3720      	adds	r7, #32
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040cc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80040d0:	b088      	sub	sp, #32
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f6:	69fa      	ldr	r2, [r7, #28]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4bb1      	ldr	r3, [pc, #708]	; (80043c8 <UART_SetConfig+0x2fc>)
 8004104:	4013      	ands	r3, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6812      	ldr	r2, [r2, #0]
 800410a:	69f9      	ldr	r1, [r7, #28]
 800410c:	430b      	orrs	r3, r1
 800410e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4aa6      	ldr	r2, [pc, #664]	; (80043cc <UART_SetConfig+0x300>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	4313      	orrs	r3, r2
 800413e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800414a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	69f9      	ldr	r1, [r7, #28]
 8004154:	430b      	orrs	r3, r1
 8004156:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	f023 010f 	bic.w	r1, r3, #15
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a97      	ldr	r2, [pc, #604]	; (80043d0 <UART_SetConfig+0x304>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d121      	bne.n	80041bc <UART_SetConfig+0xf0>
 8004178:	4b96      	ldr	r3, [pc, #600]	; (80043d4 <UART_SetConfig+0x308>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	2b03      	cmp	r3, #3
 8004184:	d816      	bhi.n	80041b4 <UART_SetConfig+0xe8>
 8004186:	a201      	add	r2, pc, #4	; (adr r2, 800418c <UART_SetConfig+0xc0>)
 8004188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418c:	0800419d 	.word	0x0800419d
 8004190:	080041a9 	.word	0x080041a9
 8004194:	080041a3 	.word	0x080041a3
 8004198:	080041af 	.word	0x080041af
 800419c:	2301      	movs	r3, #1
 800419e:	76fb      	strb	r3, [r7, #27]
 80041a0:	e0e8      	b.n	8004374 <UART_SetConfig+0x2a8>
 80041a2:	2302      	movs	r3, #2
 80041a4:	76fb      	strb	r3, [r7, #27]
 80041a6:	e0e5      	b.n	8004374 <UART_SetConfig+0x2a8>
 80041a8:	2304      	movs	r3, #4
 80041aa:	76fb      	strb	r3, [r7, #27]
 80041ac:	e0e2      	b.n	8004374 <UART_SetConfig+0x2a8>
 80041ae:	2308      	movs	r3, #8
 80041b0:	76fb      	strb	r3, [r7, #27]
 80041b2:	e0df      	b.n	8004374 <UART_SetConfig+0x2a8>
 80041b4:	2310      	movs	r3, #16
 80041b6:	76fb      	strb	r3, [r7, #27]
 80041b8:	bf00      	nop
 80041ba:	e0db      	b.n	8004374 <UART_SetConfig+0x2a8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a85      	ldr	r2, [pc, #532]	; (80043d8 <UART_SetConfig+0x30c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d134      	bne.n	8004230 <UART_SetConfig+0x164>
 80041c6:	4b83      	ldr	r3, [pc, #524]	; (80043d4 <UART_SetConfig+0x308>)
 80041c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b0c      	cmp	r3, #12
 80041d2:	d829      	bhi.n	8004228 <UART_SetConfig+0x15c>
 80041d4:	a201      	add	r2, pc, #4	; (adr r2, 80041dc <UART_SetConfig+0x110>)
 80041d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041da:	bf00      	nop
 80041dc:	08004211 	.word	0x08004211
 80041e0:	08004229 	.word	0x08004229
 80041e4:	08004229 	.word	0x08004229
 80041e8:	08004229 	.word	0x08004229
 80041ec:	0800421d 	.word	0x0800421d
 80041f0:	08004229 	.word	0x08004229
 80041f4:	08004229 	.word	0x08004229
 80041f8:	08004229 	.word	0x08004229
 80041fc:	08004217 	.word	0x08004217
 8004200:	08004229 	.word	0x08004229
 8004204:	08004229 	.word	0x08004229
 8004208:	08004229 	.word	0x08004229
 800420c:	08004223 	.word	0x08004223
 8004210:	2300      	movs	r3, #0
 8004212:	76fb      	strb	r3, [r7, #27]
 8004214:	e0ae      	b.n	8004374 <UART_SetConfig+0x2a8>
 8004216:	2302      	movs	r3, #2
 8004218:	76fb      	strb	r3, [r7, #27]
 800421a:	e0ab      	b.n	8004374 <UART_SetConfig+0x2a8>
 800421c:	2304      	movs	r3, #4
 800421e:	76fb      	strb	r3, [r7, #27]
 8004220:	e0a8      	b.n	8004374 <UART_SetConfig+0x2a8>
 8004222:	2308      	movs	r3, #8
 8004224:	76fb      	strb	r3, [r7, #27]
 8004226:	e0a5      	b.n	8004374 <UART_SetConfig+0x2a8>
 8004228:	2310      	movs	r3, #16
 800422a:	76fb      	strb	r3, [r7, #27]
 800422c:	bf00      	nop
 800422e:	e0a1      	b.n	8004374 <UART_SetConfig+0x2a8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a69      	ldr	r2, [pc, #420]	; (80043dc <UART_SetConfig+0x310>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d120      	bne.n	800427c <UART_SetConfig+0x1b0>
 800423a:	4b66      	ldr	r3, [pc, #408]	; (80043d4 <UART_SetConfig+0x308>)
 800423c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004240:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004244:	2b10      	cmp	r3, #16
 8004246:	d00f      	beq.n	8004268 <UART_SetConfig+0x19c>
 8004248:	2b10      	cmp	r3, #16
 800424a:	d802      	bhi.n	8004252 <UART_SetConfig+0x186>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <UART_SetConfig+0x190>
 8004250:	e010      	b.n	8004274 <UART_SetConfig+0x1a8>
 8004252:	2b20      	cmp	r3, #32
 8004254:	d005      	beq.n	8004262 <UART_SetConfig+0x196>
 8004256:	2b30      	cmp	r3, #48	; 0x30
 8004258:	d009      	beq.n	800426e <UART_SetConfig+0x1a2>
 800425a:	e00b      	b.n	8004274 <UART_SetConfig+0x1a8>
 800425c:	2300      	movs	r3, #0
 800425e:	76fb      	strb	r3, [r7, #27]
 8004260:	e088      	b.n	8004374 <UART_SetConfig+0x2a8>
 8004262:	2302      	movs	r3, #2
 8004264:	76fb      	strb	r3, [r7, #27]
 8004266:	e085      	b.n	8004374 <UART_SetConfig+0x2a8>
 8004268:	2304      	movs	r3, #4
 800426a:	76fb      	strb	r3, [r7, #27]
 800426c:	e082      	b.n	8004374 <UART_SetConfig+0x2a8>
 800426e:	2308      	movs	r3, #8
 8004270:	76fb      	strb	r3, [r7, #27]
 8004272:	e07f      	b.n	8004374 <UART_SetConfig+0x2a8>
 8004274:	2310      	movs	r3, #16
 8004276:	76fb      	strb	r3, [r7, #27]
 8004278:	bf00      	nop
 800427a:	e07b      	b.n	8004374 <UART_SetConfig+0x2a8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a57      	ldr	r2, [pc, #348]	; (80043e0 <UART_SetConfig+0x314>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d120      	bne.n	80042c8 <UART_SetConfig+0x1fc>
 8004286:	4b53      	ldr	r3, [pc, #332]	; (80043d4 <UART_SetConfig+0x308>)
 8004288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d00f      	beq.n	80042b4 <UART_SetConfig+0x1e8>
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	d802      	bhi.n	800429e <UART_SetConfig+0x1d2>
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <UART_SetConfig+0x1dc>
 800429c:	e010      	b.n	80042c0 <UART_SetConfig+0x1f4>
 800429e:	2b80      	cmp	r3, #128	; 0x80
 80042a0:	d005      	beq.n	80042ae <UART_SetConfig+0x1e2>
 80042a2:	2bc0      	cmp	r3, #192	; 0xc0
 80042a4:	d009      	beq.n	80042ba <UART_SetConfig+0x1ee>
 80042a6:	e00b      	b.n	80042c0 <UART_SetConfig+0x1f4>
 80042a8:	2300      	movs	r3, #0
 80042aa:	76fb      	strb	r3, [r7, #27]
 80042ac:	e062      	b.n	8004374 <UART_SetConfig+0x2a8>
 80042ae:	2302      	movs	r3, #2
 80042b0:	76fb      	strb	r3, [r7, #27]
 80042b2:	e05f      	b.n	8004374 <UART_SetConfig+0x2a8>
 80042b4:	2304      	movs	r3, #4
 80042b6:	76fb      	strb	r3, [r7, #27]
 80042b8:	e05c      	b.n	8004374 <UART_SetConfig+0x2a8>
 80042ba:	2308      	movs	r3, #8
 80042bc:	76fb      	strb	r3, [r7, #27]
 80042be:	e059      	b.n	8004374 <UART_SetConfig+0x2a8>
 80042c0:	2310      	movs	r3, #16
 80042c2:	76fb      	strb	r3, [r7, #27]
 80042c4:	bf00      	nop
 80042c6:	e055      	b.n	8004374 <UART_SetConfig+0x2a8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a45      	ldr	r2, [pc, #276]	; (80043e4 <UART_SetConfig+0x318>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d124      	bne.n	800431c <UART_SetConfig+0x250>
 80042d2:	4b40      	ldr	r3, [pc, #256]	; (80043d4 <UART_SetConfig+0x308>)
 80042d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e0:	d012      	beq.n	8004308 <UART_SetConfig+0x23c>
 80042e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e6:	d802      	bhi.n	80042ee <UART_SetConfig+0x222>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <UART_SetConfig+0x230>
 80042ec:	e012      	b.n	8004314 <UART_SetConfig+0x248>
 80042ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f2:	d006      	beq.n	8004302 <UART_SetConfig+0x236>
 80042f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f8:	d009      	beq.n	800430e <UART_SetConfig+0x242>
 80042fa:	e00b      	b.n	8004314 <UART_SetConfig+0x248>
 80042fc:	2300      	movs	r3, #0
 80042fe:	76fb      	strb	r3, [r7, #27]
 8004300:	e038      	b.n	8004374 <UART_SetConfig+0x2a8>
 8004302:	2302      	movs	r3, #2
 8004304:	76fb      	strb	r3, [r7, #27]
 8004306:	e035      	b.n	8004374 <UART_SetConfig+0x2a8>
 8004308:	2304      	movs	r3, #4
 800430a:	76fb      	strb	r3, [r7, #27]
 800430c:	e032      	b.n	8004374 <UART_SetConfig+0x2a8>
 800430e:	2308      	movs	r3, #8
 8004310:	76fb      	strb	r3, [r7, #27]
 8004312:	e02f      	b.n	8004374 <UART_SetConfig+0x2a8>
 8004314:	2310      	movs	r3, #16
 8004316:	76fb      	strb	r3, [r7, #27]
 8004318:	bf00      	nop
 800431a:	e02b      	b.n	8004374 <UART_SetConfig+0x2a8>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a2a      	ldr	r2, [pc, #168]	; (80043cc <UART_SetConfig+0x300>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d124      	bne.n	8004370 <UART_SetConfig+0x2a4>
 8004326:	4b2b      	ldr	r3, [pc, #172]	; (80043d4 <UART_SetConfig+0x308>)
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004334:	d012      	beq.n	800435c <UART_SetConfig+0x290>
 8004336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433a:	d802      	bhi.n	8004342 <UART_SetConfig+0x276>
 800433c:	2b00      	cmp	r3, #0
 800433e:	d007      	beq.n	8004350 <UART_SetConfig+0x284>
 8004340:	e012      	b.n	8004368 <UART_SetConfig+0x29c>
 8004342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004346:	d006      	beq.n	8004356 <UART_SetConfig+0x28a>
 8004348:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800434c:	d009      	beq.n	8004362 <UART_SetConfig+0x296>
 800434e:	e00b      	b.n	8004368 <UART_SetConfig+0x29c>
 8004350:	2300      	movs	r3, #0
 8004352:	76fb      	strb	r3, [r7, #27]
 8004354:	e00e      	b.n	8004374 <UART_SetConfig+0x2a8>
 8004356:	2302      	movs	r3, #2
 8004358:	76fb      	strb	r3, [r7, #27]
 800435a:	e00b      	b.n	8004374 <UART_SetConfig+0x2a8>
 800435c:	2304      	movs	r3, #4
 800435e:	76fb      	strb	r3, [r7, #27]
 8004360:	e008      	b.n	8004374 <UART_SetConfig+0x2a8>
 8004362:	2308      	movs	r3, #8
 8004364:	76fb      	strb	r3, [r7, #27]
 8004366:	e005      	b.n	8004374 <UART_SetConfig+0x2a8>
 8004368:	2310      	movs	r3, #16
 800436a:	76fb      	strb	r3, [r7, #27]
 800436c:	bf00      	nop
 800436e:	e001      	b.n	8004374 <UART_SetConfig+0x2a8>
 8004370:	2310      	movs	r3, #16
 8004372:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a14      	ldr	r2, [pc, #80]	; (80043cc <UART_SetConfig+0x300>)
 800437a:	4293      	cmp	r3, r2
 800437c:	f040 80a5 	bne.w	80044ca <UART_SetConfig+0x3fe>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004380:	7efb      	ldrb	r3, [r7, #27]
 8004382:	2b08      	cmp	r3, #8
 8004384:	d83a      	bhi.n	80043fc <UART_SetConfig+0x330>
 8004386:	a201      	add	r2, pc, #4	; (adr r2, 800438c <UART_SetConfig+0x2c0>)
 8004388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438c:	080043b1 	.word	0x080043b1
 8004390:	080043b9 	.word	0x080043b9
 8004394:	080043c1 	.word	0x080043c1
 8004398:	080043fd 	.word	0x080043fd
 800439c:	080043ed 	.word	0x080043ed
 80043a0:	080043fd 	.word	0x080043fd
 80043a4:	080043fd 	.word	0x080043fd
 80043a8:	080043fd 	.word	0x080043fd
 80043ac:	080043f5 	.word	0x080043f5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b0:	f7fe fd72 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 80043b4:	6178      	str	r0, [r7, #20]
        break;
 80043b6:	e026      	b.n	8004406 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b8:	f7fe fd82 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
 80043bc:	6178      	str	r0, [r7, #20]
        break;
 80043be:	e022      	b.n	8004406 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <UART_SetConfig+0x31c>)
 80043c2:	617b      	str	r3, [r7, #20]
        break;
 80043c4:	e01f      	b.n	8004406 <UART_SetConfig+0x33a>
 80043c6:	bf00      	nop
 80043c8:	cfff69f3 	.word	0xcfff69f3
 80043cc:	40008000 	.word	0x40008000
 80043d0:	40013800 	.word	0x40013800
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40004400 	.word	0x40004400
 80043dc:	40004800 	.word	0x40004800
 80043e0:	40004c00 	.word	0x40004c00
 80043e4:	40005000 	.word	0x40005000
 80043e8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ec:	f7fe fca6 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 80043f0:	6178      	str	r0, [r7, #20]
        break;
 80043f2:	e008      	b.n	8004406 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043f8:	617b      	str	r3, [r7, #20]
        break;
 80043fa:	e004      	b.n	8004406 <UART_SetConfig+0x33a>
      default:
        pclk = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	76bb      	strb	r3, [r7, #26]
        break;
 8004404:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 811d 	beq.w	8004648 <UART_SetConfig+0x57c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	4a97      	ldr	r2, [pc, #604]	; (8004670 <UART_SetConfig+0x5a4>)
 8004414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004418:	461a      	mov	r2, r3
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004420:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	4413      	add	r3, r2
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	429a      	cmp	r2, r3
 8004430:	d305      	bcc.n	800443e <UART_SetConfig+0x372>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	429a      	cmp	r2, r3
 800443c:	d902      	bls.n	8004444 <UART_SetConfig+0x378>
      {
        ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	76bb      	strb	r3, [r7, #26]
 8004442:	e101      	b.n	8004648 <UART_SetConfig+0x57c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	4618      	mov	r0, r3
 8004448:	f04f 0100 	mov.w	r1, #0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	4a87      	ldr	r2, [pc, #540]	; (8004670 <UART_SetConfig+0x5a4>)
 8004452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004456:	b29b      	uxth	r3, r3
 8004458:	f04f 0400 	mov.w	r4, #0
 800445c:	461a      	mov	r2, r3
 800445e:	4623      	mov	r3, r4
 8004460:	f7fb feea 	bl	8000238 <__aeabi_uldivmod>
 8004464:	4603      	mov	r3, r0
 8004466:	460c      	mov	r4, r1
 8004468:	4619      	mov	r1, r3
 800446a:	4622      	mov	r2, r4
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	f04f 0400 	mov.w	r4, #0
 8004474:	0214      	lsls	r4, r2, #8
 8004476:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800447a:	020b      	lsls	r3, r1, #8
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6852      	ldr	r2, [r2, #4]
 8004480:	0852      	lsrs	r2, r2, #1
 8004482:	4611      	mov	r1, r2
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	eb13 0b01 	adds.w	fp, r3, r1
 800448c:	eb44 0c02 	adc.w	ip, r4, r2
 8004490:	4658      	mov	r0, fp
 8004492:	4661      	mov	r1, ip
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f04f 0400 	mov.w	r4, #0
 800449c:	461a      	mov	r2, r3
 800449e:	4623      	mov	r3, r4
 80044a0:	f7fb feca 	bl	8000238 <__aeabi_uldivmod>
 80044a4:	4603      	mov	r3, r0
 80044a6:	460c      	mov	r4, r1
 80044a8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b0:	d308      	bcc.n	80044c4 <UART_SetConfig+0x3f8>
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b8:	d204      	bcs.n	80044c4 <UART_SetConfig+0x3f8>
        {
          huart->Instance->BRR = usartdiv;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	60da      	str	r2, [r3, #12]
 80044c2:	e0c1      	b.n	8004648 <UART_SetConfig+0x57c>
        }
        else
        {
          ret = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	76bb      	strb	r3, [r7, #26]
 80044c8:	e0be      	b.n	8004648 <UART_SetConfig+0x57c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d2:	d164      	bne.n	800459e <UART_SetConfig+0x4d2>
  {
    switch (clocksource)
 80044d4:	7efb      	ldrb	r3, [r7, #27]
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d827      	bhi.n	800452a <UART_SetConfig+0x45e>
 80044da:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0x414>)
 80044dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e0:	08004505 	.word	0x08004505
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004515 	.word	0x08004515
 80044ec:	0800452b 	.word	0x0800452b
 80044f0:	0800451b 	.word	0x0800451b
 80044f4:	0800452b 	.word	0x0800452b
 80044f8:	0800452b 	.word	0x0800452b
 80044fc:	0800452b 	.word	0x0800452b
 8004500:	08004523 	.word	0x08004523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004504:	f7fe fcc8 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 8004508:	6178      	str	r0, [r7, #20]
        break;
 800450a:	e013      	b.n	8004534 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800450c:	f7fe fcd8 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
 8004510:	6178      	str	r0, [r7, #20]
        break;
 8004512:	e00f      	b.n	8004534 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004514:	4b57      	ldr	r3, [pc, #348]	; (8004674 <UART_SetConfig+0x5a8>)
 8004516:	617b      	str	r3, [r7, #20]
        break;
 8004518:	e00c      	b.n	8004534 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800451a:	f7fe fc0f 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 800451e:	6178      	str	r0, [r7, #20]
        break;
 8004520:	e008      	b.n	8004534 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004526:	617b      	str	r3, [r7, #20]
        break;
 8004528:	e004      	b.n	8004534 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	76bb      	strb	r3, [r7, #26]
        break;
 8004532:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 8086 	beq.w	8004648 <UART_SetConfig+0x57c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	4a4b      	ldr	r2, [pc, #300]	; (8004670 <UART_SetConfig+0x5a4>)
 8004542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004546:	461a      	mov	r2, r3
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	fbb3 f3f2 	udiv	r3, r3, r2
 800454e:	005a      	lsls	r2, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	085b      	lsrs	r3, r3, #1
 8004556:	441a      	add	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004560:	b29b      	uxth	r3, r3
 8004562:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	2b0f      	cmp	r3, #15
 8004568:	d916      	bls.n	8004598 <UART_SetConfig+0x4cc>
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004570:	d212      	bcs.n	8004598 <UART_SetConfig+0x4cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	b29b      	uxth	r3, r3
 8004576:	f023 030f 	bic.w	r3, r3, #15
 800457a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	085b      	lsrs	r3, r3, #1
 8004580:	b29b      	uxth	r3, r3
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	b29a      	uxth	r2, r3
 8004588:	89fb      	ldrh	r3, [r7, #14]
 800458a:	4313      	orrs	r3, r2
 800458c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	89fa      	ldrh	r2, [r7, #14]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	e057      	b.n	8004648 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	76bb      	strb	r3, [r7, #26]
 800459c:	e054      	b.n	8004648 <UART_SetConfig+0x57c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800459e:	7efb      	ldrb	r3, [r7, #27]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d828      	bhi.n	80045f6 <UART_SetConfig+0x52a>
 80045a4:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <UART_SetConfig+0x4e0>)
 80045a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045aa:	bf00      	nop
 80045ac:	080045d1 	.word	0x080045d1
 80045b0:	080045d9 	.word	0x080045d9
 80045b4:	080045e1 	.word	0x080045e1
 80045b8:	080045f7 	.word	0x080045f7
 80045bc:	080045e7 	.word	0x080045e7
 80045c0:	080045f7 	.word	0x080045f7
 80045c4:	080045f7 	.word	0x080045f7
 80045c8:	080045f7 	.word	0x080045f7
 80045cc:	080045ef 	.word	0x080045ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d0:	f7fe fc62 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 80045d4:	6178      	str	r0, [r7, #20]
        break;
 80045d6:	e013      	b.n	8004600 <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045d8:	f7fe fc72 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
 80045dc:	6178      	str	r0, [r7, #20]
        break;
 80045de:	e00f      	b.n	8004600 <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e0:	4b24      	ldr	r3, [pc, #144]	; (8004674 <UART_SetConfig+0x5a8>)
 80045e2:	617b      	str	r3, [r7, #20]
        break;
 80045e4:	e00c      	b.n	8004600 <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045e6:	f7fe fba9 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 80045ea:	6178      	str	r0, [r7, #20]
        break;
 80045ec:	e008      	b.n	8004600 <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f2:	617b      	str	r3, [r7, #20]
        break;
 80045f4:	e004      	b.n	8004600 <UART_SetConfig+0x534>
      default:
        pclk = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	76bb      	strb	r3, [r7, #26]
        break;
 80045fe:	bf00      	nop
    }

    if (pclk != 0U)
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d020      	beq.n	8004648 <UART_SetConfig+0x57c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	4a19      	ldr	r2, [pc, #100]	; (8004670 <UART_SetConfig+0x5a4>)
 800460c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004610:	461a      	mov	r2, r3
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	fbb3 f2f2 	udiv	r2, r3, r2
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	085b      	lsrs	r3, r3, #1
 800461e:	441a      	add	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	b29b      	uxth	r3, r3
 800462a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b0f      	cmp	r3, #15
 8004630:	d908      	bls.n	8004644 <UART_SetConfig+0x578>
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004638:	d204      	bcs.n	8004644 <UART_SetConfig+0x578>
      {
        huart->Instance->BRR = usartdiv;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	60da      	str	r2, [r3, #12]
 8004642:	e001      	b.n	8004648 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004664:	7ebb      	ldrb	r3, [r7, #26]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3720      	adds	r7, #32
 800466a:	46bd      	mov	sp, r7
 800466c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004670:	080067b8 	.word	0x080067b8
 8004674:	00f42400 	.word	0x00f42400

08004678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01a      	beq.n	800478e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004776:	d10a      	bne.n	800478e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
  }
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047cc:	f7fc fda8 	bl	8001320 <HAL_GetTick>
 80047d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d10e      	bne.n	80047fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f82f 	bl	8004852 <UART_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e025      	b.n	800484a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b04      	cmp	r3, #4
 800480a:	d10e      	bne.n	800482a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800480c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f819 	bl	8004852 <UART_WaitOnFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e00f      	b.n	800484a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	603b      	str	r3, [r7, #0]
 800485e:	4613      	mov	r3, r2
 8004860:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004862:	e062      	b.n	800492a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486a:	d05e      	beq.n	800492a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486c:	f7fc fd58 	bl	8001320 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	429a      	cmp	r2, r3
 800487a:	d302      	bcc.n	8004882 <UART_WaitOnFlagUntilTimeout+0x30>
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d11d      	bne.n	80048be <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004890:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e045      	b.n	800494a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d02e      	beq.n	800492a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048da:	d126      	bne.n	800492a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0201 	bic.w	r2, r2, #1
 8004904:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2220      	movs	r2, #32
 8004912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2220      	movs	r2, #32
 800491a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e00f      	b.n	800494a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4013      	ands	r3, r2
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	429a      	cmp	r2, r3
 8004938:	bf0c      	ite	eq
 800493a:	2301      	moveq	r3, #1
 800493c:	2300      	movne	r3, #0
 800493e:	b2db      	uxtb	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	79fb      	ldrb	r3, [r7, #7]
 8004944:	429a      	cmp	r2, r3
 8004946:	d08d      	beq.n	8004864 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	4613      	mov	r3, r2
 8004960:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	88fa      	ldrh	r2, [r7, #6]
 800496c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2222      	movs	r2, #34	; 0x22
 800497c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004984:	2b00      	cmp	r3, #0
 8004986:	d02c      	beq.n	80049e2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800498c:	4a25      	ldr	r2, [pc, #148]	; (8004a24 <UART_Start_Receive_DMA+0xd0>)
 800498e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004994:	4a24      	ldr	r2, [pc, #144]	; (8004a28 <UART_Start_Receive_DMA+0xd4>)
 8004996:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800499c:	4a23      	ldr	r2, [pc, #140]	; (8004a2c <UART_Start_Receive_DMA+0xd8>)
 800499e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049a4:	2200      	movs	r2, #0
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3324      	adds	r3, #36	; 0x24
 80049b2:	4619      	mov	r1, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b8:	461a      	mov	r2, r3
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	f7fc fe74 	bl	80016a8 <HAL_DMA_Start_IT>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00d      	beq.n	80049e2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2210      	movs	r2, #16
 80049ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e01c      	b.n	8004a1c <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049f8:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f042 0201 	orr.w	r2, r2, #1
 8004a08:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a18:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	08004ad1 	.word	0x08004ad1
 8004a28:	08004b6b 	.word	0x08004b6b
 8004a2c:	08004ba3 	.word	0x08004ba3

08004a30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004a46:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004a56:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a82:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d107      	bne.n	8004ab0 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0210 	bic.w	r2, r2, #16
 8004aae:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004adc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d12b      	bne.n	8004b44 <UART_DMAReceiveCplt+0x74>
  {
    huart->RxXferCount = 0U;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b02:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b22:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d107      	bne.n	8004b44 <UART_DMAReceiveCplt+0x74>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0210 	bic.w	r2, r2, #16
 8004b42:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d107      	bne.n	8004b5c <UART_DMAReceiveCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b52:	4619      	mov	r1, r3
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f7fb ffcb 	bl	8000af0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b5a:	e002      	b.n	8004b62 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f7ff fa97 	bl	8004090 <HAL_UART_RxCpltCallback>
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d109      	bne.n	8004b94 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b86:	085b      	lsrs	r3, r3, #1
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f7fb ffaf 	bl	8000af0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b92:	e002      	b.n	8004b9a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f7ff fa85 	bl	80040a4 <HAL_UART_RxHalfCpltCallback>
}
 8004b9a:	bf00      	nop
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b086      	sub	sp, #24
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bca:	2b80      	cmp	r3, #128	; 0x80
 8004bcc:	d109      	bne.n	8004be2 <UART_DMAError+0x40>
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b21      	cmp	r3, #33	; 0x21
 8004bd2:	d106      	bne.n	8004be2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8004bdc:	6978      	ldr	r0, [r7, #20]
 8004bde:	f7ff ff27 	bl	8004a30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d109      	bne.n	8004c04 <UART_DMAError+0x62>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b22      	cmp	r3, #34	; 0x22
 8004bf4:	d106      	bne.n	8004c04 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8004bfe:	6978      	ldr	r0, [r7, #20]
 8004c00:	f7ff ff34 	bl	8004a6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c0a:	f043 0210 	orr.w	r2, r3, #16
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c14:	6978      	ldr	r0, [r7, #20]
 8004c16:	f7ff fa4f 	bl	80040b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c1a:	bf00      	nop
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f7ff fa39 	bl	80040b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c46:	bf00      	nop
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c64:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff fa01 	bl	800407c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c7a:	bf00      	nop
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b085      	sub	sp, #20
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e027      	b.n	8004d24 <HAL_UARTEx_DisableFifoMode+0x66>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2224      	movs	r2, #36	; 0x24
 8004ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0201 	bic.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e02d      	b.n	8004da4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2224      	movs	r2, #36	; 0x24
 8004d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0201 	bic.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f897 	bl	8004eb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e02d      	b.n	8004e20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2224      	movs	r2, #36	; 0x24
 8004dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0201 	bic.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f859 	bl	8004eb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	4613      	mov	r3, r2
 8004e34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d135      	bne.n	8004eac <HAL_UARTEx_ReceiveToIdle_DMA+0x84>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e02e      	b.n	8004eae <HAL_UARTEx_ReceiveToIdle_DMA+0x86>
    }

    __HAL_LOCK(huart);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e027      	b.n	8004eae <HAL_UARTEx_ReceiveToIdle_DMA+0x86>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004e6c:	88fb      	ldrh	r3, [r7, #6]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7ff fd6e 	bl	8004954 <UART_Start_Receive_DMA>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004e7c:	7dfb      	ldrb	r3, [r7, #23]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d112      	bne.n	8004ea8 <HAL_UARTEx_ReceiveToIdle_DMA+0x80>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d10c      	bne.n	8004ea4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7c>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2210      	movs	r2, #16
 8004e90:	621a      	str	r2, [r3, #32]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0210 	orr.w	r2, r2, #16
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	e001      	b.n	8004ea8 <HAL_UARTEx_ReceiveToIdle_DMA+0x80>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8004ea8:	7dfb      	ldrb	r3, [r7, #23]
 8004eaa:	e000      	b.n	8004eae <HAL_UARTEx_ReceiveToIdle_DMA+0x86>
  }
  else
  {
    return HAL_BUSY;
 8004eac:	2302      	movs	r3, #2
  }
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b089      	sub	sp, #36	; 0x24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004ec0:	4a2f      	ldr	r2, [pc, #188]	; (8004f80 <UARTEx_SetNbDataToProcess+0xc8>)
 8004ec2:	f107 0314 	add.w	r3, r7, #20
 8004ec6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004eca:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004ece:	4a2d      	ldr	r2, [pc, #180]	; (8004f84 <UARTEx_SetNbDataToProcess+0xcc>)
 8004ed0:	f107 030c 	add.w	r3, r7, #12
 8004ed4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ed8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d108      	bne.n	8004ef6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ef4:	e03d      	b.n	8004f72 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ef6:	2308      	movs	r3, #8
 8004ef8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004efa:	2308      	movs	r3, #8
 8004efc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	0e5b      	lsrs	r3, r3, #25
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	0f5b      	lsrs	r3, r3, #29
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004f1e:	7fbb      	ldrb	r3, [r7, #30]
 8004f20:	7f3a      	ldrb	r2, [r7, #28]
 8004f22:	f107 0120 	add.w	r1, r7, #32
 8004f26:	440a      	add	r2, r1
 8004f28:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004f2c:	fb02 f303 	mul.w	r3, r2, r3
 8004f30:	7f3a      	ldrb	r2, [r7, #28]
 8004f32:	f107 0120 	add.w	r1, r7, #32
 8004f36:	440a      	add	r2, r1
 8004f38:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004f3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004f48:	7ffb      	ldrb	r3, [r7, #31]
 8004f4a:	7f7a      	ldrb	r2, [r7, #29]
 8004f4c:	f107 0120 	add.w	r1, r7, #32
 8004f50:	440a      	add	r2, r1
 8004f52:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004f56:	fb02 f303 	mul.w	r3, r2, r3
 8004f5a:	7f7a      	ldrb	r2, [r7, #29]
 8004f5c:	f107 0120 	add.w	r1, r7, #32
 8004f60:	440a      	add	r2, r1
 8004f62:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004f66:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004f72:	bf00      	nop
 8004f74:	3724      	adds	r7, #36	; 0x24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	08006750 	.word	0x08006750
 8004f84:	08006758 	.word	0x08006758

08004f88 <aes_gen_tables>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 8004f88:	b480      	push	{r7}
 8004f8a:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
 8004f8e:	af00      	add	r7, sp, #0
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8004f90:	2300      	movs	r3, #0
 8004f92:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004f96:	2301      	movs	r3, #1
 8004f98:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8004f9c:	e026      	b.n	8004fec <aes_gen_tables+0x64>
    {
        pow[i] = x;
 8004f9e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8004fa2:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8004fa6:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8004faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        log[x] = i;
 8004fae:	463b      	mov	r3, r7
 8004fb0:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004fb4:	f8d7 180c 	ldr.w	r1, [r7, #2060]	; 0x80c
 8004fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 8004fbc:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8004fc6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004fca:	2a00      	cmp	r2, #0
 8004fcc:	d001      	beq.n	8004fd2 <aes_gen_tables+0x4a>
 8004fce:	221b      	movs	r2, #27
 8004fd0:	e000      	b.n	8004fd4 <aes_gen_tables+0x4c>
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	405a      	eors	r2, r3
 8004fd6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004fda:	4053      	eors	r3, r2
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    for( i = 0, x = 1; i < 256; i++ )
 8004fe2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004fec:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8004ff0:	2bff      	cmp	r3, #255	; 0xff
 8004ff2:	ddd4      	ble.n	8004f9e <aes_gen_tables+0x16>
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8005000:	e01b      	b.n	800503a <aes_gen_tables+0xb2>
    {
        RCON[i] = (uint32_t) x;
 8005002:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8005006:	49d9      	ldr	r1, [pc, #868]	; (800536c <aes_gen_tables+0x3e4>)
 8005008:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800500c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = XTIME( x ) & 0xFF;
 8005010:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 800501a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800501e:	2a00      	cmp	r2, #0
 8005020:	d001      	beq.n	8005026 <aes_gen_tables+0x9e>
 8005022:	221b      	movs	r2, #27
 8005024:	e000      	b.n	8005028 <aes_gen_tables+0xa0>
 8005026:	2200      	movs	r2, #0
 8005028:	4053      	eors	r3, r2
 800502a:	b2db      	uxtb	r3, r3
 800502c:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    for( i = 0, x = 1; i < 10; i++ )
 8005030:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005034:	3301      	adds	r3, #1
 8005036:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 800503a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800503e:	2b09      	cmp	r3, #9
 8005040:	dddf      	ble.n	8005002 <aes_gen_tables+0x7a>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8005042:	4bcb      	ldr	r3, [pc, #812]	; (8005370 <aes_gen_tables+0x3e8>)
 8005044:	2263      	movs	r2, #99	; 0x63
 8005046:	701a      	strb	r2, [r3, #0]
    RSb[0x63] = 0x00;
 8005048:	4bca      	ldr	r3, [pc, #808]	; (8005374 <aes_gen_tables+0x3ec>)
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 8005050:	2301      	movs	r3, #1
 8005052:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8005056:	e06d      	b.n	8005134 <aes_gen_tables+0x1ac>
    {
        x = pow[255 - log[i]];
 8005058:	463b      	mov	r3, r7
 800505a:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 800505e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005062:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8005066:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800506a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800506e:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8005072:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005076:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 800507a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800507e:	005a      	lsls	r2, r3, #1
 8005080:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005084:	11db      	asrs	r3, r3, #7
 8005086:	4313      	orrs	r3, r2
 8005088:	b2db      	uxtb	r3, r3
 800508a:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 800508e:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8005092:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005096:	4053      	eors	r3, r2
 8005098:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 800509c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80050a0:	005a      	lsls	r2, r3, #1
 80050a2:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80050a6:	11db      	asrs	r3, r3, #7
 80050a8:	4313      	orrs	r3, r2
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80050b0:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 80050b4:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80050b8:	4053      	eors	r3, r2
 80050ba:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 80050be:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80050c2:	005a      	lsls	r2, r3, #1
 80050c4:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80050c8:	11db      	asrs	r3, r3, #7
 80050ca:	4313      	orrs	r3, r2
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80050d2:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 80050d6:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80050da:	4053      	eors	r3, r2
 80050dc:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 80050e0:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80050e4:	005a      	lsls	r2, r3, #1
 80050e6:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80050ea:	11db      	asrs	r3, r3, #7
 80050ec:	4313      	orrs	r3, r2
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y ^ 0x63;
 80050f4:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80050f8:	f083 0363 	eor.w	r3, r3, #99	; 0x63
 80050fc:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8005100:	4053      	eors	r3, r2
 8005102:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        FSb[i] = (unsigned char) x;
 8005106:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800510a:	b2d9      	uxtb	r1, r3
 800510c:	4a98      	ldr	r2, [pc, #608]	; (8005370 <aes_gen_tables+0x3e8>)
 800510e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005112:	4413      	add	r3, r2
 8005114:	460a      	mov	r2, r1
 8005116:	701a      	strb	r2, [r3, #0]
        RSb[x] = (unsigned char) i;
 8005118:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800511c:	b2d9      	uxtb	r1, r3
 800511e:	4a95      	ldr	r2, [pc, #596]	; (8005374 <aes_gen_tables+0x3ec>)
 8005120:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005124:	4413      	add	r3, r2
 8005126:	460a      	mov	r2, r1
 8005128:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < 256; i++ )
 800512a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800512e:	3301      	adds	r3, #1
 8005130:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8005134:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005138:	2bff      	cmp	r3, #255	; 0xff
 800513a:	dd8d      	ble.n	8005058 <aes_gen_tables+0xd0>
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 800513c:	2300      	movs	r3, #0
 800513e:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8005142:	e106      	b.n	8005352 <aes_gen_tables+0x3ca>
    {
        x = FSb[i];
 8005144:	4a8a      	ldr	r2, [pc, #552]	; (8005370 <aes_gen_tables+0x3e8>)
 8005146:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800514a:	4413      	add	r3, r2
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
        y = XTIME( x ) & 0xFF;
 8005152:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 800515c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005160:	2a00      	cmp	r2, #0
 8005162:	d001      	beq.n	8005168 <aes_gen_tables+0x1e0>
 8005164:	221b      	movs	r2, #27
 8005166:	e000      	b.n	800516a <aes_gen_tables+0x1e2>
 8005168:	2200      	movs	r2, #0
 800516a:	4053      	eors	r3, r2
 800516c:	b2db      	uxtb	r3, r3
 800516e:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        z =  ( y ^ x ) & 0xFF;
 8005172:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8005176:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800517a:	4053      	eors	r3, r2
 800517c:	b2db      	uxtb	r3, r3
 800517e:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 8005182:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005186:	021a      	lsls	r2, r3, #8
        FT0[i] = ( (uint32_t) y       ) ^
 8005188:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800518c:	405a      	eors	r2, r3
                 ( (uint32_t) x << 16 ) ^
 800518e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005192:	041b      	lsls	r3, r3, #16
                 ( (uint32_t) x <<  8 ) ^
 8005194:	405a      	eors	r2, r3
                 ( (uint32_t) z << 24 );
 8005196:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 800519a:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) x << 16 ) ^
 800519c:	405a      	eors	r2, r3
        FT0[i] = ( (uint32_t) y       ) ^
 800519e:	4976      	ldr	r1, [pc, #472]	; (8005378 <aes_gen_tables+0x3f0>)
 80051a0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80051a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
 80051a8:	4a73      	ldr	r2, [pc, #460]	; (8005378 <aes_gen_tables+0x3f0>)
 80051aa:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80051ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b2:	ea4f 6233 	mov.w	r2, r3, ror #24
 80051b6:	4971      	ldr	r1, [pc, #452]	; (800537c <aes_gen_tables+0x3f4>)
 80051b8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80051bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 80051c0:	4a6e      	ldr	r2, [pc, #440]	; (800537c <aes_gen_tables+0x3f4>)
 80051c2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80051c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ca:	ea4f 6233 	mov.w	r2, r3, ror #24
 80051ce:	496c      	ldr	r1, [pc, #432]	; (8005380 <aes_gen_tables+0x3f8>)
 80051d0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80051d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 80051d8:	4a69      	ldr	r2, [pc, #420]	; (8005380 <aes_gen_tables+0x3f8>)
 80051da:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80051de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e2:	ea4f 6233 	mov.w	r2, r3, ror #24
 80051e6:	4967      	ldr	r1, [pc, #412]	; (8005384 <aes_gen_tables+0x3fc>)
 80051e8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80051ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
 80051f0:	4a60      	ldr	r2, [pc, #384]	; (8005374 <aes_gen_tables+0x3ec>)
 80051f2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80051f6:	4413      	add	r3, r2
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80051fe:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005202:	2b00      	cmp	r3, #0
 8005204:	d018      	beq.n	8005238 <aes_gen_tables+0x2b0>
 8005206:	463b      	mov	r3, r7
 8005208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800520a:	463b      	mov	r3, r7
 800520c:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8005210:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005214:	441a      	add	r2, r3
 8005216:	4b5c      	ldr	r3, [pc, #368]	; (8005388 <aes_gen_tables+0x400>)
 8005218:	fb83 1302 	smull	r1, r3, r3, r2
 800521c:	4413      	add	r3, r2
 800521e:	11d9      	asrs	r1, r3, #7
 8005220:	17d3      	asrs	r3, r2, #31
 8005222:	1ac9      	subs	r1, r1, r3
 8005224:	460b      	mov	r3, r1
 8005226:	021b      	lsls	r3, r3, #8
 8005228:	1a5b      	subs	r3, r3, r1
 800522a:	1ad1      	subs	r1, r2, r3
 800522c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8005230:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005234:	4618      	mov	r0, r3
 8005236:	e000      	b.n	800523a <aes_gen_tables+0x2b2>
 8005238:	2000      	movs	r0, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 800523a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800523e:	2b00      	cmp	r3, #0
 8005240:	d018      	beq.n	8005274 <aes_gen_tables+0x2ec>
 8005242:	463b      	mov	r3, r7
 8005244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005246:	463b      	mov	r3, r7
 8005248:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 800524c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005250:	441a      	add	r2, r3
 8005252:	4b4d      	ldr	r3, [pc, #308]	; (8005388 <aes_gen_tables+0x400>)
 8005254:	fb83 1302 	smull	r1, r3, r3, r2
 8005258:	4413      	add	r3, r2
 800525a:	11d9      	asrs	r1, r3, #7
 800525c:	17d3      	asrs	r3, r2, #31
 800525e:	1ac9      	subs	r1, r1, r3
 8005260:	460b      	mov	r3, r1
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	1a5b      	subs	r3, r3, r1
 8005266:	1ad1      	subs	r1, r2, r3
 8005268:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800526c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005270:	021b      	lsls	r3, r3, #8
 8005272:	e000      	b.n	8005276 <aes_gen_tables+0x2ee>
 8005274:	2300      	movs	r3, #0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8005276:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8005278:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800527c:	2b00      	cmp	r3, #0
 800527e:	d018      	beq.n	80052b2 <aes_gen_tables+0x32a>
 8005280:	463b      	mov	r3, r7
 8005282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005284:	463b      	mov	r3, r7
 8005286:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 800528a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800528e:	441a      	add	r2, r3
 8005290:	4b3d      	ldr	r3, [pc, #244]	; (8005388 <aes_gen_tables+0x400>)
 8005292:	fb83 1302 	smull	r1, r3, r3, r2
 8005296:	4413      	add	r3, r2
 8005298:	11d9      	asrs	r1, r3, #7
 800529a:	17d3      	asrs	r3, r2, #31
 800529c:	1ac9      	subs	r1, r1, r3
 800529e:	460b      	mov	r3, r1
 80052a0:	021b      	lsls	r3, r3, #8
 80052a2:	1a5b      	subs	r3, r3, r1
 80052a4:	1ad1      	subs	r1, r2, r3
 80052a6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80052aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80052ae:	041b      	lsls	r3, r3, #16
 80052b0:	e000      	b.n	80052b4 <aes_gen_tables+0x32c>
 80052b2:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80052b4:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80052b6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d018      	beq.n	80052f0 <aes_gen_tables+0x368>
 80052be:	463b      	mov	r3, r7
 80052c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c2:	463b      	mov	r3, r7
 80052c4:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 80052c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80052cc:	441a      	add	r2, r3
 80052ce:	4b2e      	ldr	r3, [pc, #184]	; (8005388 <aes_gen_tables+0x400>)
 80052d0:	fb83 1302 	smull	r1, r3, r3, r2
 80052d4:	4413      	add	r3, r2
 80052d6:	11d9      	asrs	r1, r3, #7
 80052d8:	17d3      	asrs	r3, r2, #31
 80052da:	1ac9      	subs	r1, r1, r3
 80052dc:	460b      	mov	r3, r1
 80052de:	021b      	lsls	r3, r3, #8
 80052e0:	1a5b      	subs	r3, r3, r1
 80052e2:	1ad1      	subs	r1, r2, r3
 80052e4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80052e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80052ec:	061b      	lsls	r3, r3, #24
 80052ee:	e000      	b.n	80052f2 <aes_gen_tables+0x36a>
 80052f0:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80052f2:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80052f6:	4925      	ldr	r1, [pc, #148]	; (800538c <aes_gen_tables+0x404>)
 80052f8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80052fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 8005300:	4a22      	ldr	r2, [pc, #136]	; (800538c <aes_gen_tables+0x404>)
 8005302:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800530a:	ea4f 6233 	mov.w	r2, r3, ror #24
 800530e:	4920      	ldr	r1, [pc, #128]	; (8005390 <aes_gen_tables+0x408>)
 8005310:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8( RT1[i] );
 8005318:	4a1d      	ldr	r2, [pc, #116]	; (8005390 <aes_gen_tables+0x408>)
 800531a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800531e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005322:	ea4f 6233 	mov.w	r2, r3, ror #24
 8005326:	491b      	ldr	r1, [pc, #108]	; (8005394 <aes_gen_tables+0x40c>)
 8005328:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800532c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8( RT2[i] );
 8005330:	4a18      	ldr	r2, [pc, #96]	; (8005394 <aes_gen_tables+0x40c>)
 8005332:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800533a:	ea4f 6233 	mov.w	r2, r3, ror #24
 800533e:	4916      	ldr	r1, [pc, #88]	; (8005398 <aes_gen_tables+0x410>)
 8005340:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = 0; i < 256; i++ )
 8005348:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800534c:	3301      	adds	r3, #1
 800534e:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8005352:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8005356:	2bff      	cmp	r3, #255	; 0xff
 8005358:	f77f aef4 	ble.w	8005144 <aes_gen_tables+0x1bc>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 800535c:	bf00      	nop
 800535e:	f607 0714 	addw	r7, r7, #2068	; 0x814
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	2000242c 	.word	0x2000242c
 8005370:	2000022c 	.word	0x2000022c
 8005374:	2000132c 	.word	0x2000132c
 8005378:	2000032c 	.word	0x2000032c
 800537c:	2000072c 	.word	0x2000072c
 8005380:	20000b2c 	.word	0x20000b2c
 8005384:	20000f2c 	.word	0x20000f2c
 8005388:	80808081 	.word	0x80808081
 800538c:	2000142c 	.word	0x2000142c
 8005390:	2000182c 	.word	0x2000182c
 8005394:	20001c2c 	.word	0x20001c2c
 8005398:	2000202c 	.word	0x2000202c

0800539c <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 80053a4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80053a8:	2100      	movs	r1, #0
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f001 f9b1 	bl	8006712 <memset>
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d005      	beq.n	80053d2 <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 80053c6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f001 f95e 	bl	800668c <mbedtls_platform_zeroize>
 80053d0:	e000      	b.n	80053d4 <mbedtls_aes_free+0x1c>
        return;
 80053d2:	bf00      	nop
}
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2bc0      	cmp	r3, #192	; 0xc0
 80053ec:	d008      	beq.n	8005400 <mbedtls_aes_setkey_enc+0x24>
 80053ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f2:	d009      	beq.n	8005408 <mbedtls_aes_setkey_enc+0x2c>
 80053f4:	2b80      	cmp	r3, #128	; 0x80
 80053f6:	d10b      	bne.n	8005410 <mbedtls_aes_setkey_enc+0x34>
    {
        case 128: ctx->nr = 10; break;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	220a      	movs	r2, #10
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	e00a      	b.n	8005416 <mbedtls_aes_setkey_enc+0x3a>
        case 192: ctx->nr = 12; break;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	220c      	movs	r2, #12
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	e006      	b.n	8005416 <mbedtls_aes_setkey_enc+0x3a>
        case 256: ctx->nr = 14; break;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	220e      	movs	r2, #14
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	e002      	b.n	8005416 <mbedtls_aes_setkey_enc+0x3a>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8005410:	f06f 031f 	mvn.w	r3, #31
 8005414:	e1b0      	b.n	8005778 <mbedtls_aes_setkey_enc+0x39c>
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 8005416:	4b87      	ldr	r3, [pc, #540]	; (8005634 <mbedtls_aes_setkey_enc+0x258>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d104      	bne.n	8005428 <mbedtls_aes_setkey_enc+0x4c>
    {
        aes_gen_tables();
 800541e:	f7ff fdb3 	bl	8004f88 <aes_gen_tables>
        aes_init_done = 1;
 8005422:	4b84      	ldr	r3, [pc, #528]	; (8005634 <mbedtls_aes_setkey_enc+0x258>)
 8005424:	2201      	movs	r2, #1
 8005426:	601a      	str	r2, [r3, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3308      	adds	r3, #8
 800542c:	613b      	str	r3, [r7, #16]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8005434:	2300      	movs	r3, #0
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	e027      	b.n	800548a <mbedtls_aes_setkey_enc+0xae>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	4413      	add	r3, r2
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	4619      	mov	r1, r3
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	3301      	adds	r3, #1
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	4413      	add	r3, r2
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	ea41 0203 	orr.w	r2, r1, r3
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	3302      	adds	r3, #2
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	440b      	add	r3, r1
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	041b      	lsls	r3, r3, #16
 8005466:	ea42 0103 	orr.w	r1, r2, r3
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	3303      	adds	r3, #3
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	4413      	add	r3, r2
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	061a      	lsls	r2, r3, #24
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	6938      	ldr	r0, [r7, #16]
 800547e:	4403      	add	r3, r0
 8005480:	430a      	orrs	r2, r1
 8005482:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	3301      	adds	r3, #1
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	429a      	cmp	r2, r3
 8005492:	d3d2      	bcc.n	800543a <mbedtls_aes_setkey_enc+0x5e>
    }

    switch( ctx->nr )
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b0c      	cmp	r3, #12
 800549a:	d05c      	beq.n	8005556 <mbedtls_aes_setkey_enc+0x17a>
 800549c:	2b0e      	cmp	r3, #14
 800549e:	f000 80c5 	beq.w	800562c <mbedtls_aes_setkey_enc+0x250>
 80054a2:	2b0a      	cmp	r3, #10
 80054a4:	f040 8167 	bne.w	8005776 <mbedtls_aes_setkey_enc+0x39a>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 80054a8:	2300      	movs	r3, #0
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	e04f      	b.n	800554e <mbedtls_aes_setkey_enc+0x172>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4961      	ldr	r1, [pc, #388]	; (8005638 <mbedtls_aes_setkey_enc+0x25c>)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80054ba:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	320c      	adds	r2, #12
 80054c0:	6812      	ldr	r2, [r2, #0]
 80054c2:	0a12      	lsrs	r2, r2, #8
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	495d      	ldr	r1, [pc, #372]	; (800563c <mbedtls_aes_setkey_enc+0x260>)
 80054c8:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 80054ca:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	330c      	adds	r3, #12
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	0c1b      	lsrs	r3, r3, #16
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	4959      	ldr	r1, [pc, #356]	; (800563c <mbedtls_aes_setkey_enc+0x260>)
 80054d8:	5ccb      	ldrb	r3, [r1, r3]
 80054da:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80054dc:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	330c      	adds	r3, #12
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	0e1b      	lsrs	r3, r3, #24
 80054e6:	4955      	ldr	r1, [pc, #340]	; (800563c <mbedtls_aes_setkey_enc+0x260>)
 80054e8:	5ccb      	ldrb	r3, [r1, r3]
 80054ea:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 80054ec:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	330c      	adds	r3, #12
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	4a50      	ldr	r2, [pc, #320]	; (800563c <mbedtls_aes_setkey_enc+0x260>)
 80054fa:	5cd3      	ldrb	r3, [r2, r3]
 80054fc:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8005502:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 8005504:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	3304      	adds	r3, #4
 800550a:	6819      	ldr	r1, [r3, #0]
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	3310      	adds	r3, #16
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	3314      	adds	r3, #20
 8005516:	404a      	eors	r2, r1
 8005518:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	3308      	adds	r3, #8
 800551e:	6819      	ldr	r1, [r3, #0]
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	3314      	adds	r3, #20
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	3318      	adds	r3, #24
 800552a:	404a      	eors	r2, r1
 800552c:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	330c      	adds	r3, #12
 8005532:	6819      	ldr	r1, [r3, #0]
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	3318      	adds	r3, #24
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	331c      	adds	r3, #28
 800553e:	404a      	eors	r2, r1
 8005540:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	3301      	adds	r3, #1
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	3310      	adds	r3, #16
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2b09      	cmp	r3, #9
 8005552:	d9ac      	bls.n	80054ae <mbedtls_aes_setkey_enc+0xd2>
            }
            break;
 8005554:	e10f      	b.n	8005776 <mbedtls_aes_setkey_enc+0x39a>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	e063      	b.n	8005624 <mbedtls_aes_setkey_enc+0x248>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	4935      	ldr	r1, [pc, #212]	; (8005638 <mbedtls_aes_setkey_enc+0x25c>)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005568:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	3214      	adds	r2, #20
 800556e:	6812      	ldr	r2, [r2, #0]
 8005570:	0a12      	lsrs	r2, r2, #8
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	4931      	ldr	r1, [pc, #196]	; (800563c <mbedtls_aes_setkey_enc+0x260>)
 8005576:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 8005578:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	3314      	adds	r3, #20
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	0c1b      	lsrs	r3, r3, #16
 8005582:	b2db      	uxtb	r3, r3
 8005584:	492d      	ldr	r1, [pc, #180]	; (800563c <mbedtls_aes_setkey_enc+0x260>)
 8005586:	5ccb      	ldrb	r3, [r1, r3]
 8005588:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800558a:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	3314      	adds	r3, #20
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	0e1b      	lsrs	r3, r3, #24
 8005594:	4929      	ldr	r1, [pc, #164]	; (800563c <mbedtls_aes_setkey_enc+0x260>)
 8005596:	5ccb      	ldrb	r3, [r1, r3]
 8005598:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 800559a:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	3314      	adds	r3, #20
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	4a25      	ldr	r2, [pc, #148]	; (800563c <mbedtls_aes_setkey_enc+0x260>)
 80055a8:	5cd3      	ldrb	r3, [r2, r3]
 80055aa:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80055b0:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 80055b2:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	3304      	adds	r3, #4
 80055b8:	6819      	ldr	r1, [r3, #0]
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	3318      	adds	r3, #24
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	331c      	adds	r3, #28
 80055c4:	404a      	eors	r2, r1
 80055c6:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	3308      	adds	r3, #8
 80055cc:	6819      	ldr	r1, [r3, #0]
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	331c      	adds	r3, #28
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	3320      	adds	r3, #32
 80055d8:	404a      	eors	r2, r1
 80055da:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	330c      	adds	r3, #12
 80055e0:	6819      	ldr	r1, [r3, #0]
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	3320      	adds	r3, #32
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	3324      	adds	r3, #36	; 0x24
 80055ec:	404a      	eors	r2, r1
 80055ee:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	3310      	adds	r3, #16
 80055f4:	6819      	ldr	r1, [r3, #0]
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	3324      	adds	r3, #36	; 0x24
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	3328      	adds	r3, #40	; 0x28
 8005600:	404a      	eors	r2, r1
 8005602:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	3314      	adds	r3, #20
 8005608:	6819      	ldr	r1, [r3, #0]
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	3328      	adds	r3, #40	; 0x28
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	332c      	adds	r3, #44	; 0x2c
 8005614:	404a      	eors	r2, r1
 8005616:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	3301      	adds	r3, #1
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	3318      	adds	r3, #24
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	2b07      	cmp	r3, #7
 8005628:	d998      	bls.n	800555c <mbedtls_aes_setkey_enc+0x180>
            }
            break;
 800562a:	e0a4      	b.n	8005776 <mbedtls_aes_setkey_enc+0x39a>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	e09c      	b.n	800576c <mbedtls_aes_setkey_enc+0x390>
 8005632:	bf00      	nop
 8005634:	20002454 	.word	0x20002454
 8005638:	2000242c 	.word	0x2000242c
 800563c:	2000022c 	.word	0x2000022c
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	494e      	ldr	r1, [pc, #312]	; (8005780 <mbedtls_aes_setkey_enc+0x3a4>)
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800564c:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	321c      	adds	r2, #28
 8005652:	6812      	ldr	r2, [r2, #0]
 8005654:	0a12      	lsrs	r2, r2, #8
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	494a      	ldr	r1, [pc, #296]	; (8005784 <mbedtls_aes_setkey_enc+0x3a8>)
 800565a:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 800565c:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	331c      	adds	r3, #28
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	0c1b      	lsrs	r3, r3, #16
 8005666:	b2db      	uxtb	r3, r3
 8005668:	4946      	ldr	r1, [pc, #280]	; (8005784 <mbedtls_aes_setkey_enc+0x3a8>)
 800566a:	5ccb      	ldrb	r3, [r1, r3]
 800566c:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800566e:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	331c      	adds	r3, #28
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	0e1b      	lsrs	r3, r3, #24
 8005678:	4942      	ldr	r1, [pc, #264]	; (8005784 <mbedtls_aes_setkey_enc+0x3a8>)
 800567a:	5ccb      	ldrb	r3, [r1, r3]
 800567c:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 800567e:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	331c      	adds	r3, #28
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	b2db      	uxtb	r3, r3
 800568a:	4a3e      	ldr	r2, [pc, #248]	; (8005784 <mbedtls_aes_setkey_enc+0x3a8>)
 800568c:	5cd3      	ldrb	r3, [r2, r3]
 800568e:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8005694:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 8005696:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	3304      	adds	r3, #4
 800569c:	6819      	ldr	r1, [r3, #0]
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	3320      	adds	r3, #32
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	3324      	adds	r3, #36	; 0x24
 80056a8:	404a      	eors	r2, r1
 80056aa:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	3308      	adds	r3, #8
 80056b0:	6819      	ldr	r1, [r3, #0]
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	3324      	adds	r3, #36	; 0x24
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	3328      	adds	r3, #40	; 0x28
 80056bc:	404a      	eors	r2, r1
 80056be:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	330c      	adds	r3, #12
 80056c4:	6819      	ldr	r1, [r3, #0]
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	3328      	adds	r3, #40	; 0x28
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	332c      	adds	r3, #44	; 0x2c
 80056d0:	404a      	eors	r2, r1
 80056d2:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	3310      	adds	r3, #16
 80056d8:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	322c      	adds	r2, #44	; 0x2c
 80056de:	6812      	ldr	r2, [r2, #0]
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	4928      	ldr	r1, [pc, #160]	; (8005784 <mbedtls_aes_setkey_enc+0x3a8>)
 80056e4:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 80056e6:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	332c      	adds	r3, #44	; 0x2c
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	0a1b      	lsrs	r3, r3, #8
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	4924      	ldr	r1, [pc, #144]	; (8005784 <mbedtls_aes_setkey_enc+0x3a8>)
 80056f4:	5ccb      	ldrb	r3, [r1, r3]
 80056f6:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 80056f8:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	332c      	adds	r3, #44	; 0x2c
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	0c1b      	lsrs	r3, r3, #16
 8005702:	b2db      	uxtb	r3, r3
 8005704:	491f      	ldr	r1, [pc, #124]	; (8005784 <mbedtls_aes_setkey_enc+0x3a8>)
 8005706:	5ccb      	ldrb	r3, [r1, r3]
 8005708:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800570a:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	332c      	adds	r3, #44	; 0x2c
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	0e1b      	lsrs	r3, r3, #24
 8005716:	4a1b      	ldr	r2, [pc, #108]	; (8005784 <mbedtls_aes_setkey_enc+0x3a8>)
 8005718:	5cd3      	ldrb	r3, [r2, r3]
 800571a:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	3330      	adds	r3, #48	; 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8005720:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 8005722:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	3314      	adds	r3, #20
 8005728:	6819      	ldr	r1, [r3, #0]
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	3330      	adds	r3, #48	; 0x30
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	3334      	adds	r3, #52	; 0x34
 8005734:	404a      	eors	r2, r1
 8005736:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	3318      	adds	r3, #24
 800573c:	6819      	ldr	r1, [r3, #0]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	3334      	adds	r3, #52	; 0x34
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	3338      	adds	r3, #56	; 0x38
 8005748:	404a      	eors	r2, r1
 800574a:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	331c      	adds	r3, #28
 8005750:	6819      	ldr	r1, [r3, #0]
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	3338      	adds	r3, #56	; 0x38
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	333c      	adds	r3, #60	; 0x3c
 800575c:	404a      	eors	r2, r1
 800575e:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	3301      	adds	r3, #1
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	3320      	adds	r3, #32
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2b06      	cmp	r3, #6
 8005770:	f67f af66 	bls.w	8005640 <mbedtls_aes_setkey_enc+0x264>
            }
            break;
 8005774:	bf00      	nop
    }

    return( 0 );
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	2000242c 	.word	0x2000242c
 8005784:	2000022c 	.word	0x2000022c

08005788 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b0d0      	sub	sp, #320	; 0x140
 800578c:	af00      	add	r7, sp, #0
 800578e:	f107 030c 	add.w	r3, r7, #12
 8005792:	6018      	str	r0, [r3, #0]
 8005794:	f107 0308 	add.w	r3, r7, #8
 8005798:	6019      	str	r1, [r3, #0]
 800579a:	1d3b      	adds	r3, r7, #4
 800579c:	601a      	str	r2, [r3, #0]
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 800579e:	f107 0314 	add.w	r3, r7, #20
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff fdfa 	bl	800539c <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80057a8:	f107 030c 	add.w	r3, r7, #12
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3308      	adds	r3, #8
 80057b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80057b4:	f107 030c 	add.w	r3, r7, #12
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80057be:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 80057c0:	1d3a      	adds	r2, r7, #4
 80057c2:	f107 0308 	add.w	r3, r7, #8
 80057c6:	f107 0014 	add.w	r0, r7, #20
 80057ca:	6812      	ldr	r2, [r2, #0]
 80057cc:	6819      	ldr	r1, [r3, #0]
 80057ce:	f7ff fe05 	bl	80053dc <mbedtls_aes_setkey_enc>
 80057d2:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 80057d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f040 80d3 	bne.w	8005986 <mbedtls_aes_setkey_dec+0x1fe>
        goto exit;

    ctx->nr = cty.nr;
 80057e0:	f107 0314 	add.w	r3, r7, #20
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	f107 030c 	add.w	r3, r7, #12
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80057ee:	f107 0314 	add.w	r3, r7, #20
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f107 0214 	add.w	r2, r7, #20
 80057f8:	6812      	ldr	r2, [r2, #0]
 80057fa:	0112      	lsls	r2, r2, #4
 80057fc:	4413      	add	r3, r2
 80057fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    *RK++ = *SK++;
 8005802:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005806:	1d13      	adds	r3, r2, #4
 8005808:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800580c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005810:	1d19      	adds	r1, r3, #4
 8005812:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800581a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800581e:	1d13      	adds	r3, r2, #4
 8005820:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005824:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005828:	1d19      	adds	r1, r3, #4
 800582a:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800582e:	6812      	ldr	r2, [r2, #0]
 8005830:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005832:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005836:	1d13      	adds	r3, r2, #4
 8005838:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800583c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005840:	1d19      	adds	r1, r3, #4
 8005842:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8005846:	6812      	ldr	r2, [r2, #0]
 8005848:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800584a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800584e:	1d13      	adds	r3, r2, #4
 8005850:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005854:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005858:	1d19      	adds	r1, r3, #4
 800585a:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800585e:	6812      	ldr	r2, [r2, #0]
 8005860:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8005862:	f107 030c 	add.w	r3, r7, #12
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3b01      	subs	r3, #1
 800586c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8005870:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005874:	3b20      	subs	r3, #32
 8005876:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800587a:	e04f      	b.n	800591c <mbedtls_aes_setkey_dec+0x194>
    {
        for( j = 0; j < 4; j++, SK++ )
 800587c:	2300      	movs	r3, #0
 800587e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005882:	e03d      	b.n	8005900 <mbedtls_aes_setkey_dec+0x178>
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8005884:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	b2db      	uxtb	r3, r3
 800588c:	4a44      	ldr	r2, [pc, #272]	; (80059a0 <mbedtls_aes_setkey_dec+0x218>)
 800588e:	5cd3      	ldrb	r3, [r2, r3]
 8005890:	461a      	mov	r2, r3
 8005892:	4b44      	ldr	r3, [pc, #272]	; (80059a4 <mbedtls_aes_setkey_dec+0x21c>)
 8005894:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8005898:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	0a1b      	lsrs	r3, r3, #8
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	493f      	ldr	r1, [pc, #252]	; (80059a0 <mbedtls_aes_setkey_dec+0x218>)
 80058a4:	5ccb      	ldrb	r3, [r1, r3]
 80058a6:	4619      	mov	r1, r3
 80058a8:	4b3f      	ldr	r3, [pc, #252]	; (80059a8 <mbedtls_aes_setkey_dec+0x220>)
 80058aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80058ae:	405a      	eors	r2, r3
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 80058b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	0c1b      	lsrs	r3, r3, #16
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	4939      	ldr	r1, [pc, #228]	; (80059a0 <mbedtls_aes_setkey_dec+0x218>)
 80058bc:	5ccb      	ldrb	r3, [r1, r3]
 80058be:	4619      	mov	r1, r3
 80058c0:	4b3a      	ldr	r3, [pc, #232]	; (80059ac <mbedtls_aes_setkey_dec+0x224>)
 80058c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 80058c6:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 80058ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	0e1b      	lsrs	r3, r3, #24
 80058d2:	4a33      	ldr	r2, [pc, #204]	; (80059a0 <mbedtls_aes_setkey_dec+0x218>)
 80058d4:	5cd3      	ldrb	r3, [r2, r3]
 80058d6:	461a      	mov	r2, r3
 80058d8:	4b35      	ldr	r3, [pc, #212]	; (80059b0 <mbedtls_aes_setkey_dec+0x228>)
 80058da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80058de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058e2:	1d18      	adds	r0, r3, #4
 80058e4:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 80058e8:	404a      	eors	r2, r1
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80058ea:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 80058ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058f0:	3301      	adds	r3, #1
 80058f2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80058f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80058fa:	3304      	adds	r3, #4
 80058fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005900:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005904:	2b03      	cmp	r3, #3
 8005906:	ddbd      	ble.n	8005884 <mbedtls_aes_setkey_dec+0xfc>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8005908:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800590c:	3b01      	subs	r3, #1
 800590e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8005912:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005916:	3b20      	subs	r3, #32
 8005918:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800591c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005920:	2b00      	cmp	r3, #0
 8005922:	dcab      	bgt.n	800587c <mbedtls_aes_setkey_dec+0xf4>
        }
    }

    *RK++ = *SK++;
 8005924:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005928:	1d13      	adds	r3, r2, #4
 800592a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800592e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005932:	1d19      	adds	r1, r3, #4
 8005934:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8005938:	6812      	ldr	r2, [r2, #0]
 800593a:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800593c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005940:	1d13      	adds	r3, r2, #4
 8005942:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005946:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800594a:	1d19      	adds	r1, r3, #4
 800594c:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8005950:	6812      	ldr	r2, [r2, #0]
 8005952:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005954:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005958:	1d13      	adds	r3, r2, #4
 800595a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800595e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005962:	1d19      	adds	r1, r3, #4
 8005964:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800596c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005970:	1d13      	adds	r3, r2, #4
 8005972:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005976:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800597a:	1d19      	adds	r1, r3, #4
 800597c:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8005980:	6812      	ldr	r2, [r2, #0]
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	e000      	b.n	8005988 <mbedtls_aes_setkey_dec+0x200>
        goto exit;
 8005986:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 8005988:	f107 0314 	add.w	r3, r7, #20
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff fd13 	bl	80053b8 <mbedtls_aes_free>

    return( ret );
 8005992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
}
 8005996:	4618      	mov	r0, r3
 8005998:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	2000022c 	.word	0x2000022c
 80059a4:	2000142c 	.word	0x2000142c
 80059a8:	2000182c 	.word	0x2000182c
 80059ac:	20001c2c 	.word	0x20001c2c
 80059b0:	2000202c 	.word	0x2000202c

080059b4 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08e      	sub	sp, #56	; 0x38
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->rk;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	633b      	str	r3, [r7, #48]	; 0x30
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    GET_UINT32_LE( t.X[0], input,  0 ); t.X[0] ^= *RK++;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	3301      	adds	r3, #1
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	021b      	lsls	r3, r3, #8
 80059d4:	431a      	orrs	r2, r3
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	3302      	adds	r3, #2
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	041b      	lsls	r3, r3, #16
 80059de:	431a      	orrs	r2, r3
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	3303      	adds	r3, #3
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	061b      	lsls	r3, r3, #24
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	1d1a      	adds	r2, r3, #4
 80059f0:	633a      	str	r2, [r7, #48]	; 0x30
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	4053      	eors	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]
    GET_UINT32_LE( t.X[1], input,  4 ); t.X[1] ^= *RK++;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	3304      	adds	r3, #4
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	3305      	adds	r3, #5
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	021b      	lsls	r3, r3, #8
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	3306      	adds	r3, #6
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	041b      	lsls	r3, r3, #16
 8005a14:	431a      	orrs	r2, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	3307      	adds	r3, #7
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	061b      	lsls	r3, r3, #24
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	1d1a      	adds	r2, r3, #4
 8005a26:	633a      	str	r2, [r7, #48]	; 0x30
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	4053      	eors	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
    GET_UINT32_LE( t.X[2], input,  8 ); t.X[2] ^= *RK++;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	3308      	adds	r3, #8
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	461a      	mov	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	3309      	adds	r3, #9
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	021b      	lsls	r3, r3, #8
 8005a40:	431a      	orrs	r2, r3
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	330a      	adds	r3, #10
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	041b      	lsls	r3, r3, #16
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	330b      	adds	r3, #11
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	061b      	lsls	r3, r3, #24
 8005a54:	4313      	orrs	r3, r2
 8005a56:	61bb      	str	r3, [r7, #24]
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	1d1a      	adds	r2, r3, #4
 8005a5c:	633a      	str	r2, [r7, #48]	; 0x30
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	4053      	eors	r3, r2
 8005a64:	61bb      	str	r3, [r7, #24]
    GET_UINT32_LE( t.X[3], input, 12 ); t.X[3] ^= *RK++;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	330c      	adds	r3, #12
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	330d      	adds	r3, #13
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	431a      	orrs	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	330e      	adds	r3, #14
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	041b      	lsls	r3, r3, #16
 8005a80:	431a      	orrs	r2, r3
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	330f      	adds	r3, #15
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	061b      	lsls	r3, r3, #24
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	61fb      	str	r3, [r7, #28]
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	1d1a      	adds	r2, r3, #4
 8005a92:	633a      	str	r2, [r7, #48]	; 0x30
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4053      	eors	r3, r2
 8005a9a:	61fb      	str	r3, [r7, #28]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	105b      	asrs	r3, r3, #1
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa6:	e0fa      	b.n	8005c9e <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aaa:	1d1a      	adds	r2, r3, #4
 8005aac:	633a      	str	r2, [r7, #48]	; 0x30
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	49ac      	ldr	r1, [pc, #688]	; (8005d68 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005ab6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005aba:	405a      	eors	r2, r3
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	49aa      	ldr	r1, [pc, #680]	; (8005d6c <mbedtls_internal_aes_encrypt+0x3b8>)
 8005ac4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ac8:	405a      	eors	r2, r3
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	0c1b      	lsrs	r3, r3, #16
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	49a7      	ldr	r1, [pc, #668]	; (8005d70 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005ad2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ad6:	405a      	eors	r2, r3
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	0e1b      	lsrs	r3, r3, #24
 8005adc:	49a5      	ldr	r1, [pc, #660]	; (8005d74 <mbedtls_internal_aes_encrypt+0x3c0>)
 8005ade:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ae2:	4053      	eors	r3, r2
 8005ae4:	623b      	str	r3, [r7, #32]
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	1d1a      	adds	r2, r3, #4
 8005aea:	633a      	str	r2, [r7, #48]	; 0x30
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	499d      	ldr	r1, [pc, #628]	; (8005d68 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005af4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005af8:	405a      	eors	r2, r3
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	0a1b      	lsrs	r3, r3, #8
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	499a      	ldr	r1, [pc, #616]	; (8005d6c <mbedtls_internal_aes_encrypt+0x3b8>)
 8005b02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b06:	405a      	eors	r2, r3
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	0c1b      	lsrs	r3, r3, #16
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	4998      	ldr	r1, [pc, #608]	; (8005d70 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005b10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b14:	405a      	eors	r2, r3
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	0e1b      	lsrs	r3, r3, #24
 8005b1a:	4996      	ldr	r1, [pc, #600]	; (8005d74 <mbedtls_internal_aes_encrypt+0x3c0>)
 8005b1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b20:	4053      	eors	r3, r2
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	1d1a      	adds	r2, r3, #4
 8005b28:	633a      	str	r2, [r7, #48]	; 0x30
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	498d      	ldr	r1, [pc, #564]	; (8005d68 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005b32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b36:	405a      	eors	r2, r3
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	0a1b      	lsrs	r3, r3, #8
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	498b      	ldr	r1, [pc, #556]	; (8005d6c <mbedtls_internal_aes_encrypt+0x3b8>)
 8005b40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b44:	405a      	eors	r2, r3
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	0c1b      	lsrs	r3, r3, #16
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	4988      	ldr	r1, [pc, #544]	; (8005d70 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005b4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b52:	405a      	eors	r2, r3
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	0e1b      	lsrs	r3, r3, #24
 8005b58:	4986      	ldr	r1, [pc, #536]	; (8005d74 <mbedtls_internal_aes_encrypt+0x3c0>)
 8005b5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b5e:	4053      	eors	r3, r2
 8005b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	1d1a      	adds	r2, r3, #4
 8005b66:	633a      	str	r2, [r7, #48]	; 0x30
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	497e      	ldr	r1, [pc, #504]	; (8005d68 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005b70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b74:	405a      	eors	r2, r3
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	0a1b      	lsrs	r3, r3, #8
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	497b      	ldr	r1, [pc, #492]	; (8005d6c <mbedtls_internal_aes_encrypt+0x3b8>)
 8005b7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b82:	405a      	eors	r2, r3
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	0c1b      	lsrs	r3, r3, #16
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	4979      	ldr	r1, [pc, #484]	; (8005d70 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005b8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b90:	405a      	eors	r2, r3
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	0e1b      	lsrs	r3, r3, #24
 8005b96:	4977      	ldr	r1, [pc, #476]	; (8005d74 <mbedtls_internal_aes_encrypt+0x3c0>)
 8005b98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b9c:	4053      	eors	r3, r2
 8005b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        AES_FROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba2:	1d1a      	adds	r2, r3, #4
 8005ba4:	633a      	str	r2, [r7, #48]	; 0x30
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	496e      	ldr	r1, [pc, #440]	; (8005d68 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005bae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005bb2:	405a      	eors	r2, r3
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	0a1b      	lsrs	r3, r3, #8
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	496c      	ldr	r1, [pc, #432]	; (8005d6c <mbedtls_internal_aes_encrypt+0x3b8>)
 8005bbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005bc0:	405a      	eors	r2, r3
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	0c1b      	lsrs	r3, r3, #16
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	4969      	ldr	r1, [pc, #420]	; (8005d70 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005bca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005bce:	405a      	eors	r2, r3
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	0e1b      	lsrs	r3, r3, #24
 8005bd4:	4967      	ldr	r1, [pc, #412]	; (8005d74 <mbedtls_internal_aes_encrypt+0x3c0>)
 8005bd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005bda:	4053      	eors	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	1d1a      	adds	r2, r3, #4
 8005be2:	633a      	str	r2, [r7, #48]	; 0x30
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	495f      	ldr	r1, [pc, #380]	; (8005d68 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005bec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005bf0:	405a      	eors	r2, r3
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	0a1b      	lsrs	r3, r3, #8
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	495c      	ldr	r1, [pc, #368]	; (8005d6c <mbedtls_internal_aes_encrypt+0x3b8>)
 8005bfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005bfe:	405a      	eors	r2, r3
 8005c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c02:	0c1b      	lsrs	r3, r3, #16
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	495a      	ldr	r1, [pc, #360]	; (8005d70 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005c08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c0c:	405a      	eors	r2, r3
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	0e1b      	lsrs	r3, r3, #24
 8005c12:	4958      	ldr	r1, [pc, #352]	; (8005d74 <mbedtls_internal_aes_encrypt+0x3c0>)
 8005c14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c18:	4053      	eors	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	1d1a      	adds	r2, r3, #4
 8005c20:	633a      	str	r2, [r7, #48]	; 0x30
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	494f      	ldr	r1, [pc, #316]	; (8005d68 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005c2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c2e:	405a      	eors	r2, r3
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	494d      	ldr	r1, [pc, #308]	; (8005d6c <mbedtls_internal_aes_encrypt+0x3b8>)
 8005c38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c3c:	405a      	eors	r2, r3
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	0c1b      	lsrs	r3, r3, #16
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	494a      	ldr	r1, [pc, #296]	; (8005d70 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005c46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c4a:	405a      	eors	r2, r3
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	0e1b      	lsrs	r3, r3, #24
 8005c50:	4948      	ldr	r1, [pc, #288]	; (8005d74 <mbedtls_internal_aes_encrypt+0x3c0>)
 8005c52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c56:	4053      	eors	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	1d1a      	adds	r2, r3, #4
 8005c5e:	633a      	str	r2, [r7, #48]	; 0x30
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	4940      	ldr	r1, [pc, #256]	; (8005d68 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005c68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c6c:	405a      	eors	r2, r3
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	0a1b      	lsrs	r3, r3, #8
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	493d      	ldr	r1, [pc, #244]	; (8005d6c <mbedtls_internal_aes_encrypt+0x3b8>)
 8005c76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c7a:	405a      	eors	r2, r3
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	0c1b      	lsrs	r3, r3, #16
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	493b      	ldr	r1, [pc, #236]	; (8005d70 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005c84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c88:	405a      	eors	r2, r3
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	0e1b      	lsrs	r3, r3, #24
 8005c8e:	4939      	ldr	r1, [pc, #228]	; (8005d74 <mbedtls_internal_aes_encrypt+0x3c0>)
 8005c90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c94:	4053      	eors	r3, r2
 8005c96:	61fb      	str	r3, [r7, #28]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8005c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f73f af01 	bgt.w	8005aa8 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	1d1a      	adds	r2, r3, #4
 8005caa:	633a      	str	r2, [r7, #48]	; 0x30
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	492d      	ldr	r1, [pc, #180]	; (8005d68 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005cb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cb8:	405a      	eors	r2, r3
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	0a1b      	lsrs	r3, r3, #8
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	492a      	ldr	r1, [pc, #168]	; (8005d6c <mbedtls_internal_aes_encrypt+0x3b8>)
 8005cc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cc6:	405a      	eors	r2, r3
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	0c1b      	lsrs	r3, r3, #16
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	4928      	ldr	r1, [pc, #160]	; (8005d70 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005cd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cd4:	405a      	eors	r2, r3
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	0e1b      	lsrs	r3, r3, #24
 8005cda:	4926      	ldr	r1, [pc, #152]	; (8005d74 <mbedtls_internal_aes_encrypt+0x3c0>)
 8005cdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ce0:	4053      	eors	r3, r2
 8005ce2:	623b      	str	r3, [r7, #32]
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	1d1a      	adds	r2, r3, #4
 8005ce8:	633a      	str	r2, [r7, #48]	; 0x30
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	491d      	ldr	r1, [pc, #116]	; (8005d68 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005cf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cf6:	405a      	eors	r2, r3
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	0a1b      	lsrs	r3, r3, #8
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	491b      	ldr	r1, [pc, #108]	; (8005d6c <mbedtls_internal_aes_encrypt+0x3b8>)
 8005d00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d04:	405a      	eors	r2, r3
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	0c1b      	lsrs	r3, r3, #16
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	4918      	ldr	r1, [pc, #96]	; (8005d70 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005d0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d12:	405a      	eors	r2, r3
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	0e1b      	lsrs	r3, r3, #24
 8005d18:	4916      	ldr	r1, [pc, #88]	; (8005d74 <mbedtls_internal_aes_encrypt+0x3c0>)
 8005d1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d1e:	4053      	eors	r3, r2
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	1d1a      	adds	r2, r3, #4
 8005d26:	633a      	str	r2, [r7, #48]	; 0x30
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	490e      	ldr	r1, [pc, #56]	; (8005d68 <mbedtls_internal_aes_encrypt+0x3b4>)
 8005d30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d34:	405a      	eors	r2, r3
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	0a1b      	lsrs	r3, r3, #8
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	490b      	ldr	r1, [pc, #44]	; (8005d6c <mbedtls_internal_aes_encrypt+0x3b8>)
 8005d3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d42:	405a      	eors	r2, r3
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	0c1b      	lsrs	r3, r3, #16
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	4909      	ldr	r1, [pc, #36]	; (8005d70 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005d4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d50:	405a      	eors	r2, r3
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	0e1b      	lsrs	r3, r3, #24
 8005d56:	4907      	ldr	r1, [pc, #28]	; (8005d74 <mbedtls_internal_aes_encrypt+0x3c0>)
 8005d58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d5c:	4053      	eors	r3, r2
 8005d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	1d1a      	adds	r2, r3, #4
 8005d64:	e008      	b.n	8005d78 <mbedtls_internal_aes_encrypt+0x3c4>
 8005d66:	bf00      	nop
 8005d68:	2000032c 	.word	0x2000032c
 8005d6c:	2000072c 	.word	0x2000072c
 8005d70:	20000b2c 	.word	0x20000b2c
 8005d74:	20000f2c 	.word	0x20000f2c
 8005d78:	633a      	str	r2, [r7, #48]	; 0x30
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	497b      	ldr	r1, [pc, #492]	; (8005f70 <mbedtls_internal_aes_encrypt+0x5bc>)
 8005d82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d86:	405a      	eors	r2, r3
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	0a1b      	lsrs	r3, r3, #8
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	4979      	ldr	r1, [pc, #484]	; (8005f74 <mbedtls_internal_aes_encrypt+0x5c0>)
 8005d90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d94:	405a      	eors	r2, r3
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	0c1b      	lsrs	r3, r3, #16
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	4976      	ldr	r1, [pc, #472]	; (8005f78 <mbedtls_internal_aes_encrypt+0x5c4>)
 8005d9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005da2:	405a      	eors	r2, r3
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	0e1b      	lsrs	r3, r3, #24
 8005da8:	4974      	ldr	r1, [pc, #464]	; (8005f7c <mbedtls_internal_aes_encrypt+0x5c8>)
 8005daa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005dae:	4053      	eors	r3, r2
 8005db0:	62fb      	str	r3, [r7, #44]	; 0x2c

    t.X[0] = *RK++ ^ \
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	1d1a      	adds	r2, r3, #4
 8005db6:	633a      	str	r2, [r7, #48]	; 0x30
 8005db8:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( t.Y[0]       ) & 0xFF ]       ) ^
 8005dba:	6a3a      	ldr	r2, [r7, #32]
 8005dbc:	b2d2      	uxtb	r2, r2
 8005dbe:	4970      	ldr	r1, [pc, #448]	; (8005f80 <mbedtls_internal_aes_encrypt+0x5cc>)
 8005dc0:	5c8a      	ldrb	r2, [r1, r2]
    t.X[0] = *RK++ ^ \
 8005dc2:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[1] >>  8 ) & 0xFF ] <<  8 ) ^
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	0a1b      	lsrs	r3, r3, #8
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	496d      	ldr	r1, [pc, #436]	; (8005f80 <mbedtls_internal_aes_encrypt+0x5cc>)
 8005dcc:	5ccb      	ldrb	r3, [r1, r3]
 8005dce:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( t.Y[0]       ) & 0xFF ]       ) ^
 8005dd0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[2] >> 16 ) & 0xFF ] << 16 ) ^
 8005dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd4:	0c1b      	lsrs	r3, r3, #16
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	4969      	ldr	r1, [pc, #420]	; (8005f80 <mbedtls_internal_aes_encrypt+0x5cc>)
 8005dda:	5ccb      	ldrb	r3, [r1, r3]
 8005ddc:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( t.Y[1] >>  8 ) & 0xFF ] <<  8 ) ^
 8005dde:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[3] >> 24 ) & 0xFF ] << 24 );
 8005de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de2:	0e1b      	lsrs	r3, r3, #24
 8005de4:	4966      	ldr	r1, [pc, #408]	; (8005f80 <mbedtls_internal_aes_encrypt+0x5cc>)
 8005de6:	5ccb      	ldrb	r3, [r1, r3]
 8005de8:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ ( t.Y[2] >> 16 ) & 0xFF ] << 16 ) ^
 8005dea:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 8005dec:	613b      	str	r3, [r7, #16]

    t.X[1] = *RK++ ^ \
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	1d1a      	adds	r2, r3, #4
 8005df2:	633a      	str	r2, [r7, #48]	; 0x30
 8005df4:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( t.Y[1]       ) & 0xFF ]       ) ^
 8005df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	4961      	ldr	r1, [pc, #388]	; (8005f80 <mbedtls_internal_aes_encrypt+0x5cc>)
 8005dfc:	5c8a      	ldrb	r2, [r1, r2]
    t.X[1] = *RK++ ^ \
 8005dfe:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[2] >>  8 ) & 0xFF ] <<  8 ) ^
 8005e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e02:	0a1b      	lsrs	r3, r3, #8
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	495e      	ldr	r1, [pc, #376]	; (8005f80 <mbedtls_internal_aes_encrypt+0x5cc>)
 8005e08:	5ccb      	ldrb	r3, [r1, r3]
 8005e0a:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( t.Y[1]       ) & 0xFF ]       ) ^
 8005e0c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	0c1b      	lsrs	r3, r3, #16
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	495a      	ldr	r1, [pc, #360]	; (8005f80 <mbedtls_internal_aes_encrypt+0x5cc>)
 8005e16:	5ccb      	ldrb	r3, [r1, r3]
 8005e18:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( t.Y[2] >>  8 ) & 0xFF ] <<  8 ) ^
 8005e1a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[0] >> 24 ) & 0xFF ] << 24 );
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	0e1b      	lsrs	r3, r3, #24
 8005e20:	4957      	ldr	r1, [pc, #348]	; (8005f80 <mbedtls_internal_aes_encrypt+0x5cc>)
 8005e22:	5ccb      	ldrb	r3, [r1, r3]
 8005e24:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 8005e26:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 8005e28:	617b      	str	r3, [r7, #20]

    t.X[2] = *RK++ ^ \
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	1d1a      	adds	r2, r3, #4
 8005e2e:	633a      	str	r2, [r7, #48]	; 0x30
 8005e30:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( t.Y[2]       ) & 0xFF ]       ) ^
 8005e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	4952      	ldr	r1, [pc, #328]	; (8005f80 <mbedtls_internal_aes_encrypt+0x5cc>)
 8005e38:	5c8a      	ldrb	r2, [r1, r2]
    t.X[2] = *RK++ ^ \
 8005e3a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[3] >>  8 ) & 0xFF ] <<  8 ) ^
 8005e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3e:	0a1b      	lsrs	r3, r3, #8
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	494f      	ldr	r1, [pc, #316]	; (8005f80 <mbedtls_internal_aes_encrypt+0x5cc>)
 8005e44:	5ccb      	ldrb	r3, [r1, r3]
 8005e46:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( t.Y[2]       ) & 0xFF ]       ) ^
 8005e48:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	0c1b      	lsrs	r3, r3, #16
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	494b      	ldr	r1, [pc, #300]	; (8005f80 <mbedtls_internal_aes_encrypt+0x5cc>)
 8005e52:	5ccb      	ldrb	r3, [r1, r3]
 8005e54:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( t.Y[3] >>  8 ) & 0xFF ] <<  8 ) ^
 8005e56:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[1] >> 24 ) & 0xFF ] << 24 );
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	0e1b      	lsrs	r3, r3, #24
 8005e5c:	4948      	ldr	r1, [pc, #288]	; (8005f80 <mbedtls_internal_aes_encrypt+0x5cc>)
 8005e5e:	5ccb      	ldrb	r3, [r1, r3]
 8005e60:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 8005e62:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8005e64:	61bb      	str	r3, [r7, #24]

    t.X[3] = *RK++ ^ \
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	1d1a      	adds	r2, r3, #4
 8005e6a:	633a      	str	r2, [r7, #48]	; 0x30
 8005e6c:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( t.Y[3]       ) & 0xFF ]       ) ^
 8005e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	4943      	ldr	r1, [pc, #268]	; (8005f80 <mbedtls_internal_aes_encrypt+0x5cc>)
 8005e74:	5c8a      	ldrb	r2, [r1, r2]
    t.X[3] = *RK++ ^ \
 8005e76:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[0] >>  8 ) & 0xFF ] <<  8 ) ^
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	0a1b      	lsrs	r3, r3, #8
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	4940      	ldr	r1, [pc, #256]	; (8005f80 <mbedtls_internal_aes_encrypt+0x5cc>)
 8005e80:	5ccb      	ldrb	r3, [r1, r3]
 8005e82:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( t.Y[3]       ) & 0xFF ]       ) ^
 8005e84:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	0c1b      	lsrs	r3, r3, #16
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	493c      	ldr	r1, [pc, #240]	; (8005f80 <mbedtls_internal_aes_encrypt+0x5cc>)
 8005e8e:	5ccb      	ldrb	r3, [r1, r3]
 8005e90:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( t.Y[0] >>  8 ) & 0xFF ] <<  8 ) ^
 8005e92:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[2] >> 24 ) & 0xFF ] << 24 );
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	0e1b      	lsrs	r3, r3, #24
 8005e98:	4939      	ldr	r1, [pc, #228]	; (8005f80 <mbedtls_internal_aes_encrypt+0x5cc>)
 8005e9a:	5ccb      	ldrb	r3, [r1, r3]
 8005e9c:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 8005e9e:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 8005ea0:	61fb      	str	r3, [r7, #28]

    PUT_UINT32_LE( t.X[0], output,  0 );
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	0a1a      	lsrs	r2, r3, #8
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	0c1a      	lsrs	r2, r3, #16
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3302      	adds	r3, #2
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	0e1a      	lsrs	r2, r3, #24
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3303      	adds	r3, #3
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( t.X[1], output,  4 );
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	701a      	strb	r2, [r3, #0]
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	0a1a      	lsrs	r2, r3, #8
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3305      	adds	r3, #5
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	701a      	strb	r2, [r3, #0]
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	0c1a      	lsrs	r2, r3, #16
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3306      	adds	r3, #6
 8005eec:	b2d2      	uxtb	r2, r2
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	0e1a      	lsrs	r2, r3, #24
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3307      	adds	r3, #7
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( t.X[2], output,  8 );
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3308      	adds	r3, #8
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	0a1a      	lsrs	r2, r3, #8
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3309      	adds	r3, #9
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	0c1a      	lsrs	r2, r3, #16
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	330a      	adds	r3, #10
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	0e1a      	lsrs	r2, r3, #24
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	330b      	adds	r3, #11
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( t.X[3], output, 12 );
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	330c      	adds	r3, #12
 8005f30:	b2d2      	uxtb	r2, r2
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	0a1a      	lsrs	r2, r3, #8
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	330d      	adds	r3, #13
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	0c1a      	lsrs	r2, r3, #16
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	330e      	adds	r3, #14
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	0e1a      	lsrs	r2, r3, #24
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	330f      	adds	r3, #15
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	701a      	strb	r2, [r3, #0]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 8005f58:	f107 0310 	add.w	r3, r7, #16
 8005f5c:	2120      	movs	r1, #32
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fb94 	bl	800668c <mbedtls_platform_zeroize>

    return( 0 );
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3738      	adds	r7, #56	; 0x38
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	2000032c 	.word	0x2000032c
 8005f74:	2000072c 	.word	0x2000072c
 8005f78:	20000b2c 	.word	0x20000b2c
 8005f7c:	20000f2c 	.word	0x20000f2c
 8005f80:	2000022c 	.word	0x2000022c

08005f84 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08e      	sub	sp, #56	; 0x38
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->rk;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	633b      	str	r3, [r7, #48]	; 0x30
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    GET_UINT32_LE( t.X[0], input,  0 ); t.X[0] ^= *RK++;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	021b      	lsls	r3, r3, #8
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	3302      	adds	r3, #2
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	041b      	lsls	r3, r3, #16
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	3303      	adds	r3, #3
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	061b      	lsls	r3, r3, #24
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	1d1a      	adds	r2, r3, #4
 8005fc0:	633a      	str	r2, [r7, #48]	; 0x30
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	4053      	eors	r3, r2
 8005fc8:	613b      	str	r3, [r7, #16]
    GET_UINT32_LE( t.X[1], input,  4 ); t.X[1] ^= *RK++;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	3305      	adds	r3, #5
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	021b      	lsls	r3, r3, #8
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	3306      	adds	r3, #6
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	041b      	lsls	r3, r3, #16
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	3307      	adds	r3, #7
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	061b      	lsls	r3, r3, #24
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	1d1a      	adds	r2, r3, #4
 8005ff6:	633a      	str	r2, [r7, #48]	; 0x30
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	4053      	eors	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]
    GET_UINT32_LE( t.X[2], input,  8 ); t.X[2] ^= *RK++;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	3308      	adds	r3, #8
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	3309      	adds	r3, #9
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	431a      	orrs	r2, r3
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	330a      	adds	r3, #10
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	041b      	lsls	r3, r3, #16
 800601a:	431a      	orrs	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	330b      	adds	r3, #11
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	061b      	lsls	r3, r3, #24
 8006024:	4313      	orrs	r3, r2
 8006026:	61bb      	str	r3, [r7, #24]
 8006028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602a:	1d1a      	adds	r2, r3, #4
 800602c:	633a      	str	r2, [r7, #48]	; 0x30
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	4053      	eors	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
    GET_UINT32_LE( t.X[3], input, 12 ); t.X[3] ^= *RK++;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	330c      	adds	r3, #12
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	330d      	adds	r3, #13
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	021b      	lsls	r3, r3, #8
 8006046:	431a      	orrs	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	330e      	adds	r3, #14
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	041b      	lsls	r3, r3, #16
 8006050:	431a      	orrs	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	330f      	adds	r3, #15
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	061b      	lsls	r3, r3, #24
 800605a:	4313      	orrs	r3, r2
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	1d1a      	adds	r2, r3, #4
 8006062:	633a      	str	r2, [r7, #48]	; 0x30
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	4053      	eors	r3, r2
 800606a:	61fb      	str	r3, [r7, #28]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	105b      	asrs	r3, r3, #1
 8006072:	3b01      	subs	r3, #1
 8006074:	637b      	str	r3, [r7, #52]	; 0x34
 8006076:	e0fa      	b.n	800626e <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8006078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607a:	1d1a      	adds	r2, r3, #4
 800607c:	633a      	str	r2, [r7, #48]	; 0x30
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	b2db      	uxtb	r3, r3
 8006084:	49ac      	ldr	r1, [pc, #688]	; (8006338 <mbedtls_internal_aes_decrypt+0x3b4>)
 8006086:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800608a:	405a      	eors	r2, r3
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	0a1b      	lsrs	r3, r3, #8
 8006090:	b2db      	uxtb	r3, r3
 8006092:	49aa      	ldr	r1, [pc, #680]	; (800633c <mbedtls_internal_aes_decrypt+0x3b8>)
 8006094:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006098:	405a      	eors	r2, r3
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	0c1b      	lsrs	r3, r3, #16
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	49a7      	ldr	r1, [pc, #668]	; (8006340 <mbedtls_internal_aes_decrypt+0x3bc>)
 80060a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80060a6:	405a      	eors	r2, r3
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	0e1b      	lsrs	r3, r3, #24
 80060ac:	49a5      	ldr	r1, [pc, #660]	; (8006344 <mbedtls_internal_aes_decrypt+0x3c0>)
 80060ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80060b2:	4053      	eors	r3, r2
 80060b4:	623b      	str	r3, [r7, #32]
 80060b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b8:	1d1a      	adds	r2, r3, #4
 80060ba:	633a      	str	r2, [r7, #48]	; 0x30
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	499d      	ldr	r1, [pc, #628]	; (8006338 <mbedtls_internal_aes_decrypt+0x3b4>)
 80060c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80060c8:	405a      	eors	r2, r3
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	0a1b      	lsrs	r3, r3, #8
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	499a      	ldr	r1, [pc, #616]	; (800633c <mbedtls_internal_aes_decrypt+0x3b8>)
 80060d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80060d6:	405a      	eors	r2, r3
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	0c1b      	lsrs	r3, r3, #16
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	4998      	ldr	r1, [pc, #608]	; (8006340 <mbedtls_internal_aes_decrypt+0x3bc>)
 80060e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80060e4:	405a      	eors	r2, r3
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	0e1b      	lsrs	r3, r3, #24
 80060ea:	4996      	ldr	r1, [pc, #600]	; (8006344 <mbedtls_internal_aes_decrypt+0x3c0>)
 80060ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80060f0:	4053      	eors	r3, r2
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	1d1a      	adds	r2, r3, #4
 80060f8:	633a      	str	r2, [r7, #48]	; 0x30
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	498d      	ldr	r1, [pc, #564]	; (8006338 <mbedtls_internal_aes_decrypt+0x3b4>)
 8006102:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006106:	405a      	eors	r2, r3
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	0a1b      	lsrs	r3, r3, #8
 800610c:	b2db      	uxtb	r3, r3
 800610e:	498b      	ldr	r1, [pc, #556]	; (800633c <mbedtls_internal_aes_decrypt+0x3b8>)
 8006110:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006114:	405a      	eors	r2, r3
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	0c1b      	lsrs	r3, r3, #16
 800611a:	b2db      	uxtb	r3, r3
 800611c:	4988      	ldr	r1, [pc, #544]	; (8006340 <mbedtls_internal_aes_decrypt+0x3bc>)
 800611e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006122:	405a      	eors	r2, r3
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	0e1b      	lsrs	r3, r3, #24
 8006128:	4986      	ldr	r1, [pc, #536]	; (8006344 <mbedtls_internal_aes_decrypt+0x3c0>)
 800612a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800612e:	4053      	eors	r3, r2
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
 8006132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006134:	1d1a      	adds	r2, r3, #4
 8006136:	633a      	str	r2, [r7, #48]	; 0x30
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	497e      	ldr	r1, [pc, #504]	; (8006338 <mbedtls_internal_aes_decrypt+0x3b4>)
 8006140:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006144:	405a      	eors	r2, r3
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	0a1b      	lsrs	r3, r3, #8
 800614a:	b2db      	uxtb	r3, r3
 800614c:	497b      	ldr	r1, [pc, #492]	; (800633c <mbedtls_internal_aes_decrypt+0x3b8>)
 800614e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006152:	405a      	eors	r2, r3
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	0c1b      	lsrs	r3, r3, #16
 8006158:	b2db      	uxtb	r3, r3
 800615a:	4979      	ldr	r1, [pc, #484]	; (8006340 <mbedtls_internal_aes_decrypt+0x3bc>)
 800615c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006160:	405a      	eors	r2, r3
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	0e1b      	lsrs	r3, r3, #24
 8006166:	4977      	ldr	r1, [pc, #476]	; (8006344 <mbedtls_internal_aes_decrypt+0x3c0>)
 8006168:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800616c:	4053      	eors	r3, r2
 800616e:	62fb      	str	r3, [r7, #44]	; 0x2c
        AES_RROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	1d1a      	adds	r2, r3, #4
 8006174:	633a      	str	r2, [r7, #48]	; 0x30
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	b2db      	uxtb	r3, r3
 800617c:	496e      	ldr	r1, [pc, #440]	; (8006338 <mbedtls_internal_aes_decrypt+0x3b4>)
 800617e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006182:	405a      	eors	r2, r3
 8006184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006186:	0a1b      	lsrs	r3, r3, #8
 8006188:	b2db      	uxtb	r3, r3
 800618a:	496c      	ldr	r1, [pc, #432]	; (800633c <mbedtls_internal_aes_decrypt+0x3b8>)
 800618c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006190:	405a      	eors	r2, r3
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	0c1b      	lsrs	r3, r3, #16
 8006196:	b2db      	uxtb	r3, r3
 8006198:	4969      	ldr	r1, [pc, #420]	; (8006340 <mbedtls_internal_aes_decrypt+0x3bc>)
 800619a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800619e:	405a      	eors	r2, r3
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	0e1b      	lsrs	r3, r3, #24
 80061a4:	4967      	ldr	r1, [pc, #412]	; (8006344 <mbedtls_internal_aes_decrypt+0x3c0>)
 80061a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80061aa:	4053      	eors	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	1d1a      	adds	r2, r3, #4
 80061b2:	633a      	str	r2, [r7, #48]	; 0x30
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	495f      	ldr	r1, [pc, #380]	; (8006338 <mbedtls_internal_aes_decrypt+0x3b4>)
 80061bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80061c0:	405a      	eors	r2, r3
 80061c2:	6a3b      	ldr	r3, [r7, #32]
 80061c4:	0a1b      	lsrs	r3, r3, #8
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	495c      	ldr	r1, [pc, #368]	; (800633c <mbedtls_internal_aes_decrypt+0x3b8>)
 80061ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80061ce:	405a      	eors	r2, r3
 80061d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d2:	0c1b      	lsrs	r3, r3, #16
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	495a      	ldr	r1, [pc, #360]	; (8006340 <mbedtls_internal_aes_decrypt+0x3bc>)
 80061d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80061dc:	405a      	eors	r2, r3
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	0e1b      	lsrs	r3, r3, #24
 80061e2:	4958      	ldr	r1, [pc, #352]	; (8006344 <mbedtls_internal_aes_decrypt+0x3c0>)
 80061e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80061e8:	4053      	eors	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	1d1a      	adds	r2, r3, #4
 80061f0:	633a      	str	r2, [r7, #48]	; 0x30
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	494f      	ldr	r1, [pc, #316]	; (8006338 <mbedtls_internal_aes_decrypt+0x3b4>)
 80061fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80061fe:	405a      	eors	r2, r3
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	0a1b      	lsrs	r3, r3, #8
 8006204:	b2db      	uxtb	r3, r3
 8006206:	494d      	ldr	r1, [pc, #308]	; (800633c <mbedtls_internal_aes_decrypt+0x3b8>)
 8006208:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800620c:	405a      	eors	r2, r3
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	0c1b      	lsrs	r3, r3, #16
 8006212:	b2db      	uxtb	r3, r3
 8006214:	494a      	ldr	r1, [pc, #296]	; (8006340 <mbedtls_internal_aes_decrypt+0x3bc>)
 8006216:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800621a:	405a      	eors	r2, r3
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	0e1b      	lsrs	r3, r3, #24
 8006220:	4948      	ldr	r1, [pc, #288]	; (8006344 <mbedtls_internal_aes_decrypt+0x3c0>)
 8006222:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006226:	4053      	eors	r3, r2
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	1d1a      	adds	r2, r3, #4
 800622e:	633a      	str	r2, [r7, #48]	; 0x30
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	b2db      	uxtb	r3, r3
 8006236:	4940      	ldr	r1, [pc, #256]	; (8006338 <mbedtls_internal_aes_decrypt+0x3b4>)
 8006238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800623c:	405a      	eors	r2, r3
 800623e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006240:	0a1b      	lsrs	r3, r3, #8
 8006242:	b2db      	uxtb	r3, r3
 8006244:	493d      	ldr	r1, [pc, #244]	; (800633c <mbedtls_internal_aes_decrypt+0x3b8>)
 8006246:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800624a:	405a      	eors	r2, r3
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	0c1b      	lsrs	r3, r3, #16
 8006250:	b2db      	uxtb	r3, r3
 8006252:	493b      	ldr	r1, [pc, #236]	; (8006340 <mbedtls_internal_aes_decrypt+0x3bc>)
 8006254:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006258:	405a      	eors	r2, r3
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	0e1b      	lsrs	r3, r3, #24
 800625e:	4939      	ldr	r1, [pc, #228]	; (8006344 <mbedtls_internal_aes_decrypt+0x3c0>)
 8006260:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006264:	4053      	eors	r3, r2
 8006266:	61fb      	str	r3, [r7, #28]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8006268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626a:	3b01      	subs	r3, #1
 800626c:	637b      	str	r3, [r7, #52]	; 0x34
 800626e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006270:	2b00      	cmp	r3, #0
 8006272:	f73f af01 	bgt.w	8006078 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	1d1a      	adds	r2, r3, #4
 800627a:	633a      	str	r2, [r7, #48]	; 0x30
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	492d      	ldr	r1, [pc, #180]	; (8006338 <mbedtls_internal_aes_decrypt+0x3b4>)
 8006284:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006288:	405a      	eors	r2, r3
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	0a1b      	lsrs	r3, r3, #8
 800628e:	b2db      	uxtb	r3, r3
 8006290:	492a      	ldr	r1, [pc, #168]	; (800633c <mbedtls_internal_aes_decrypt+0x3b8>)
 8006292:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006296:	405a      	eors	r2, r3
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	0c1b      	lsrs	r3, r3, #16
 800629c:	b2db      	uxtb	r3, r3
 800629e:	4928      	ldr	r1, [pc, #160]	; (8006340 <mbedtls_internal_aes_decrypt+0x3bc>)
 80062a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80062a4:	405a      	eors	r2, r3
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	0e1b      	lsrs	r3, r3, #24
 80062aa:	4926      	ldr	r1, [pc, #152]	; (8006344 <mbedtls_internal_aes_decrypt+0x3c0>)
 80062ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80062b0:	4053      	eors	r3, r2
 80062b2:	623b      	str	r3, [r7, #32]
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	1d1a      	adds	r2, r3, #4
 80062b8:	633a      	str	r2, [r7, #48]	; 0x30
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	491d      	ldr	r1, [pc, #116]	; (8006338 <mbedtls_internal_aes_decrypt+0x3b4>)
 80062c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80062c6:	405a      	eors	r2, r3
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	0a1b      	lsrs	r3, r3, #8
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	491b      	ldr	r1, [pc, #108]	; (800633c <mbedtls_internal_aes_decrypt+0x3b8>)
 80062d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80062d4:	405a      	eors	r2, r3
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	0c1b      	lsrs	r3, r3, #16
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	4918      	ldr	r1, [pc, #96]	; (8006340 <mbedtls_internal_aes_decrypt+0x3bc>)
 80062de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80062e2:	405a      	eors	r2, r3
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	0e1b      	lsrs	r3, r3, #24
 80062e8:	4916      	ldr	r1, [pc, #88]	; (8006344 <mbedtls_internal_aes_decrypt+0x3c0>)
 80062ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80062ee:	4053      	eors	r3, r2
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	1d1a      	adds	r2, r3, #4
 80062f6:	633a      	str	r2, [r7, #48]	; 0x30
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	490e      	ldr	r1, [pc, #56]	; (8006338 <mbedtls_internal_aes_decrypt+0x3b4>)
 8006300:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006304:	405a      	eors	r2, r3
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	0a1b      	lsrs	r3, r3, #8
 800630a:	b2db      	uxtb	r3, r3
 800630c:	490b      	ldr	r1, [pc, #44]	; (800633c <mbedtls_internal_aes_decrypt+0x3b8>)
 800630e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006312:	405a      	eors	r2, r3
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	0c1b      	lsrs	r3, r3, #16
 8006318:	b2db      	uxtb	r3, r3
 800631a:	4909      	ldr	r1, [pc, #36]	; (8006340 <mbedtls_internal_aes_decrypt+0x3bc>)
 800631c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006320:	405a      	eors	r2, r3
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	0e1b      	lsrs	r3, r3, #24
 8006326:	4907      	ldr	r1, [pc, #28]	; (8006344 <mbedtls_internal_aes_decrypt+0x3c0>)
 8006328:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800632c:	4053      	eors	r3, r2
 800632e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006332:	1d1a      	adds	r2, r3, #4
 8006334:	e008      	b.n	8006348 <mbedtls_internal_aes_decrypt+0x3c4>
 8006336:	bf00      	nop
 8006338:	2000142c 	.word	0x2000142c
 800633c:	2000182c 	.word	0x2000182c
 8006340:	20001c2c 	.word	0x20001c2c
 8006344:	2000202c 	.word	0x2000202c
 8006348:	633a      	str	r2, [r7, #48]	; 0x30
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	497b      	ldr	r1, [pc, #492]	; (8006540 <mbedtls_internal_aes_decrypt+0x5bc>)
 8006352:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006356:	405a      	eors	r2, r3
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	0a1b      	lsrs	r3, r3, #8
 800635c:	b2db      	uxtb	r3, r3
 800635e:	4979      	ldr	r1, [pc, #484]	; (8006544 <mbedtls_internal_aes_decrypt+0x5c0>)
 8006360:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006364:	405a      	eors	r2, r3
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	0c1b      	lsrs	r3, r3, #16
 800636a:	b2db      	uxtb	r3, r3
 800636c:	4976      	ldr	r1, [pc, #472]	; (8006548 <mbedtls_internal_aes_decrypt+0x5c4>)
 800636e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006372:	405a      	eors	r2, r3
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	0e1b      	lsrs	r3, r3, #24
 8006378:	4974      	ldr	r1, [pc, #464]	; (800654c <mbedtls_internal_aes_decrypt+0x5c8>)
 800637a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800637e:	4053      	eors	r3, r2
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c

    t.X[0] = *RK++ ^ \
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	1d1a      	adds	r2, r3, #4
 8006386:	633a      	str	r2, [r7, #48]	; 0x30
 8006388:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( t.Y[0]       ) & 0xFF ]       ) ^
 800638a:	6a3a      	ldr	r2, [r7, #32]
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	4970      	ldr	r1, [pc, #448]	; (8006550 <mbedtls_internal_aes_decrypt+0x5cc>)
 8006390:	5c8a      	ldrb	r2, [r1, r2]
    t.X[0] = *RK++ ^ \
 8006392:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[3] >>  8 ) & 0xFF ] <<  8 ) ^
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	0a1b      	lsrs	r3, r3, #8
 8006398:	b2db      	uxtb	r3, r3
 800639a:	496d      	ldr	r1, [pc, #436]	; (8006550 <mbedtls_internal_aes_decrypt+0x5cc>)
 800639c:	5ccb      	ldrb	r3, [r1, r3]
 800639e:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( t.Y[0]       ) & 0xFF ]       ) ^
 80063a0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[2] >> 16 ) & 0xFF ] << 16 ) ^
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	0c1b      	lsrs	r3, r3, #16
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	4969      	ldr	r1, [pc, #420]	; (8006550 <mbedtls_internal_aes_decrypt+0x5cc>)
 80063aa:	5ccb      	ldrb	r3, [r1, r3]
 80063ac:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( t.Y[3] >>  8 ) & 0xFF ] <<  8 ) ^
 80063ae:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[1] >> 24 ) & 0xFF ] << 24 );
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	0e1b      	lsrs	r3, r3, #24
 80063b4:	4966      	ldr	r1, [pc, #408]	; (8006550 <mbedtls_internal_aes_decrypt+0x5cc>)
 80063b6:	5ccb      	ldrb	r3, [r1, r3]
 80063b8:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ ( t.Y[2] >> 16 ) & 0xFF ] << 16 ) ^
 80063ba:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 80063bc:	613b      	str	r3, [r7, #16]

    t.X[1] = *RK++ ^ \
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	1d1a      	adds	r2, r3, #4
 80063c2:	633a      	str	r2, [r7, #48]	; 0x30
 80063c4:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( t.Y[1]       ) & 0xFF ]       ) ^
 80063c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	4961      	ldr	r1, [pc, #388]	; (8006550 <mbedtls_internal_aes_decrypt+0x5cc>)
 80063cc:	5c8a      	ldrb	r2, [r1, r2]
    t.X[1] = *RK++ ^ \
 80063ce:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[0] >>  8 ) & 0xFF ] <<  8 ) ^
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	0a1b      	lsrs	r3, r3, #8
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	495e      	ldr	r1, [pc, #376]	; (8006550 <mbedtls_internal_aes_decrypt+0x5cc>)
 80063d8:	5ccb      	ldrb	r3, [r1, r3]
 80063da:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( t.Y[1]       ) & 0xFF ]       ) ^
 80063dc:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 80063de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e0:	0c1b      	lsrs	r3, r3, #16
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	495a      	ldr	r1, [pc, #360]	; (8006550 <mbedtls_internal_aes_decrypt+0x5cc>)
 80063e6:	5ccb      	ldrb	r3, [r1, r3]
 80063e8:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( t.Y[0] >>  8 ) & 0xFF ] <<  8 ) ^
 80063ea:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[2] >> 24 ) & 0xFF ] << 24 );
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	0e1b      	lsrs	r3, r3, #24
 80063f0:	4957      	ldr	r1, [pc, #348]	; (8006550 <mbedtls_internal_aes_decrypt+0x5cc>)
 80063f2:	5ccb      	ldrb	r3, [r1, r3]
 80063f4:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 80063f6:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 80063f8:	617b      	str	r3, [r7, #20]

    t.X[2] = *RK++ ^ \
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	1d1a      	adds	r2, r3, #4
 80063fe:	633a      	str	r2, [r7, #48]	; 0x30
 8006400:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( t.Y[2]       ) & 0xFF ]       ) ^
 8006402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006404:	b2d2      	uxtb	r2, r2
 8006406:	4952      	ldr	r1, [pc, #328]	; (8006550 <mbedtls_internal_aes_decrypt+0x5cc>)
 8006408:	5c8a      	ldrb	r2, [r1, r2]
    t.X[2] = *RK++ ^ \
 800640a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[1] >>  8 ) & 0xFF ] <<  8 ) ^
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	0a1b      	lsrs	r3, r3, #8
 8006410:	b2db      	uxtb	r3, r3
 8006412:	494f      	ldr	r1, [pc, #316]	; (8006550 <mbedtls_internal_aes_decrypt+0x5cc>)
 8006414:	5ccb      	ldrb	r3, [r1, r3]
 8006416:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( t.Y[2]       ) & 0xFF ]       ) ^
 8006418:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	0c1b      	lsrs	r3, r3, #16
 800641e:	b2db      	uxtb	r3, r3
 8006420:	494b      	ldr	r1, [pc, #300]	; (8006550 <mbedtls_internal_aes_decrypt+0x5cc>)
 8006422:	5ccb      	ldrb	r3, [r1, r3]
 8006424:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( t.Y[1] >>  8 ) & 0xFF ] <<  8 ) ^
 8006426:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[3] >> 24 ) & 0xFF ] << 24 );
 8006428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642a:	0e1b      	lsrs	r3, r3, #24
 800642c:	4948      	ldr	r1, [pc, #288]	; (8006550 <mbedtls_internal_aes_decrypt+0x5cc>)
 800642e:	5ccb      	ldrb	r3, [r1, r3]
 8006430:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 8006432:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8006434:	61bb      	str	r3, [r7, #24]

    t.X[3] = *RK++ ^ \
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	1d1a      	adds	r2, r3, #4
 800643a:	633a      	str	r2, [r7, #48]	; 0x30
 800643c:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( t.Y[3]       ) & 0xFF ]       ) ^
 800643e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	4943      	ldr	r1, [pc, #268]	; (8006550 <mbedtls_internal_aes_decrypt+0x5cc>)
 8006444:	5c8a      	ldrb	r2, [r1, r2]
    t.X[3] = *RK++ ^ \
 8006446:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[2] >>  8 ) & 0xFF ] <<  8 ) ^
 8006448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644a:	0a1b      	lsrs	r3, r3, #8
 800644c:	b2db      	uxtb	r3, r3
 800644e:	4940      	ldr	r1, [pc, #256]	; (8006550 <mbedtls_internal_aes_decrypt+0x5cc>)
 8006450:	5ccb      	ldrb	r3, [r1, r3]
 8006452:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( t.Y[3]       ) & 0xFF ]       ) ^
 8006454:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	0c1b      	lsrs	r3, r3, #16
 800645a:	b2db      	uxtb	r3, r3
 800645c:	493c      	ldr	r1, [pc, #240]	; (8006550 <mbedtls_internal_aes_decrypt+0x5cc>)
 800645e:	5ccb      	ldrb	r3, [r1, r3]
 8006460:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( t.Y[2] >>  8 ) & 0xFF ] <<  8 ) ^
 8006462:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[0] >> 24 ) & 0xFF ] << 24 );
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	0e1b      	lsrs	r3, r3, #24
 8006468:	4939      	ldr	r1, [pc, #228]	; (8006550 <mbedtls_internal_aes_decrypt+0x5cc>)
 800646a:	5ccb      	ldrb	r3, [r1, r3]
 800646c:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 800646e:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 8006470:	61fb      	str	r3, [r7, #28]

    PUT_UINT32_LE( t.X[0], output,  0 );
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	b2da      	uxtb	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	0a1a      	lsrs	r2, r3, #8
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	3301      	adds	r3, #1
 8006482:	b2d2      	uxtb	r2, r2
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	0c1a      	lsrs	r2, r3, #16
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3302      	adds	r3, #2
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	0e1a      	lsrs	r2, r3, #24
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3303      	adds	r3, #3
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( t.X[1], output,  4 );
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3304      	adds	r3, #4
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	0a1a      	lsrs	r2, r3, #8
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3305      	adds	r3, #5
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	701a      	strb	r2, [r3, #0]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	0c1a      	lsrs	r2, r3, #16
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3306      	adds	r3, #6
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	0e1a      	lsrs	r2, r3, #24
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3307      	adds	r3, #7
 80064c8:	b2d2      	uxtb	r2, r2
 80064ca:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( t.X[2], output,  8 );
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3308      	adds	r3, #8
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	0a1a      	lsrs	r2, r3, #8
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3309      	adds	r3, #9
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	0c1a      	lsrs	r2, r3, #16
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	330a      	adds	r3, #10
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	0e1a      	lsrs	r2, r3, #24
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	330b      	adds	r3, #11
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( t.X[3], output, 12 );
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	330c      	adds	r3, #12
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	701a      	strb	r2, [r3, #0]
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	0a1a      	lsrs	r2, r3, #8
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	330d      	adds	r3, #13
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	0c1a      	lsrs	r2, r3, #16
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	330e      	adds	r3, #14
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	0e1a      	lsrs	r2, r3, #24
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	330f      	adds	r3, #15
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	701a      	strb	r2, [r3, #0]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 8006528:	f107 0310 	add.w	r3, r7, #16
 800652c:	2120      	movs	r1, #32
 800652e:	4618      	mov	r0, r3
 8006530:	f000 f8ac 	bl	800668c <mbedtls_platform_zeroize>

    return( 0 );
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3738      	adds	r7, #56	; 0x38
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	2000142c 	.word	0x2000142c
 8006544:	2000182c 	.word	0x2000182c
 8006548:	20001c2c 	.word	0x20001c2c
 800654c:	2000202c 	.word	0x2000202c
 8006550:	2000132c 	.word	0x2000132c

08006554 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d106      	bne.n	8006576 <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7ff fa21 	bl	80059b4 <mbedtls_internal_aes_encrypt>
 8006572:	4603      	mov	r3, r0
 8006574:	e005      	b.n	8006582 <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f7ff fd02 	bl	8005f84 <mbedtls_internal_aes_decrypt>
 8006580:	4603      	mov	r3, r0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 800658a:	b5b0      	push	{r4, r5, r7, lr}
 800658c:	b08a      	sub	sp, #40	; 0x28
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	607a      	str	r2, [r7, #4]
 8006596:	603b      	str	r3, [r7, #0]
                      mode == MBEDTLS_AES_DECRYPT );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    if( length % 16 )
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 80065a2:	f06f 0321 	mvn.w	r3, #33	; 0x21
 80065a6:	e06d      	b.n	8006684 <mbedtls_aes_crypt_cbc+0xfa>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d166      	bne.n	800667c <mbedtls_aes_crypt_cbc+0xf2>
    {
        while( length > 0 )
 80065ae:	e036      	b.n	800661e <mbedtls_aes_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 80065b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b2:	f107 0414 	add.w	r4, r7, #20
 80065b6:	6818      	ldr	r0, [r3, #0]
 80065b8:	6859      	ldr	r1, [r3, #4]
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 80065c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065c4:	68b9      	ldr	r1, [r7, #8]
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f7ff ffc4 	bl	8006554 <mbedtls_aes_crypt_ecb>

            for( i = 0; i < 16; i++ )
 80065cc:	2300      	movs	r3, #0
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
 80065d0:	e010      	b.n	80065f4 <mbedtls_aes_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065d6:	4413      	add	r3, r2
 80065d8:	7819      	ldrb	r1, [r3, #0]
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	4413      	add	r3, r2
 80065e0:	781a      	ldrb	r2, [r3, #0]
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80065e6:	4403      	add	r3, r0
 80065e8:	404a      	eors	r2, r1
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	3301      	adds	r3, #1
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	2b0f      	cmp	r3, #15
 80065f8:	ddeb      	ble.n	80065d2 <mbedtls_aes_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	461d      	mov	r5, r3
 80065fe:	f107 0414 	add.w	r4, r7, #20
 8006602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006604:	6028      	str	r0, [r5, #0]
 8006606:	6069      	str	r1, [r5, #4]
 8006608:	60aa      	str	r2, [r5, #8]
 800660a:	60eb      	str	r3, [r5, #12]

            input  += 16;
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	3310      	adds	r3, #16
 8006610:	63bb      	str	r3, [r7, #56]	; 0x38
            output += 16;
 8006612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006614:	3310      	adds	r3, #16
 8006616:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= 16;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3b10      	subs	r3, #16
 800661c:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1c5      	bne.n	80065b0 <mbedtls_aes_crypt_cbc+0x26>
 8006624:	e02d      	b.n	8006682 <mbedtls_aes_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 8006626:	2300      	movs	r3, #0
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
 800662a:	e010      	b.n	800664e <mbedtls_aes_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006630:	4413      	add	r3, r2
 8006632:	7819      	ldrb	r1, [r3, #0]
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	4413      	add	r3, r2
 800663a:	781a      	ldrb	r2, [r3, #0]
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006640:	4403      	add	r3, r0
 8006642:	404a      	eors	r2, r1
 8006644:	b2d2      	uxtb	r2, r2
 8006646:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	3301      	adds	r3, #1
 800664c:	627b      	str	r3, [r7, #36]	; 0x24
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	2b0f      	cmp	r3, #15
 8006652:	ddeb      	ble.n	800662c <mbedtls_aes_crypt_cbc+0xa2>

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 8006654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006656:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f7ff ff7a 	bl	8006554 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 8006660:	2210      	movs	r2, #16
 8006662:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006664:	6838      	ldr	r0, [r7, #0]
 8006666:	f000 f849 	bl	80066fc <memcpy>

            input  += 16;
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	3310      	adds	r3, #16
 800666e:	63bb      	str	r3, [r7, #56]	; 0x38
            output += 16;
 8006670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006672:	3310      	adds	r3, #16
 8006674:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= 16;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	3b10      	subs	r3, #16
 800667a:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1d1      	bne.n	8006626 <mbedtls_aes_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3728      	adds	r7, #40	; 0x28
 8006688:	46bd      	mov	sp, r7
 800668a:	bdb0      	pop	{r4, r5, r7, pc}

0800668c <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <mbedtls_platform_zeroize+0x1c>
        memset_func( buf, 0, len );
 800669c:	4b04      	ldr	r3, [pc, #16]	; (80066b0 <mbedtls_platform_zeroize+0x24>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	2100      	movs	r1, #0
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	4798      	blx	r3
}
 80066a8:	bf00      	nop
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	20000080 	.word	0x20000080

080066b4 <__libc_init_array>:
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	4e0d      	ldr	r6, [pc, #52]	; (80066ec <__libc_init_array+0x38>)
 80066b8:	2500      	movs	r5, #0
 80066ba:	4c0d      	ldr	r4, [pc, #52]	; (80066f0 <__libc_init_array+0x3c>)
 80066bc:	1ba4      	subs	r4, r4, r6
 80066be:	10a4      	asrs	r4, r4, #2
 80066c0:	42a5      	cmp	r5, r4
 80066c2:	d109      	bne.n	80066d8 <__libc_init_array+0x24>
 80066c4:	4e0b      	ldr	r6, [pc, #44]	; (80066f4 <__libc_init_array+0x40>)
 80066c6:	2500      	movs	r5, #0
 80066c8:	4c0b      	ldr	r4, [pc, #44]	; (80066f8 <__libc_init_array+0x44>)
 80066ca:	f000 f82b 	bl	8006724 <_init>
 80066ce:	1ba4      	subs	r4, r4, r6
 80066d0:	10a4      	asrs	r4, r4, #2
 80066d2:	42a5      	cmp	r5, r4
 80066d4:	d105      	bne.n	80066e2 <__libc_init_array+0x2e>
 80066d6:	bd70      	pop	{r4, r5, r6, pc}
 80066d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066dc:	3501      	adds	r5, #1
 80066de:	4798      	blx	r3
 80066e0:	e7ee      	b.n	80066c0 <__libc_init_array+0xc>
 80066e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066e6:	3501      	adds	r5, #1
 80066e8:	4798      	blx	r3
 80066ea:	e7f2      	b.n	80066d2 <__libc_init_array+0x1e>
 80066ec:	080067d8 	.word	0x080067d8
 80066f0:	080067d8 	.word	0x080067d8
 80066f4:	080067d8 	.word	0x080067d8
 80066f8:	080067e0 	.word	0x080067e0

080066fc <memcpy>:
 80066fc:	1e43      	subs	r3, r0, #1
 80066fe:	440a      	add	r2, r1
 8006700:	b510      	push	{r4, lr}
 8006702:	4291      	cmp	r1, r2
 8006704:	d100      	bne.n	8006708 <memcpy+0xc>
 8006706:	bd10      	pop	{r4, pc}
 8006708:	f811 4b01 	ldrb.w	r4, [r1], #1
 800670c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006710:	e7f7      	b.n	8006702 <memcpy+0x6>

08006712 <memset>:
 8006712:	4402      	add	r2, r0
 8006714:	4603      	mov	r3, r0
 8006716:	4293      	cmp	r3, r2
 8006718:	d100      	bne.n	800671c <memset+0xa>
 800671a:	4770      	bx	lr
 800671c:	f803 1b01 	strb.w	r1, [r3], #1
 8006720:	e7f9      	b.n	8006716 <memset+0x4>
	...

08006724 <_init>:
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	bf00      	nop
 8006728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672a:	bc08      	pop	{r3}
 800672c:	469e      	mov	lr, r3
 800672e:	4770      	bx	lr

08006730 <_fini>:
 8006730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006732:	bf00      	nop
 8006734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006736:	bc08      	pop	{r3}
 8006738:	469e      	mov	lr, r3
 800673a:	4770      	bx	lr
 800673c:	0000      	movs	r0, r0
	...
